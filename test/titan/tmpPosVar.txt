Unique Path (UPath)
Uunique
then	 = 	2
end	 = 	6
NUMBER	 = 	1
true	 = 	1
false	 = 	1
and	 = 	1
<<	 = 	1
import	 = 	2
if	 = 	1
STRINGLIT	 = 	6
>	 = 	1
or	 = 	1
as	 = 	1
record	 = 	1
//	 = 	1
;	 = 	4
^	 = 	1
NAME	 = 	13
>=	 = 	1
string	 = 	1
not	 = 	1
]	 = 	1
float	 = 	1
[	 = 	1
%%	 = 	1
return	 = 	1
*	 = 	1
-	 = 	2
+	 = 	1
..	 = 	1
==	 = 	1
else	 = 	1
(	 = 	6
)	 = 	6
&	 = 	1
~	 = 	2
,	 = 	8
while	 = 	1
boolean	 = 	1
<=	 = 	1
for	 = 	1
local	 = 	4
repeat	 = 	1
nil	 = 	2
|	 = 	1
elseif	 = 	1
->	 = 	4
#	 = 	1
~=	 = 	1
>>	 = 	1
do	 = 	3
foreign	 = 	1
<	 = 	1
=	 = 	7
:	 = 	5
{	 = 	2
until	 = 	1
function	 = 	1
.	 = 	1
/	 = 	1
}	 = 	2
SKIP	 = 	1
value	 = 	1
integer	 = 	1
Token 	1	 = 	45
Token 	2	 = 	7
Token 	3	 = 	1
Token 	4	 = 	3
Token 	5	 = 	1
Token 	6	 = 	4
Token 	7	 = 	1
Token 	8	 = 	1
Token 	9	 = 	nil
Token 	10	 = 	nil
Unique tokens (# 44): #, %%, &, *, +, ., .., /, //, <, <<, <=, ==, >, >=, >>, NUMBER, [, ], ^, and, as, boolean, else, elseif, false, float, for, foreign, function, if, integer, not, or, record, repeat, return, string, true, until, value, while, |, ~=
calcTail
program: 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
toplevelfunc: 	end
toplevelvar: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
toplevelrecord: 	end
localopt: 	__empty, local
import: 	), __STRINGLIT
foreign: 	), __STRINGLIT
rettypeopt: 	), __NAME, __empty, boolean, float, integer, nil, string, value, }
paramlist: 	), __NAME, __empty, boolean, float, integer, nil, string, value, }
param: 	), __NAME, boolean, float, integer, nil, string, value, }
decl: 	), __NAME, boolean, float, integer, nil, string, value, }
decllist: 	), __NAME, boolean, float, integer, nil, string, value, }
simpletype: 	__NAME, boolean, float, integer, nil, string, value, }
typelist: 	)
rettype: 	), __NAME, boolean, float, integer, nil, string, value, }
type: 	), __NAME, boolean, float, integer, nil, string, value, }
recordfields: 	), ;, __NAME, boolean, float, integer, nil, string, value, }
recordfield: 	), ;, __NAME, boolean, float, integer, nil, string, value, }
block: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, true, value, }
statement: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
elseifstats: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
elseifstat: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
elseopt: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, else, end, false, float, integer, nil, return, string, true, value, }
returnstat: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, return, string, true, value, }
exp: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e1: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e2: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e3: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e4: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e5: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e6: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e7: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e8: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e9: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e10: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e11: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e12: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
suffixedexp: 	), ], __NAME, __STRINGLIT, }
expsuffix: 	), ], __NAME, __STRINGLIT, }
prefixexp: 	), __NAME
castexp: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
simpleexp: 	), ], __NAME, __NUMBER, __STRINGLIT, false, nil, true, }
var: 	), ], __NAME, __STRINGLIT, }
varlist: 	), ], __NAME, __STRINGLIT, }
funcargs: 	), __STRINGLIT, }
explist: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
initlist: 	}
fieldlist: 	), ,, ;, ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
field: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
fieldsep: 	,, ;
STRINGLIT: 	", '
RESERVED: 	and, as, boolean, break, do, else, elseif, end, false, float, for, foreign, function, goto, if, import, in, integer, local, nil, not, or, record, repeat, return, string, then, true, until, value, while
NAME: 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, _, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z
NUMBER: 	., 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
COMMENT: 	--, __any
SPACE: 		, 
, , , ,  , __COMMENT
SKIP: 		, 
, , , ,  , __COMMENT, __empty
Global Prefix
program: 	
toplevelfunc: 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
toplevelvar: 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
toplevelrecord: 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
localopt: 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
import: 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
foreign: 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
rettypeopt: 	)
paramlist: 	(
param: 	(, ,
decl: 	,, __empty, for, local
decllist: 	local
simpletype: 	(, ,, ->, :, as, {
typelist: 	(, ,, ->, :, as, {
rettype: 	->, :
type: 	(, ,, :, as, {
recordfields: 	__NAME
recordfield: 	), ;, __NAME, boolean, float, integer, nil, string, value, }
block: 	), __NAME, __empty, boolean, do, else, float, integer, nil, repeat, string, then, value, }
statement: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
elseifstats: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
elseifstat: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
elseopt: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
returnstat: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
exp: 	(, ,, ;, =, [, elseif, if, return, until, while, {
e1: 	(, ,, ;, =, [, elseif, if, return, until, while, {
e2: 	(, ,, ;, =, [, elseif, if, or, return, until, while, {
e3: 	(, ,, ;, =, [, and, elseif, if, or, return, until, while, {
e4: 	(, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, ~=
e5: 	(, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, |, ~=
e6: 	(, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
e7: 	&, (, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
e8: 	&, (, ,, .., ;, <, <<, <=, =, ==, >, >=, >>, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
e9: 	&, (, ,, .., ;, <, <<, <=, =, ==, >, >=, >>, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
e10: 	&, (, +, ,, -, .., ;, <, <<, <=, =, ==, >, >=, >>, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
e11: 	%%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, or, return, until, while, {, |, ~, ~=
e12: 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
suffixedexp: 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __NUMBER, __STRINGLIT, __empty, and, boolean, do, else, elseif, end, false, float, if, integer, nil, not, or, repeat, return, string, then, true, until, value, while, {, |, }, ~, ~=
expsuffix: 	), ], __NAME, __STRINGLIT, }
prefixexp: 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __NUMBER, __STRINGLIT, __empty, and, boolean, do, else, elseif, end, false, float, if, integer, nil, not, or, repeat, return, string, then, true, until, value, while, {, |, }, ~, ~=
castexp: 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
simpleexp: 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
var: 	), ,, ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
varlist: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
funcargs: 	), ], __NAME, __STRINGLIT, }
explist: 	(, =, return
initlist: 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __STRINGLIT, and, elseif, if, not, or, return, until, while, {, |, }, ~, ~=
fieldlist: 	{
field: 	,, ;, {
fieldsep: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
STRINGLIT: 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __STRINGLIT, and, elseif, if, import, not, or, return, until, while, {, |, }, ~, ~=
RESERVED: 	
NAME: 	#, %%, &, (, ), *, +, ,, -, ->, ., .., /, //, :, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __NUMBER, __STRINGLIT, __empty, and, as, boolean, do, else, elseif, end, false, float, for, function, if, integer, local, nil, not, or, record, repeat, return, string, then, true, until, value, while, {, |, }, ~, ~=
NUMBER: 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
COMMENT: 		, 
, , , ,  , __COMMENT
SPACE: 	
SKIP: 	
calcPrefix
foreign	 -> 
	(foreign, program): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
e1	 -> 
	(e1, exp): 	(, ,, ;, =, [, elseif, if, return, until, while, {
e5	 -> 
	(e5, e4): 	(, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, ~=
	(e5, e4): 	|
typelist	 -> 
	(typelist, type): 	(, ,, :, as, {
	(typelist, rettype): 	->, :
	(typelist, rettype): 	->, :
__foreign	 -> 
	(__foreign, foreign): 	=
decllist	 -> 
	(decllist, statement): 	local
__}	 -> 
	(__}, simpletype): 	), __NAME, boolean, float, integer, nil, string, value, }
	(__}, initlist): 	), ,, ;, ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, {, }
e9	 -> 
	(e9, e8): 	&, (, ,, .., ;, <, <<, <=, =, ==, >, >=, >>, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
__&	 -> 
	(__&, e6): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__nil	 -> 
	(__nil, simpletype): 	(, ,, ->, :, as, {
	(__nil, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
__local	 -> 
	(__local, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
	(__local, import): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
	(__local, foreign): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
	(__local, localopt): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
__,	 -> 
	(__,, fieldsep): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__,, statement): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__,, varlist): 	), ], __NAME, __STRINGLIT, }
	(__,, explist): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__,, typelist): 	), __NAME, boolean, float, integer, nil, string, value, }
	(__,, paramlist): 	), __NAME, boolean, float, integer, nil, string, value, }
	(__,, statement): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__,, decllist): 	), __NAME, boolean, float, integer, nil, string, value, }
__:	 -> 
	(__:, param): 	__NAME
	(__:, recordfield): 	__NAME
	(__:, rettypeopt): 	)
	(__:, decl): 	__NAME
	(__:, expsuffix): 	), ], __NAME, __STRINGLIT, }
__boolean	 -> 
	(__boolean, simpletype): 	(, ,, ->, :, as, {
decl	 -> 
	(decl, decllist): 	local
	(decl, decllist): 	,
	(decl, statement): 	for
	(decl, toplevelvar): 	__empty, local
__.	 -> 
	(__., expsuffix): 	), ], __NAME, __STRINGLIT, }
__do	 -> 
	(__do, statement): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__do, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
	(__do, statement): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__(	 -> 
	(__(, toplevelfunc): 	__NAME
	(__(, funcargs): 	), ], __NAME, __STRINGLIT, }
	(__(, prefixexp): 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __NUMBER, __STRINGLIT, __empty, and, boolean, do, else, elseif, end, false, float, if, integer, nil, not, or, repeat, return, string, then, true, until, value, while, {, |, }, ~, ~=
	(__(, import): 	import
	(__(, typelist): 	(, ,, ->, :, as, {
	(__(, foreign): 	import
explist	 -> 
	(explist, funcargs): 	(
	(explist, statement): 	=
	(explist, statement): 	=
	(explist, returnstat): 	return
returnstat	 -> 
	(returnstat, block): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
fieldsep	 -> 
	(fieldsep, fieldlist): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(fieldsep, fieldlist): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e4	 -> 
	(e4, e3): 	(, ,, ;, =, [, and, elseif, if, or, return, until, while, {
	(e4, e3): 	<, <=, ==, >, >=, ~=
__]	 -> 
	(__], expsuffix): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__//	 -> 
	(__//, e10): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
field	 -> 
	(field, fieldlist): 	{
	(field, fieldlist): 	,, ;
type	 -> 
	(type, param): 	:
	(type, recordfield): 	:
	(type, typelist): 	,
	(type, decl): 	:
	(type, typelist): 	(
	(type, simpletype): 	{
	(type, castexp): 	as
fieldlist	 -> 
	(fieldlist, initlist): 	{
toplevelrecord	 -> 
	(toplevelrecord, program): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
suffixedexp	 -> 
	(suffixedexp, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
	(suffixedexp, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
	(suffixedexp, var): 	), ,, ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
__->	 -> 
	(__->, type): 	__NAME, boolean, float, integer, nil, string, value, }
	(__->, rettype): 	)
	(__->, rettype): 	__NAME, boolean, float, integer, nil, string, value, }
	(__->, type): 	)
__as	 -> 
	(__as, castexp): 	), ], __NAME, __NUMBER, __STRINGLIT, false, nil, true, }
var	 -> 
	(var, varlist): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
	(var, varlist): 	,
__repeat	 -> 
	(__repeat, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
__+	 -> 
	(__+, e9): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
program	 -> 
NUMBER	 -> 
	(NUMBER, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
__^	 -> 
	(__^, e12): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__false	 -> 
	(__false, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
varlist	 -> 
	(varlist, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
__value	 -> 
	(__value, simpletype): 	(, ,, ->, :, as, {
__while	 -> 
	(__while, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
simpleexp	 -> 
	(simpleexp, castexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
	(simpleexp, castexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
__[	 -> 
	(__[, expsuffix): 	), ], __NAME, __STRINGLIT, }
funcargs	 -> 
	(funcargs, expsuffix): 	), ], __NAME, __STRINGLIT, }
	(funcargs, expsuffix): 	__NAME
expsuffix	 -> 
	(expsuffix, suffixedexp): 	), ], __NAME, __STRINGLIT, }
e12	 -> 
	(e12, e11): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
toplevelfunc	 -> 
	(toplevelfunc, program): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
SKIP	 -> 
	(SKIP, program): 	
__true	 -> 
	(__true, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
castexp	 -> 
	(castexp, e12): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
e3	 -> 
	(e3, e2): 	(, ,, ;, =, [, elseif, if, or, return, until, while, {
	(e3, e2): 	and
prefixexp	 -> 
	(prefixexp, suffixedexp): 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __NUMBER, __STRINGLIT, __empty, and, boolean, do, else, elseif, end, false, float, if, integer, nil, not, or, repeat, return, string, then, true, until, value, while, {, |, }, ~, ~=
	(prefixexp, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
__*	 -> 
	(__*, e10): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
elseifstat	 -> 
	(elseifstat, elseifstats): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
__not	 -> 
	(__not, e11): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
__/	 -> 
	(__/, e10): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__<	 -> 
	(__<, e3): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__#	 -> 
	(__#, e11): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
e11	 -> 
	(e11, e10): 	%%, *, /, //
	(e11, e10): 	&, (, +, ,, -, .., ;, <, <<, <=, =, ==, >, >=, >>, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
	(e11, e12): 	^
STRINGLIT	 -> 
	(STRINGLIT, foreign): 	(
	(STRINGLIT, import): 	import
	(STRINGLIT, import): 	(
	(STRINGLIT, foreign): 	import
	(STRINGLIT, funcargs): 	), ], __NAME, __STRINGLIT, }
	(STRINGLIT, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
__%%	 -> 
	(__%%, e10): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__if	 -> 
	(__if, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
initlist	 -> 
	(initlist, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
	(initlist, funcargs): 	), ], __NAME, __STRINGLIT, }
e10	 -> 
	(e10, e9): 	&, (, ,, .., ;, <, <<, <=, =, ==, >, >=, >>, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
	(e10, e9): 	+, -
__=	 -> 
	(__=, toplevelvar): 	), __NAME, boolean, float, integer, nil, string, value, }
	(__=, statement): 	), ], __NAME, __STRINGLIT, }
	(__=, statement): 	), __NAME, boolean, float, integer, nil, string, value, }
	(__=, import): 	__NAME
	(__=, field): 	__NAME
	(__=, foreign): 	__NAME
	(__=, statement): 	), __NAME, boolean, float, integer, nil, string, value, }
__..	 -> 
	(__.., e8): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__>>	 -> 
	(__>>, e7): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
NAME	 -> 
	(NAME, param): 	(, ,
	(NAME, import): 	local
	(NAME, recordfield): 	), ;, __NAME, boolean, float, integer, nil, string, value, }
	(NAME, field): 	,, ;, {
	(NAME, expsuffix): 	.
	(NAME, var): 	), ,, ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
	(NAME, prefixexp): 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __NUMBER, __STRINGLIT, __empty, and, boolean, do, else, elseif, end, false, float, if, integer, nil, not, or, repeat, return, string, then, true, until, value, while, {, |, }, ~, ~=
	(NAME, expsuffix): 	:
	(NAME, foreign): 	local
	(NAME, decl): 	,, __empty, for, local
	(NAME, toplevelrecord): 	record
	(NAME, toplevelfunc): 	function
	(NAME, simpletype): 	(, ,, ->, :, as, {
__<<	 -> 
	(__<<, e7): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e8	 -> 
	(e8, e8): 	..
	(e8, e7): 	<<, >>
	(e8, e7): 	&, (, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
e7	 -> 
	(e7, e6): 	(, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
	(e7, e6): 	&
__function	 -> 
	(__function, toplevelfunc): 	__empty, local
__~	 -> 
	(__~, e5): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__~, e11): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
e6	 -> 
	(e6, e5): 	(, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, |, ~=
	(e6, e5): 	~
paramlist	 -> 
	(paramlist, toplevelfunc): 	(
recordfields	 -> 
	(recordfields, toplevelrecord): 	__NAME
__|	 -> 
	(__|, e4): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
toplevelvar	 -> 
	(toplevelvar, program): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
__;	 -> 
	(__;, returnstat): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, return, string, true, value, }
	(__;, recordfield): 	), __NAME, boolean, float, integer, nil, string, value, }
	(__;, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
	(__;, fieldsep): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__-	 -> 
	(__-, e9): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__-, e11): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
recordfield	 -> 
	(recordfield, recordfields): 	), ;, __NAME, boolean, float, integer, nil, string, value, }
__elseif	 -> 
	(__elseif, elseifstat): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
__until	 -> 
	(__until, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, repeat, return, string, true, value, }
__float	 -> 
	(__float, simpletype): 	(, ,, ->, :, as, {
elseopt	 -> 
	(elseopt, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
__~=	 -> 
	(__~=, e3): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__return	 -> 
	(__return, returnstat): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
param	 -> 
	(param, paramlist): 	(
	(param, paramlist): 	,
__<=	 -> 
	(__<=, e3): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__and	 -> 
	(__and, e2): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__then	 -> 
	(__then, statement): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__then, elseifstat): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
exp	 -> 
	(exp, statement): 	until
	(exp, toplevelvar): 	=
	(exp, statement): 	if
	(exp, statement): 	=
	(exp, field): 	,, ;, =, {
	(exp, statement): 	while
	(exp, explist): 	,
	(exp, explist): 	(, =, return
	(exp, prefixexp): 	(
	(exp, expsuffix): 	[
	(exp, elseifstat): 	elseif
	(exp, statement): 	,
	(exp, statement): 	,
rettypeopt	 -> 
	(rettypeopt, toplevelfunc): 	)
e2	 -> 
	(e2, e1): 	(, ,, ;, =, [, elseif, if, return, until, while, {
	(e2, e1): 	or
__>	 -> 
	(__>, e3): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
block	 -> 
	(block, elseopt): 	else
	(block, statement): 	repeat
	(block, elseifstat): 	then
	(block, statement): 	do
	(block, statement): 	then
	(block, toplevelfunc): 	), __NAME, __empty, boolean, float, integer, nil, string, value, }
	(block, statement): 	do
	(block, statement): 	do
__integer	 -> 
	(__integer, simpletype): 	(, ,, ->, :, as, {
__else	 -> 
	(__else, elseopt): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
import	 -> 
	(import, program): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
__import	 -> 
	(__import, import): 	=
	(__import, foreign): 	foreign
__for	 -> 
	(__for, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
simpletype	 -> 
	(simpletype, rettype): 	->, :
	(simpletype, rettype): 	->, :
	(simpletype, type): 	(, ,, :, as, {
	(simpletype, type): 	(, ,, :, as, {
__>=	 -> 
	(__>=, e3): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__string	 -> 
	(__string, simpletype): 	(, ,, ->, :, as, {
__or	 -> 
	(__or, e1): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
elseifstats	 -> 
	(elseifstats, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
__record	 -> 
	(__record, toplevelrecord): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
__)	 -> 
	(__), foreign): 	__STRINGLIT
	(__), typelist): 	(, ), __NAME, boolean, float, integer, nil, string, value, }
	(__), funcargs): 	(, ), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__), prefixexp): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__), toplevelfunc): 	(, ), __NAME, __empty, boolean, float, integer, nil, string, value, }
	(__), import): 	__STRINGLIT
rettype	 -> 
	(rettype, type): 	->
	(rettype, rettype): 	->
	(rettype, rettypeopt): 	:
	(rettype, type): 	->
	(rettype, rettype): 	->
localopt	 -> 
	(localopt, toplevelfunc): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
	(localopt, toplevelvar): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
__{	 -> 
	(__{, simpletype): 	(, ,, ->, :, as, {
	(__{, initlist): 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __STRINGLIT, and, elseif, if, not, or, return, until, while, {, |, }, ~, ~=
__==	 -> 
	(__==, e3): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__end	 -> 
	(__end, toplevelrecord): 	), ;, __NAME, boolean, float, integer, nil, string, value, }
	(__end, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, end, false, float, integer, nil, return, string, true, value, }
	(__end, toplevelfunc): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, true, value, }
	(__end, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, end, false, float, integer, nil, return, string, true, value, }
	(__end, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, else, end, false, float, integer, nil, return, string, then, true, value, }
	(__end, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, end, false, float, integer, nil, return, string, true, value, }
statement	 -> 
	(statement, block): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
isPrefixUniqueFlw s = 	SKIP	program
sem colisao
isPrefixUniqueFlw s = 	localopt	toplevelfunc
colide flw	toplevelvar	table: 0x56233fd981d0	program
colide flw	foreign	table: 0x56233fd98500	program
colide flw	import	table: 0x56233fd98410	program
colide flw	toplevelfunc	table: 0x56233fd98090	program
teve colisao
isPrefixUniqueFlw s = 	localopt	toplevelvar
colide flw	toplevelvar	table: 0x56233fd981d0	program
colide flw	statement	table: 0x56233fda5510	block
colide flw	foreign	table: 0x56233fd98500	program
colide flw	import	table: 0x56233fd98410	program
colide flw	toplevelfunc	table: 0x56233fd98090	program
colide flw	rettypeopt	table: 0x56233fd998b0	toplevelfunc
teve colisao
isPrefixUniqueFlw s = 	__record	toplevelrecord
sem colisao
isPrefixUniqueFlw s = 	__local	import
colide flw	local	table: 0x56233fd40fa0	statement
colide flw	local	table: 0x56233fd9b340	localopt
colide flw	local	table: 0x56233fd9c910	foreign
teve colisao
isPrefixUniqueFlw s = 	__(	import
colide flw	(	table: 0x56233fd9cef0	foreign
teve colisao
isPrefixUniqueFlw s = 	__local	foreign
colide flw	local	table: 0x56233fd40fa0	statement
colide flw	local	table: 0x56233fd9b6a0	import
colide flw	local	table: 0x56233fd9b340	localopt
teve colisao
isPrefixUniqueFlw s = 	__(	foreign
colide flw	(	table: 0x56233fd9bcf0	import
teve colisao
isPrefixUniqueFlw s = 	__:	rettypeopt
colide flw	:	table: 0x56233fcf5130	expsuffix
teve colisao
isPrefixUniqueFlw s = 	param	paramlist
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e9	table: 0x56233fce2290	e8
colide flw	NAME	table: 0x56233fd3d1c0	prefixexp
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	e3	table: 0x56233fcf8be0	e2
teve colisao
isPrefixUniqueFlw s = 	__,	paramlist
colide flw	,	table: 0x56233fda80d0	statement
colide flw	,	table: 0x56233fd9fa30	decllist
colide flw	,	table: 0x56233fcee4f0	explist
colide flw	,	table: 0x56233fda1d60	typelist
colide flw	,	table: 0x56233fd07a20	fieldsep
colide flw	,	table: 0x56233fda7800	statement
colide flw	,	table: 0x56233fd1bec0	varlist
teve colisao
isPrefixUniqueFlw s = 	NAME	param
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	NAME	table: 0x56233fd3d1c0	prefixexp
teve colisao
isPrefixUniqueFlw s = 	NAME	decl
colide flw	NAME	table: 0x56233fd9ca20	foreign
colide flw	NAME	table: 0x56233fd9eba0	param
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	NAME	table: 0x56233fd9b930	import
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	NAME	table: 0x56233fcec7f0	field
colide flw	NAME	table: 0x56233fd3d1c0	prefixexp
teve colisao
isPrefixUniqueFlw s = 	__:	decl
colide flw	:	table: 0x56233fda4db0	recordfield
colide flw	:	table: 0x56233fd9ec50	param
colide flw	:	table: 0x56233fcf5130	expsuffix
teve colisao
isPrefixUniqueFlw s = 	decl	decllist
colide flw	decl	table: 0x56233fd9a490	toplevelvar
colide flw	NAME	table: 0x56233fd9b930	import
colide flw	NAME	table: 0x56233fd9ca20	foreign
colide flw	decllist	table: 0x56233fd72d40	statement
teve colisao
isPrefixUniqueFlw s = 	__,	decllist
colide flw	,	table: 0x56233fda80d0	statement
colide flw	,	table: 0x56233fd9e290	paramlist
colide flw	,	table: 0x56233fcee4f0	explist
colide flw	,	table: 0x56233fda1d60	typelist
colide flw	,	table: 0x56233fd07a20	fieldsep
colide flw	,	table: 0x56233fda7800	statement
colide flw	,	table: 0x56233fd1bec0	varlist
teve colisao
isPrefixUniqueFlw s = 	__{	simpletype
colide flw	{	table: 0x56233fd04610	initlist
teve colisao
isPrefixUniqueFlw s = 	__(	typelist
colide flw	(	table: 0x56233fd32440	prefixexp
teve colisao
isPrefixUniqueFlw s = 	type	typelist
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	e12	table: 0x56233fce2810	e11
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	e9	table: 0x56233fce2290	e8
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	NAME	table: 0x56233fd3d1c0	prefixexp
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
teve colisao
isPrefixUniqueFlw s = 	__,	typelist
colide flw	,	table: 0x56233fda80d0	statement
colide flw	,	table: 0x56233fd9fa30	decllist
colide flw	,	table: 0x56233fcee4f0	explist
colide flw	,	table: 0x56233fd9e290	paramlist
colide flw	,	table: 0x56233fd07a20	fieldsep
colide flw	,	table: 0x56233fda7800	statement
colide flw	,	table: 0x56233fd1bec0	varlist
teve colisao
isPrefixUniqueFlw s = 	typelist	rettype
colide flw	typelist	table: 0x56233fda3910	type
teve colisao
isPrefixUniqueFlw s = 	simpletype	rettype
colide flw	simpletype	table: 0x56233fda3e90	type
teve colisao
isPrefixUniqueFlw s = 	typelist	type
colide flw	typelist	table: 0x56233fda28b0	rettype
teve colisao
isPrefixUniqueFlw s = 	simpletype	type
colide flw	simpletype	table: 0x56233fda2e30	rettype
teve colisao
isPrefixUniqueFlw s = 	NAME	recordfield
colide flw	NAME	table: 0x56233fd3d1c0	prefixexp
teve colisao
isPrefixUniqueFlw s = 	__do	statement
colide flw	do	table: 0x56233fda6440	statement
colide flw	do	table: 0x56233fd9a560	statement
teve colisao
isPrefixUniqueFlw s = 	__while	statement
sem colisao
isPrefixUniqueFlw s = 	__repeat	statement
sem colisao
isPrefixUniqueFlw s = 	__if	statement
sem colisao
isPrefixUniqueFlw s = 	__for	statement
sem colisao
isPrefixUniqueFlw s = 	__,	statement
colide flw	,	table: 0x56233fd9fa30	decllist
colide flw	,	table: 0x56233fd9e290	paramlist
colide flw	,	table: 0x56233fcee4f0	explist
colide flw	,	table: 0x56233fda1d60	typelist
colide flw	,	table: 0x56233fd07a20	fieldsep
colide flw	,	table: 0x56233fda7800	statement
colide flw	,	table: 0x56233fd1bec0	varlist
teve colisao
isPrefixUniqueFlw s = 	__local	statement
colide flw	local	table: 0x56233fd9b6a0	import
colide flw	local	table: 0x56233fd9c910	foreign
colide flw	local	table: 0x56233fd9b340	localopt
teve colisao
isPrefixUniqueFlw s = 	varlist	statement
colide flw	funcargs	table: 0x56233fcf5fe0	expsuffix
colide flw	funcargs	table: 0x56233fd32a50	expsuffix
colide flw	expsuffix	table: 0x56233fd1cd60	suffixedexp
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	NAME	table: 0x56233fcec7f0	field
colide flw	decl	table: 0x56233fd9a490	toplevelvar
colide flw	var	table: 0x56233fd1bdb0	varlist
teve colisao
isPrefixUniqueFlw s = 	__elseif	elseifstat
sem colisao
isPrefixUniqueFlw s = 	__else	elseopt
sem colisao
isPrefixUniqueFlw s = 	__return	returnstat
sem colisao
isPrefixUniqueFlw s = 	e2	e1
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	exp	table: 0x56233fda6330	statement
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	exp	table: 0x56233fd07630	field
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	e1	table: 0x56233fcf5450	exp
teve colisao
isPrefixUniqueFlw s = 	__or	e1
sem colisao
isPrefixUniqueFlw s = 	e3	e2
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd07630	field
colide flw	exp	table: 0x56233fda6330	statement
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	exp	table: 0x56233fd0be30	elseifstat
teve colisao
isPrefixUniqueFlw s = 	__and	e2
sem colisao
isPrefixUniqueFlw s = 	e4	e3
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	exp	table: 0x56233fda6330	statement
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	exp	table: 0x56233fd07630	field
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	(	table: 0x56233fda1b40	typelist
teve colisao
isPrefixUniqueFlw s = 	e5	e4
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	exp	table: 0x56233fd07630	field
colide flw	exp	table: 0x56233fda6330	statement
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	var	table: 0x56233fd1bdb0	varlist
teve colisao
isPrefixUniqueFlw s = 	__|	e4
sem colisao
isPrefixUniqueFlw s = 	e6	e5
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	exp	table: 0x56233fda6330	statement
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	exp	table: 0x56233fd07630	field
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	suffixedexp	table: 0x56233fd39420	statement
teve colisao
isPrefixUniqueFlw s = 	__~	e5
sem colisao
isPrefixUniqueFlw s = 	e7	e6
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	exp	table: 0x56233fda6330	statement
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	e6	table: 0x56233fda6db0	e5
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	exp	table: 0x56233fd07630	field
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	var	table: 0x56233fd1bdb0	varlist
teve colisao
isPrefixUniqueFlw s = 	__&	e6
sem colisao
isPrefixUniqueFlw s = 	e8	e7
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	exp	table: 0x56233fda6330	statement
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	e6	table: 0x56233fda6db0	e5
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e7	table: 0x56233fce5210	e6
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	exp	table: 0x56233fd07630	field
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	var	table: 0x56233fd1bdb0	varlist
teve colisao
isPrefixUniqueFlw s = 	e9	e8
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	e8	table: 0x56233fd345e0	e8
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	e6	table: 0x56233fda6db0	e5
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	exp	table: 0x56233fda6330	statement
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	exp	table: 0x56233fd07630	field
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e7	table: 0x56233fce5210	e6
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e8	table: 0x56233fcf8c20	e7
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	suffixedexp	table: 0x56233fd39420	statement
teve colisao
isPrefixUniqueFlw s = 	__..	e8
sem colisao
isPrefixUniqueFlw s = 	e10	e9
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	e8	table: 0x56233fd345e0	e8
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	exp	table: 0x56233fd07630	field
colide flw	exp	table: 0x56233fda6330	statement
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e7	table: 0x56233fce5210	e6
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e6	table: 0x56233fda6db0	e5
colide flw	e8	table: 0x56233fcf8c20	e7
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	field	table: 0x56233fcec000	fieldlist
teve colisao
isPrefixUniqueFlw s = 	e11	e10
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	e10	table: 0x56233fccf630	e9
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	exp	table: 0x56233fda6330	statement
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	exp	table: 0x56233fd07630	field
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	e7	table: 0x56233fce5210	e6
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e6	table: 0x56233fda6db0	e5
colide flw	e8	table: 0x56233fcf8c20	e7
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	e8	table: 0x56233fd345e0	e8
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e4	table: 0x56233fda1d20	e3
teve colisao
isPrefixUniqueFlw s = 	castexp	e12
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	e6	table: 0x56233fda6db0	e5
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	e10	table: 0x56233fccf630	e9
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	exp	table: 0x56233fd07630	field
colide flw	exp	table: 0x56233fda6330	statement
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	e11	table: 0x56233fce45a0	e12
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	e11	table: 0x56233fce2170	e10
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e7	table: 0x56233fce5210	e6
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e8	table: 0x56233fcf8c20	e7
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	e8	table: 0x56233fd345e0	e8
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	{	table: 0x56233fda0ac0	simpletype
teve colisao
isPrefixUniqueFlw s = 	__^	e12
sem colisao
isPrefixUniqueFlw s = 	prefixexp	suffixedexp
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	block	table: 0x56233fda6550	statement
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	simpleexp	table: 0x56233fce0740	castexp
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	block	table: 0x56233fda6bd0	statement
colide flw	varlist	table: 0x56233fd32af0	statement
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	recordfields	table: 0x56233fd9adf0	toplevelrecord
colide flw	block	table: 0x56233fda74e0	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	toplevelvar	table: 0x56233fd981d0	program
colide flw	NAME	table: 0x56233fcec7f0	field
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	block	table: 0x56233fd994b0	statement
colide flw	expsuffix	table: 0x56233fd1cd60	suffixedexp
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	block	table: 0x56233fd999f0	toplevelfunc
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	e8	table: 0x56233fd345e0	e8
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	e10	table: 0x56233fccf630	e9
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	e6	table: 0x56233fda6db0	e5
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	funcargs	table: 0x56233fd32a50	expsuffix
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	funcargs	table: 0x56233fcf5fe0	expsuffix
colide flw	exp	table: 0x56233fd07630	field
colide flw	NAME	table: 0x56233fd9eba0	param
colide flw	exp	table: 0x56233fda6330	statement
colide flw	block	table: 0x56233fd0e6d0	elseifstat
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e11	table: 0x56233fce45a0	e12
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	block	table: 0x56233fce81b0	elseopt
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	e11	table: 0x56233fce2170	e10
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	(	table: 0x56233fd993e0	toplevelfunc
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	e7	table: 0x56233fce5210	e6
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	NAME	table: 0x56233fda4c70	recordfield
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	block	table: 0x56233fda5d50	statement
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e8	table: 0x56233fcf8c20	e7
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	decl	table: 0x56233fd9a490	toplevelvar
colide flw	explist	table: 0x56233fd70140	statement
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	(	table: 0x56233fcfbda0	funcargs
teve colisao
isPrefixUniqueFlw s = 	__:	expsuffix
colide flw	:	table: 0x56233fda4db0	recordfield
colide flw	:	table: 0x56233fd9f250	decl
colide flw	:	table: 0x56233fd9ec50	param
colide flw	:	table: 0x56233fd9db50	rettypeopt
teve colisao
isPrefixUniqueFlw s = 	__[	expsuffix
sem colisao
isPrefixUniqueFlw s = 	__.	expsuffix
sem colisao
isPrefixUniqueFlw s = 	__(	prefixexp
colide flw	(	table: 0x56233fd993e0	toplevelfunc
colide flw	(	table: 0x56233fcfbda0	funcargs
colide flw	(	table: 0x56233fda1b40	typelist
teve colisao
isPrefixUniqueFlw s = 	simpleexp	castexp
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	initlist	table: 0x56233fd03c20	simpleexp
teve colisao
isPrefixUniqueFlw s = 	NAME	var
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	NAME	table: 0x56233fd3d1c0	prefixexp
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	NAME	table: 0x56233fcec7f0	field
teve colisao
isPrefixUniqueFlw s = 	var	varlist
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	varlist	table: 0x56233fd32af0	statement
colide flw	exp	table: 0x56233fd07630	field
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	funcargs	table: 0x56233fcf5fe0	expsuffix
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	funcargs	table: 0x56233fd32a50	expsuffix
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	expsuffix	table: 0x56233fd1cd60	suffixedexp
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	NAME	table: 0x56233fcec7f0	field
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	decl	table: 0x56233fd9a490	toplevelvar
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	e12	table: 0x56233fce2810	e11
teve colisao
isPrefixUniqueFlw s = 	__,	varlist
colide flw	,	table: 0x56233fda80d0	statement
colide flw	,	table: 0x56233fd9fa30	decllist
colide flw	,	table: 0x56233fcee4f0	explist
colide flw	,	table: 0x56233fda1d60	typelist
colide flw	,	table: 0x56233fd07a20	fieldsep
colide flw	,	table: 0x56233fda7800	statement
colide flw	,	table: 0x56233fd9e290	paramlist
teve colisao
isPrefixUniqueFlw s = 	__(	funcargs
colide flw	(	table: 0x56233fd993e0	toplevelfunc
colide flw	(	table: 0x56233fd32440	prefixexp
teve colisao
isPrefixUniqueFlw s = 	exp	explist
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	exp	table: 0x56233fd07630	field
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	e12	table: 0x56233fce2810	e11
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	explist	table: 0x56233fd70140	statement
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	e9	table: 0x56233fce2290	e8
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	(	table: 0x56233fda1b40	typelist
teve colisao
isPrefixUniqueFlw s = 	__,	explist
colide flw	,	table: 0x56233fda80d0	statement
colide flw	,	table: 0x56233fd9fa30	decllist
colide flw	,	table: 0x56233fd9e290	paramlist
colide flw	,	table: 0x56233fda1d60	typelist
colide flw	,	table: 0x56233fd07a20	fieldsep
colide flw	,	table: 0x56233fda7800	statement
colide flw	,	table: 0x56233fd1bec0	varlist
teve colisao
isPrefixUniqueFlw s = 	__{	initlist
colide flw	{	table: 0x56233fda0ac0	simpletype
teve colisao
isPrefixUniqueFlw s = 	field	fieldlist
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	exp	table: 0x56233fd07630	field
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	e12	table: 0x56233fce2810	e11
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	e9	table: 0x56233fce2290	e8
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	NAME	table: 0x56233fda0970	simpletype
teve colisao
isPrefixUniqueFlw s = 	fieldsep	fieldlist
colide flw	,	table: 0x56233fda1d60	typelist
colide flw	,	table: 0x56233fcee4f0	explist
colide flw	,	table: 0x56233fda80d0	statement
colide flw	,	table: 0x56233fd9e290	paramlist
colide flw	statement	table: 0x56233fda5510	block
colide flw	,	table: 0x56233fd9fa30	decllist
colide flw	,	table: 0x56233fd1bec0	varlist
colide flw	;	table: 0x56233fda5af0	statement
colide flw	,	table: 0x56233fda7800	statement
colide flw	;	table: 0x56233fda5000	recordfield
teve colisao
isPrefixUniqueFlw s = 	NAME	field
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	NAME	table: 0x56233fda0970	simpletype
teve colisao
upath 	SKIP
unique var2 	toplevelfunc
unique var 	toplevelrecord
Unique usage	toplevelrecord
unique var2 	import
unique var 	foreign
Unique usage	foreign
unique var 	paramlist
Unique usage	paramlist
unique var 	rettypeopt
Unique usage	rettypeopt
unique var 	block
upath 	record
unique var 	recordfields
Unique usage	recordfields
upath 	(
upath 	(
unique var 	rettype
unique var 	param
unique var 	param
Unique usage	param
unique var 	type
unique var 	recordfield
Unique usage	recordfield
unique var 	type
unique var2 	returnstat
upath 	do
upath 	while
unique var 	exp
unique var 	block
upath 	repeat
unique var 	block
unique var 	exp
upath 	if
unique var 	exp
unique var 	block
unique var 	elseifstats
Unique usage	elseifstats
unique var 	elseopt
Unique usage	elseopt
upath 	for
unique var 	decl
unique var 	exp
unique var 	exp
upath 	,
unique var 	exp
unique var 	block
unique var 	elseifstat
Unique usage	elseifstat
upath 	elseif
unique var 	exp
unique var 	block
upath 	else
unique var 	block
upath 	return
unique var 	explist
upath 	or
unique var 	e2
upath 	and
unique var 	e3
unique var 	e4
upath 	|
unique var 	e5
upath 	~
unique var 	e6
upath 	&
unique var 	e7
unique var 	e8
upath 	..
unique var 	e8
unique var 	e10
unique var 	e11
upath 	^
unique var 	e11
upath 	:
upath 	[
unique var 	exp
upath 	.
unique var 	type
upath 	,
isPrefixUniqueFlw s = 	localopt	toplevelvar
colide flw	toplevelvar	table: 0x56233fd981d0	program
colide flw	statement	table: 0x56233fda5510	block
colide flw	foreign	table: 0x56233fd98500	program
colide flw	import	table: 0x56233fd98410	program
colide flw	toplevelfunc	table: 0x56233fd98090	program
colide flw	rettypeopt	table: 0x56233fd998b0	toplevelfunc
teve colisao
isPrefixUniqueFlw s = 	__local	import
colide flw	local	table: 0x56233fd40fa0	statement
colide flw	local	table: 0x56233fd9b340	localopt
colide flw	local	table: 0x56233fd9c910	foreign
teve colisao
isPrefixUniqueFlw s = 	NAME	decl
colide flw	NAME	table: 0x56233fd9ca20	foreign
colide flw	NAME	table: 0x56233fd9eba0	param
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	NAME	table: 0x56233fd9b930	import
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	NAME	table: 0x56233fcec7f0	field
colide flw	NAME	table: 0x56233fd3d1c0	prefixexp
teve colisao
isPrefixUniqueFlw s = 	__:	decl
colide flw	:	table: 0x56233fda4db0	recordfield
colide flw	:	table: 0x56233fd9ec50	param
colide flw	:	table: 0x56233fcf5130	expsuffix
teve colisao
isPrefixUniqueFlw s = 	decl	decllist
colide flw	decl	table: 0x56233fd9a490	toplevelvar
colide flw	NAME	table: 0x56233fd9b930	import
colide flw	NAME	table: 0x56233fd9ca20	foreign
colide flw	decllist	table: 0x56233fd72d40	statement
teve colisao
isPrefixUniqueFlw s = 	__,	decllist
colide flw	,	table: 0x56233fda80d0	statement
colide flw	,	table: 0x56233fd9e290	paramlist
colide flw	,	table: 0x56233fcee4f0	explist
colide flw	,	table: 0x56233fda1d60	typelist
colide flw	,	table: 0x56233fd07a20	fieldsep
colide flw	,	table: 0x56233fda7800	statement
colide flw	,	table: 0x56233fd1bec0	varlist
teve colisao
isPrefixUniqueFlw s = 	__{	simpletype
colide flw	{	table: 0x56233fd04610	initlist
teve colisao
isPrefixUniqueFlw s = 	__(	typelist
colide flw	(	table: 0x56233fd32440	prefixexp
teve colisao
isPrefixUniqueFlw s = 	type	typelist
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	e12	table: 0x56233fce2810	e11
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	e9	table: 0x56233fce2290	e8
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	NAME	table: 0x56233fd3d1c0	prefixexp
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
teve colisao
isPrefixUniqueFlw s = 	__,	typelist
colide flw	,	table: 0x56233fda80d0	statement
colide flw	,	table: 0x56233fd9fa30	decllist
colide flw	,	table: 0x56233fcee4f0	explist
colide flw	,	table: 0x56233fd9e290	paramlist
colide flw	,	table: 0x56233fd07a20	fieldsep
colide flw	,	table: 0x56233fda7800	statement
colide flw	,	table: 0x56233fd1bec0	varlist
teve colisao
isPrefixUniqueFlw s = 	typelist	rettype
colide flw	typelist	table: 0x56233fda3910	type
teve colisao
isPrefixUniqueFlw s = 	simpletype	rettype
colide flw	simpletype	table: 0x56233fda3e90	type
teve colisao
isPrefixUniqueFlw s = 	typelist	type
colide flw	typelist	table: 0x56233fda28b0	rettype
teve colisao
isPrefixUniqueFlw s = 	simpletype	type
colide flw	simpletype	table: 0x56233fda2e30	rettype
teve colisao
isPrefixUniqueFlw s = 	__do	statement
colide flw	do	table: 0x56233fda6440	statement
colide flw	do	table: 0x56233fd9a560	statement
teve colisao
previousEq	__do
then ; integer ; true ; __empty ; boolean ; false ; repeat ; nil ; do ; string ; } ; float ; ; ; __NUMBER ; __NAME ; ) ; ] ; end ; value ; __STRINGLIT ; else ; 
isPrefixUniqueFlw s = 	__local	statement
colide flw	local	table: 0x56233fd9b6a0	import
colide flw	local	table: 0x56233fd9c910	foreign
colide flw	local	table: 0x56233fd9b340	localopt
teve colisao
isPrefixUniqueFlw s = 	varlist	statement
colide flw	funcargs	table: 0x56233fcf5fe0	expsuffix
colide flw	funcargs	table: 0x56233fd32a50	expsuffix
colide flw	expsuffix	table: 0x56233fd1cd60	suffixedexp
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	NAME	table: 0x56233fcec7f0	field
colide flw	decl	table: 0x56233fd9a490	toplevelvar
colide flw	var	table: 0x56233fd1bdb0	varlist
teve colisao
isPrefixUniqueFlw s = 	e2	e1
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	exp	table: 0x56233fda6330	statement
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	exp	table: 0x56233fd07630	field
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	e1	table: 0x56233fcf5450	exp
teve colisao
isPrefixUniqueFlw s = 	e3	e2
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd07630	field
colide flw	exp	table: 0x56233fda6330	statement
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	exp	table: 0x56233fd0be30	elseifstat
teve colisao
isPrefixUniqueFlw s = 	e4	e3
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	exp	table: 0x56233fda6330	statement
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	exp	table: 0x56233fd07630	field
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	(	table: 0x56233fda1b40	typelist
teve colisao
isPrefixUniqueFlw s = 	e5	e4
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	exp	table: 0x56233fd07630	field
colide flw	exp	table: 0x56233fda6330	statement
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	var	table: 0x56233fd1bdb0	varlist
teve colisao
isPrefixUniqueFlw s = 	e6	e5
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	exp	table: 0x56233fda6330	statement
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	exp	table: 0x56233fd07630	field
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	suffixedexp	table: 0x56233fd39420	statement
teve colisao
isPrefixUniqueFlw s = 	e7	e6
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	exp	table: 0x56233fda6330	statement
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	e6	table: 0x56233fda6db0	e5
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	exp	table: 0x56233fd07630	field
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	var	table: 0x56233fd1bdb0	varlist
teve colisao
isPrefixUniqueFlw s = 	e8	e7
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	exp	table: 0x56233fda6330	statement
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	e6	table: 0x56233fda6db0	e5
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e7	table: 0x56233fce5210	e6
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	exp	table: 0x56233fd07630	field
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	var	table: 0x56233fd1bdb0	varlist
teve colisao
isPrefixUniqueFlw s = 	e9	e8
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	e8	table: 0x56233fd345e0	e8
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	e6	table: 0x56233fda6db0	e5
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	exp	table: 0x56233fda6330	statement
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	exp	table: 0x56233fd07630	field
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e7	table: 0x56233fce5210	e6
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e8	table: 0x56233fcf8c20	e7
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	suffixedexp	table: 0x56233fd39420	statement
teve colisao
isPrefixUniqueFlw s = 	e10	e9
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	e8	table: 0x56233fd345e0	e8
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	exp	table: 0x56233fd07630	field
colide flw	exp	table: 0x56233fda6330	statement
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e7	table: 0x56233fce5210	e6
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e6	table: 0x56233fda6db0	e5
colide flw	e8	table: 0x56233fcf8c20	e7
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	field	table: 0x56233fcec000	fieldlist
teve colisao
isPrefixUniqueFlw s = 	e11	e10
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	e10	table: 0x56233fccf630	e9
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	exp	table: 0x56233fda6330	statement
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	exp	table: 0x56233fd07630	field
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	e7	table: 0x56233fce5210	e6
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e6	table: 0x56233fda6db0	e5
colide flw	e8	table: 0x56233fcf8c20	e7
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	e8	table: 0x56233fd345e0	e8
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e4	table: 0x56233fda1d20	e3
teve colisao
isPrefixUniqueFlw s = 	castexp	e12
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	explist	table: 0x56233fd70140	statement
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	e6	table: 0x56233fda6db0	e5
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	e10	table: 0x56233fccf630	e9
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	exp	table: 0x56233fd07630	field
colide flw	exp	table: 0x56233fda6330	statement
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	e11	table: 0x56233fce45a0	e12
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	e11	table: 0x56233fce2170	e10
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e7	table: 0x56233fce5210	e6
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e8	table: 0x56233fcf8c20	e7
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	e8	table: 0x56233fd345e0	e8
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	{	table: 0x56233fda0ac0	simpletype
teve colisao
isPrefixUniqueFlw s = 	prefixexp	suffixedexp
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	exp	table: 0x56233fd9a450	statement
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	block	table: 0x56233fda6550	statement
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	simpleexp	table: 0x56233fce0740	castexp
colide flw	exp	table: 0x56233fcee600	explist
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	exp	table: 0x56233fda72c0	statement
colide flw	block	table: 0x56233fda6bd0	statement
colide flw	varlist	table: 0x56233fd32af0	statement
colide flw	type	table: 0x56233fda1e70	typelist
colide flw	var	table: 0x56233fd1bfd0	varlist
colide flw	e12	table: 0x56233fce2810	e11
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	decl	table: 0x56233fd9fb40	decllist
colide flw	statement	table: 0x56233fda5510	block
colide flw	exp	table: 0x56233fd0c2e0	expsuffix
colide flw	field	table: 0x56233fd4b370	fieldlist
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	exp	table: 0x56233fda7950	statement
colide flw	recordfields	table: 0x56233fd9adf0	toplevelrecord
colide flw	block	table: 0x56233fda74e0	statement
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	recordfield	table: 0x56233fda47c0	recordfields
colide flw	toplevelvar	table: 0x56233fd981d0	program
colide flw	NAME	table: 0x56233fcec7f0	field
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	block	table: 0x56233fd994b0	statement
colide flw	expsuffix	table: 0x56233fd1cd60	suffixedexp
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	block	table: 0x56233fd999f0	toplevelfunc
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	e8	table: 0x56233fd345e0	e8
colide flw	suffixedexp	table: 0x56233fd39420	statement
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	param	table: 0x56233fd9e3a0	paramlist
colide flw	e10	table: 0x56233fccf630	e9
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	(	table: 0x56233fda1b40	typelist
colide flw	e4	table: 0x56233fda1d20	e3
colide flw	e6	table: 0x56233fda6db0	e5
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	var	table: 0x56233fd1bdb0	varlist
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	funcargs	table: 0x56233fd32a50	expsuffix
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	funcargs	table: 0x56233fcf5fe0	expsuffix
colide flw	exp	table: 0x56233fd07630	field
colide flw	NAME	table: 0x56233fd9eba0	param
colide flw	exp	table: 0x56233fda6330	statement
colide flw	block	table: 0x56233fd0e6d0	elseifstat
colide flw	exp	table: 0x56233fd0be30	elseifstat
colide flw	exp	table: 0x56233fcee3e0	explist
colide flw	e11	table: 0x56233fce45a0	e12
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	block	table: 0x56233fce81b0	elseopt
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	e11	table: 0x56233fce2170	e10
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	e5	table: 0x56233fda51e0	e4
colide flw	(	table: 0x56233fd993e0	toplevelfunc
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	e7	table: 0x56233fce5210	e6
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	NAME	table: 0x56233fda4c70	recordfield
colide flw	e3	table: 0x56233fcf7e20	e2
colide flw	block	table: 0x56233fda5d50	statement
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e8	table: 0x56233fcf8c20	e7
colide flw	e2	table: 0x56233fcf6a70	e1
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	decl	table: 0x56233fd9a490	toplevelvar
colide flw	explist	table: 0x56233fd70140	statement
colide flw	exp	table: 0x56233fda6df0	statement
colide flw	(	table: 0x56233fcfbda0	funcargs
teve colisao
isPrefixUniqueFlw s = 	__:	expsuffix
colide flw	:	table: 0x56233fda4db0	recordfield
colide flw	:	table: 0x56233fd9f250	decl
colide flw	:	table: 0x56233fd9ec50	param
colide flw	:	table: 0x56233fd9db50	rettypeopt
teve colisao
previousEq	__:
__NAME ; ) ; ] ; __STRINGLIT ; } ; 
isPrefixUniqueFlw s = 	__(	prefixexp
colide flw	(	table: 0x56233fd993e0	toplevelfunc
colide flw	(	table: 0x56233fcfbda0	funcargs
colide flw	(	table: 0x56233fda1b40	typelist
teve colisao
isPrefixUniqueFlw s = 	NAME	var
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	NAME	table: 0x56233fd3d1c0	prefixexp
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	NAME	table: 0x56233fcec7f0	field
teve colisao
isPrefixUniqueFlw s = 	var	varlist
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	varlist	table: 0x56233fd32af0	statement
colide flw	exp	table: 0x56233fd07630	field
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	funcargs	table: 0x56233fcf5fe0	expsuffix
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	field	table: 0x56233fcec000	fieldlist
colide flw	funcargs	table: 0x56233fd32a50	expsuffix
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	expsuffix	table: 0x56233fd1cd60	suffixedexp
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	suffixedexp	table: 0x56233fd034e0	var
colide flw	e9	table: 0x56233fce2290	e8
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	NAME	table: 0x56233fcec7f0	field
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	decl	table: 0x56233fd9a490	toplevelvar
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	e12	table: 0x56233fce2810	e11
teve colisao
isPrefixUniqueFlw s = 	__,	varlist
colide flw	,	table: 0x56233fda80d0	statement
colide flw	,	table: 0x56233fd9fa30	decllist
colide flw	,	table: 0x56233fcee4f0	explist
colide flw	,	table: 0x56233fda1d60	typelist
colide flw	,	table: 0x56233fd07a20	fieldsep
colide flw	,	table: 0x56233fda7800	statement
colide flw	,	table: 0x56233fd9e290	paramlist
teve colisao
isPrefixUniqueFlw s = 	__(	funcargs
colide flw	(	table: 0x56233fd993e0	toplevelfunc
colide flw	(	table: 0x56233fd32440	prefixexp
teve colisao
isPrefixUniqueFlw s = 	exp	explist
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	STRINGLIT	table: 0x56233fd9cf70	foreign
colide flw	{	table: 0x56233fda0ac0	simpletype
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	exp	table: 0x56233fd07630	field
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	e12	table: 0x56233fce2810	e11
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	explist	table: 0x56233fcf5060	returnstat
colide flw	exp	table: 0x56233fd32550	prefixexp
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	type	table: 0x56233fda1c50	typelist
colide flw	explist	table: 0x56233fcfbeb0	funcargs
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	explist	table: 0x56233fd322f0	statement
colide flw	NAME	table: 0x56233fda0970	simpletype
colide flw	paramlist	table: 0x56233fd99600	toplevelfunc
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	explist	table: 0x56233fd70140	statement
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	e9	table: 0x56233fce2290	e8
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	STRINGLIT	table: 0x56233fd9be00	import
colide flw	param	table: 0x56233fd9e120	paramlist
colide flw	exp	table: 0x56233fd9a650	toplevelvar
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	exp	table: 0x56233fda75b0	statement
colide flw	(	table: 0x56233fda1b40	typelist
teve colisao
isPrefixUniqueFlw s = 	__,	explist
colide flw	,	table: 0x56233fda80d0	statement
colide flw	,	table: 0x56233fd9fa30	decllist
colide flw	,	table: 0x56233fd9e290	paramlist
colide flw	,	table: 0x56233fda1d60	typelist
colide flw	,	table: 0x56233fd07a20	fieldsep
colide flw	,	table: 0x56233fda7800	statement
colide flw	,	table: 0x56233fd1bec0	varlist
teve colisao
previousEq	__,
) ; __NUMBER ; string ; } ; float ; value ; ] ; __NAME ; integer ; nil ; true ; false ; __STRINGLIT ; boolean ; 
isPrefixUniqueFlw s = 	__{	initlist
colide flw	{	table: 0x56233fda0ac0	simpletype
teve colisao
isPrefixUniqueFlw s = 	field	fieldlist
colide flw	e4	table: 0x56233fd9cf30	e3
colide flw	e7	table: 0x56233fd990f0	e6
colide flw	exp	table: 0x56233fd07630	field
colide flw	e6	table: 0x56233fda5a40	e5
colide flw	e12	table: 0x56233fce2810	e11
colide flw	initlist	table: 0x56233fd03c20	simpleexp
colide flw	e1	table: 0x56233fcf5450	exp
colide flw	e11	table: 0x56233fd41a70	e10
colide flw	e10	table: 0x56233fd3f780	e9
colide flw	castexp	table: 0x56233fcdf6b0	e12
colide flw	prefixexp	table: 0x56233fce5ce0	suffixedexp
colide flw	e2	table: 0x56233fcf64b0	e1
colide flw	suffixedexp	table: 0x56233fd03d70	simpleexp
colide flw	e9	table: 0x56233fce2290	e8
colide flw	e8	table: 0x56233fcd4ef0	e7
colide flw	fieldlist	table: 0x56233fd04720	initlist
colide flw	simpletype	table: 0x56233fda43e0	type
colide flw	type	table: 0x56233fda0fe0	simpletype
colide flw	prefixexp	table: 0x56233fd03ec0	simpleexp
colide flw	e5	table: 0x56233fda4d40	e4
colide flw	e3	table: 0x56233fcf8be0	e2
colide flw	simpleexp	table: 0x56233fd1cb80	castexp
colide flw	NAME	table: 0x56233fda0970	simpletype
teve colisao
isPrefixUniqueFlw s = 	fieldsep	fieldlist
colide flw	,	table: 0x56233fda1d60	typelist
colide flw	,	table: 0x56233fcee4f0	explist
colide flw	,	table: 0x56233fda80d0	statement
colide flw	,	table: 0x56233fd9e290	paramlist
colide flw	statement	table: 0x56233fda5510	block
colide flw	,	table: 0x56233fd9fa30	decllist
colide flw	,	table: 0x56233fd1bec0	varlist
colide flw	;	table: 0x56233fda5af0	statement
colide flw	,	table: 0x56233fda7800	statement
colide flw	;	table: 0x56233fda5000	recordfield
teve colisao
isPrefixUniqueFlw s = 	NAME	field
colide flw	NAME	table: 0x56233fd9f110	decl
colide flw	NAME	table: 0x56233fd45c10	var
colide flw	NAME	table: 0x56233fda0970	simpletype
teve colisao
upath 	SKIP
unique var2 	toplevelfunc
unique var 	toplevelrecord
Unique usage	toplevelrecord
unique var2 	import
unique var 	foreign
Unique usage	foreign
unique var 	paramlist
Unique usage	paramlist
unique var 	rettypeopt
Unique usage	rettypeopt
unique var 	block
upath 	record
unique var 	recordfields
Unique usage	recordfields
upath 	(
upath 	(
unique var 	rettype
unique var 	param
Unique usage	param
unique var 	param
Unique usage	param
unique var 	type
unique var 	recordfield
Unique usage	recordfield
unique var 	type
unique var2 	returnstat
upath 	do
upath 	while
unique var 	exp
unique var 	block
upath 	repeat
unique var 	block
unique var 	exp
upath 	if
unique var 	exp
unique var 	block
unique var 	elseifstats
Unique usage	elseifstats
unique var 	elseopt
Unique usage	elseopt
upath 	for
unique var 	decl
unique var 	exp
unique var 	exp
upath 	,
unique var 	exp
unique var 	block
unique var 	elseifstat
Unique usage	elseifstat
upath 	elseif
unique var 	exp
unique var 	block
upath 	else
unique var 	block
upath 	return
unique var 	explist
upath 	or
unique var 	e2
upath 	and
unique var 	e3
unique var 	e4
upath 	|
unique var 	e5
upath 	~
unique var 	e6
upath 	&
unique var 	e7
unique var 	e8
upath 	..
unique var 	e8
unique var 	e10
unique var 	e11
upath 	^
unique var 	e11
upath 	:
upath 	[
unique var 	exp
upath 	.
unique var 	type
upath 	,
Unique vars: program, toplevelrecord, foreign, rettypeopt, paramlist, param, recordfields, recordfield, elseifstats, elseifstat, elseopt, 
matchUPath: toplevelfunc, toplevelrecord, import, foreign, param, recordfields, recordfield, elseifstat, returnstat, 
Adding labels: Err_1, Err_2, Err_3, Err_4, Err_5, Err_6, Err_7, Err_8, Err_9, Err_10, Err_11, Err_12, Err_13, Err_14, Err_15, Err_16, Err_17, Err_18, Err_19, Err_20, Err_21, Err_22, Err_23, Err_24, Err_25, Err_26, Err_27, Err_28, Err_29, Err_30, Err_31, Err_32, Err_33, Err_34, Err_35, Err_36, Err_37, Err_38, Err_39, Err_40, Err_41, Err_42, Err_43, Err_44, Err_45, Err_46, Err_47, Err_48, Err_49, Err_50, Err_51, Err_52, Err_53, Err_54, Err_55, Err_56, Err_57, 

Property 	nil
program         <-  SKIP (toplevelfunc  /  toplevelvar  /  toplevelrecord  /  import  /  foreign)* !.
toplevelfunc    <-  localopt 'function' NAME^Err_001 '('^Err_002 paramlist ')'^Err_003 rettypeopt block 'end'^Err_004
toplevelvar     <-  localopt decl '=' exp
toplevelrecord  <-  'record' NAME^Err_005 recordfields^Err_006 'end'^Err_007
localopt        <-  'local'?
import          <-  'local' NAME '=' 'import' ('(' STRINGLIT^Err_008 ')'^Err_009  /  STRINGLIT)^Err_010
foreign         <-  'local' NAME^Err_011 '='^Err_012 'foreign'^Err_013 'import'^Err_014 ('(' STRINGLIT^Err_015 ')'^Err_016  /  STRINGLIT)^Err_017
rettypeopt      <-  (':' rettype^Err_018)?
paramlist       <-  (param (',' param^Err_019)*)?
param           <-  NAME ':'^Err_020 type^Err_021
decl            <-  NAME (':' type)?
decllist        <-  decl (',' decl)*
simpletype      <-  'nil'  /  'boolean'  /  'integer'  /  'float'  /  'string'  /  'value'  /  NAME  /  '{' type '}'
typelist        <-  '(' (type (',' type)*)? ')'
rettype         <-  typelist '->' rettype  /  simpletype '->' rettype  /  typelist  /  simpletype
type            <-  typelist '->' rettype  /  simpletype '->' rettype  /  simpletype
recordfields    <-  recordfield+^Err_022
recordfield     <-  NAME ':'^Err_023 type^Err_024 ';'?
block           <-  statement* returnstat?
statement       <-  ';'  /  'do' block 'end'  /  'while' exp^Err_025 'do'^Err_026 block 'end'^Err_027  /  'repeat' block 'until'^Err_028 exp^Err_029  /  'if' exp^Err_030 'then'^Err_031 block elseifstats elseopt 'end'^Err_032  /  'for' decl^Err_033 '='^Err_034 exp^Err_035 ','^Err_036 exp^Err_037 (',' exp^Err_038)? 'do'^Err_039 block 'end'^Err_040  /  'local' decllist '=' explist  /  varlist '=' explist  /  suffixedexp
elseifstats     <-  elseifstat*
elseifstat      <-  'elseif' exp^Err_041 'then'^Err_042 block
elseopt         <-  ('else' block)?
returnstat      <-  'return' explist? ';'?
exp             <-  e1
e1              <-  e2 ('or' e2^Err_043)*
e2              <-  e3 ('and' e3^Err_044)*
e3              <-  e4 (('=='  /  '~='  /  '<='  /  '>='  /  '<'  /  '>') e4^Err_045)*
e4              <-  e5 ('|' e5^Err_046)*
e5              <-  e6 ('~' !'=' e6^Err_047)*
e6              <-  e7 ('&' e7^Err_048)*
e7              <-  e8 (('<<'  /  '>>') e8^Err_049)*
e8              <-  e9 ('..' e8^Err_050)?
e9              <-  e10 (('+'  /  '-') e10^Err_051)*
e10             <-  e11 (('*'  /  '%%'  /  '/'  /  '//') e11^Err_052)*
e11             <-  ('not'  /  '#'  /  '-'  /  '~')* e12
e12             <-  castexp ('^' e11^Err_053)?
suffixedexp     <-  prefixexp expsuffix+
expsuffix       <-  funcargs  /  ':' NAME funcargs  /  '[' exp^Err_054 ']'^Err_055  /  '.' !'.' NAME^Err_056
prefixexp       <-  NAME  /  '(' exp ')'
castexp         <-  simpleexp 'as' type^Err_057  /  simpleexp
simpleexp       <-  'nil'  /  'false'  /  'true'  /  NUMBER  /  STRINGLIT  /  initlist  /  suffixedexp  /  prefixexp
var             <-  suffixedexp  /  NAME !expsuffix
varlist         <-  var (',' var)*
funcargs        <-  '(' explist? ')'  /  initlist  /  STRINGLIT
explist         <-  exp (',' exp)*
initlist        <-  '{' fieldlist? '}'
fieldlist       <-  field (fieldsep field)* fieldsep?
field           <-  (NAME '=')? exp
fieldsep        <-  ';'  /  ','
STRINGLIT       <-  '"' (!'"' .)* '"'  /  "'" (!"'" .)* "'"
RESERVED        <-  ('and'  /  'as'  /  'boolean'  /  'break'  /  'do'  /  'elseif'  /  'else'  /  'end'  /  'float'  /  'foreign'  /  'for'  /  'false'  /  'function'  /  'goto'  /  'if'  /  'import'  /  'integer'  /  'in'  /  'local'  /  'nil'  /  'not'  /  'or'  /  'record'  /  'repeat'  /  'return'  /  'string'  /  'then'  /  'true'  /  'until'  /  'value'  /  'while') ![a-zA-Z_0-9]
NAME            <-  !RESERVED [a-zA-Z_] [a-zA-Z_0-9]*
NUMBER          <-  [0-9]+ ('.' !'.' [0-9]*)?
COMMENT         <-  '--' (!%nl .)*
SPACE           <-  [ 	
]  /  COMMENT
SKIP            <-  ([ 	
]  /  COMMENT)*
Token           <-  '~='  /  '~'  /  '}'  /  '|'  /  '{'  /  STRINGLIT  /  RESERVED  /  NUMBER  /  NAME  /  COMMENT  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '->'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  '#'
EatToken        <-  (Token  /  (!SPACE .)+) SKIP
Err_001         <-  (!'(' EatToken)*
Err_002         <-  (!(NAME  /  ')') EatToken)*
Err_003         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  ':'  /  '(') EatToken)*
Err_004         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_005         <-  (!NAME EatToken)*
Err_006         <-  (!'end' EatToken)*
Err_007         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_008         <-  (!')' EatToken)*
Err_009         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_010         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_011         <-  (!'=' EatToken)*
Err_012         <-  (!'foreign' EatToken)*
Err_013         <-  (!'import' EatToken)*
Err_014         <-  (!(STRINGLIT  /  '(') EatToken)*
Err_015         <-  (!')' EatToken)*
Err_016         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_017         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_018         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_019         <-  (!(','  /  ')') EatToken)*
Err_020         <-  (!('{'  /  'value'  /  'string'  /  'nil'  /  'integer'  /  'float'  /  'boolean'  /  NAME  /  '(') EatToken)*
Err_021         <-  (!(','  /  ')') EatToken)*
Err_022         <-  (!('end'  /  NAME) EatToken)*
Err_023         <-  (!('{'  /  'value'  /  'string'  /  'nil'  /  'integer'  /  'float'  /  'boolean'  /  NAME  /  '(') EatToken)*
Err_024         <-  (!('end'  /  NAME  /  ';') EatToken)*
Err_025         <-  (!'do' EatToken)*
Err_026         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_027         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_028         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_029         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_030         <-  (!'then' EatToken)*
Err_031         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_032         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_033         <-  (!'=' EatToken)*
Err_034         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_035         <-  (!',' EatToken)*
Err_036         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_037         <-  (!('do'  /  ',') EatToken)*
Err_038         <-  (!'do' EatToken)*
Err_039         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_040         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_041         <-  (!'then' EatToken)*
Err_042         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_043         <-  (!('}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ']'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_044         <-  (!('}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_045         <-  (!('~='  /  '}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_046         <-  (!('~='  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_047         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_048         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_049         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_050         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_051         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '..'  /  '-'  /  ','  /  '+'  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_052         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_053         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_054         <-  (!']' EatToken)*
Err_055         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  '{'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'as'  /  'and'  /  STRINGLIT  /  NAME  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '.'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_056         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  '{'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'as'  /  'and'  /  STRINGLIT  /  NAME  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '.'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_057         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  '^'  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*	

Property 	unique
program         <-  SKIP_unique ((toplevelfunc_unique  /  (toplevelvar  /  (toplevelrecord_unique  /  (import_unique  /  foreign_unique)_unique)_unique)_unique)_unique)*_unique !.
toplevelfunc    <-  localopt 'function'_unique NAME_unique^Err_001 '('_unique^Err_002 paramlist_unique ')'_unique^Err_003 rettypeopt_unique block_unique 'end'_unique^Err_004
toplevelvar     <-  localopt decl '=' exp
toplevelrecord  <-  'record'_unique NAME_unique^Err_005 recordfields_unique^Err_006 'end'_unique^Err_007
localopt        <-  'local'?
import          <-  'local' NAME '=' 'import'_unique (('('_unique STRINGLIT_unique^Err_008 ')'_unique^Err_009  /  STRINGLIT_unique)_unique)^Err_010
foreign         <-  'local'_unique NAME_unique^Err_011 '='_unique^Err_012 'foreign'_unique^Err_013 'import'_unique^Err_014 (('('_unique STRINGLIT_unique^Err_015 ')'_unique^Err_016  /  STRINGLIT_unique)_unique)^Err_017
rettypeopt      <-  (':'_unique rettype_unique^Err_018)?_unique
paramlist       <-  (param_unique (','_unique param_unique^Err_019)*_unique)?_unique
param           <-  NAME_unique ':'_unique^Err_020 type_unique^Err_021
decl            <-  NAME (':' type)?
decllist        <-  decl (',' decl)*
simpletype      <-  'nil'  /  'boolean'_unique  /  'integer'_unique  /  'float'_unique  /  'string'_unique  /  'value'_unique  /  NAME  /  '{' type '}'
typelist        <-  '(' (type (',' type)*)? ')'
rettype         <-  typelist '->' rettype  /  simpletype '->' rettype  /  typelist  /  simpletype
type            <-  typelist '->' rettype  /  simpletype '->' rettype  /  simpletype
recordfields    <-  recordfield_unique+_unique^Err_022
recordfield     <-  NAME_unique ':'_unique^Err_023 type_unique^Err_024 ';'_unique?_unique
block           <-  statement* returnstat_unique?
statement       <-  ';'  /  'do' block 'end'  /  'while'_unique exp_unique^Err_025 'do'_unique^Err_026 block_unique 'end'_unique^Err_027  /  'repeat'_unique block_unique 'until'_unique^Err_028 exp_unique^Err_029  /  'if'_unique exp_unique^Err_030 'then'_unique^Err_031 block_unique elseifstats_unique elseopt_unique 'end'_unique^Err_032  /  'for'_unique decl_unique^Err_033 '='_unique^Err_034 exp_unique^Err_035 ','_unique^Err_036 exp_unique^Err_037 (','_unique exp_unique^Err_038)?_unique 'do'_unique^Err_039 block_unique 'end'_unique^Err_040  /  'local' decllist '=' explist  /  varlist '=' explist  /  suffixedexp
elseifstats     <-  elseifstat_unique*_unique
elseifstat      <-  'elseif'_unique exp_unique^Err_041 'then'_unique^Err_042 block_unique
elseopt         <-  ('else'_unique block_unique)?_unique
returnstat      <-  'return'_unique explist_unique?_unique ';'_unique?_unique
exp             <-  e1
e1              <-  e2 ('or'_unique e2_unique^Err_043)*
e2              <-  e3 ('and'_unique e3_unique^Err_044)*
e3              <-  e4 ((('=='_unique  /  ('~='_unique  /  ('<='_unique  /  ('>='_unique  /  ('<'_unique  /  '>'_unique)_unique)_unique)_unique)_unique)_unique) e4_unique^Err_045)*
e4              <-  e5 ('|'_unique e5_unique^Err_046)*
e5              <-  e6 ('~'_unique !'=' e6_unique^Err_047)*
e6              <-  e7 ('&'_unique e7_unique^Err_048)*
e7              <-  e8 ((('<<'_unique  /  '>>'_unique)_unique) e8_unique^Err_049)*
e8              <-  e9 ('..'_unique e8_unique^Err_050)?
e9              <-  e10 ((('+'_unique  /  '-'_unique)_unique) e10_unique^Err_051)*
e10             <-  e11 ((('*'_unique  /  ('%%'_unique  /  ('/'_unique  /  '//'_unique)_unique)_unique)_unique) e11_unique^Err_052)*
e11             <-  (('not'_unique  /  ('#'_unique  /  ('-'_unique  /  '~'_unique)_unique)_unique)_unique)* e12
e12             <-  castexp ('^'_unique e11_unique^Err_053)?
suffixedexp     <-  prefixexp expsuffix+
expsuffix       <-  funcargs  /  ':' NAME funcargs  /  ('['_unique exp_unique^Err_054 ']'_unique^Err_055  /  '.'_unique !'.' NAME_unique^Err_056)_unique
prefixexp       <-  NAME  /  '(' exp ')'
castexp         <-  simpleexp 'as'_unique type_unique^Err_057  /  simpleexp
simpleexp       <-  'nil'  /  'false'_unique  /  'true'_unique  /  NUMBER_unique  /  STRINGLIT  /  initlist  /  suffixedexp  /  prefixexp
var             <-  suffixedexp  /  NAME !expsuffix
varlist         <-  var (',' var)*
funcargs        <-  '(' explist? ')'  /  initlist  /  STRINGLIT_unique
explist         <-  exp (',' exp)*
initlist        <-  '{' fieldlist? '}'
fieldlist       <-  field (fieldsep field)* fieldsep?
field           <-  (NAME '=')? exp
fieldsep        <-  ';'  /  ','
STRINGLIT       <-  '"' (!'"' .)* '"'  /  "'" (!"'" .)* "'"
RESERVED        <-  ('and'  /  'as'  /  'boolean'  /  'break'  /  'do'  /  'elseif'  /  'else'  /  'end'  /  'float'  /  'foreign'  /  'for'  /  'false'  /  'function'  /  'goto'  /  'if'  /  'import'  /  'integer'  /  'in'  /  'local'  /  'nil'  /  'not'  /  'or'  /  'record'  /  'repeat'  /  'return'  /  'string'  /  'then'  /  'true'  /  'until'  /  'value'  /  'while') ![a-zA-Z_0-9]
NAME            <-  !RESERVED [a-zA-Z_] [a-zA-Z_0-9]*
NUMBER          <-  [0-9]+ ('.' !'.' [0-9]*)?
COMMENT         <-  '--' (!%nl .)*
SPACE           <-  [ 	
]  /  COMMENT
SKIP            <-  ([ 	
]  /  COMMENT)*
Token           <-  '~='  /  '~'  /  '}'  /  '|'  /  '{'  /  STRINGLIT  /  RESERVED  /  NUMBER  /  NAME  /  COMMENT  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '->'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  '#'
EatToken        <-  (Token  /  (!SPACE .)+) SKIP
Err_001         <-  (!'(' EatToken)*
Err_002         <-  (!(NAME  /  ')') EatToken)*
Err_003         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  ':'  /  '(') EatToken)*
Err_004         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_005         <-  (!NAME EatToken)*
Err_006         <-  (!'end' EatToken)*
Err_007         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_008         <-  (!')' EatToken)*
Err_009         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_010         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_011         <-  (!'=' EatToken)*
Err_012         <-  (!'foreign' EatToken)*
Err_013         <-  (!'import' EatToken)*
Err_014         <-  (!(STRINGLIT  /  '(') EatToken)*
Err_015         <-  (!')' EatToken)*
Err_016         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_017         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_018         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_019         <-  (!(','  /  ')') EatToken)*
Err_020         <-  (!('{'  /  'value'  /  'string'  /  'nil'  /  'integer'  /  'float'  /  'boolean'  /  NAME  /  '(') EatToken)*
Err_021         <-  (!(','  /  ')') EatToken)*
Err_022         <-  (!('end'  /  NAME) EatToken)*
Err_023         <-  (!('{'  /  'value'  /  'string'  /  'nil'  /  'integer'  /  'float'  /  'boolean'  /  NAME  /  '(') EatToken)*
Err_024         <-  (!('end'  /  NAME  /  ';') EatToken)*
Err_025         <-  (!'do' EatToken)*
Err_026         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_027         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_028         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_029         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_030         <-  (!'then' EatToken)*
Err_031         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_032         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_033         <-  (!'=' EatToken)*
Err_034         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_035         <-  (!',' EatToken)*
Err_036         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_037         <-  (!('do'  /  ',') EatToken)*
Err_038         <-  (!'do' EatToken)*
Err_039         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_040         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_041         <-  (!'then' EatToken)*
Err_042         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_043         <-  (!('}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ']'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_044         <-  (!('}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_045         <-  (!('~='  /  '}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_046         <-  (!('~='  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_047         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_048         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_049         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_050         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_051         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '..'  /  '-'  /  ','  /  '+'  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_052         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_053         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_054         <-  (!']' EatToken)*
Err_055         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  '{'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'as'  /  'and'  /  STRINGLIT  /  NAME  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '.'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_056         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  '{'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'as'  /  'and'  /  STRINGLIT  /  NAME  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '.'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_057         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  '^'  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*	

Property 	uniqueEq
program         <-  SKIP_uniqueEq (toplevelfunc  /  toplevelvar  /  toplevelrecord_uniqueEq  /  import  /  foreign)* !.
toplevelfunc    <-  localopt 'function'_uniqueEq NAME_uniqueEq^Err_001 '('^Err_002 paramlist ')'^Err_003 rettypeopt block 'end'^Err_004
toplevelvar     <-  localopt decl '=' exp
toplevelrecord  <-  'record'_uniqueEq NAME^Err_005 recordfields^Err_006 'end'^Err_007
localopt        <-  'local'?
import          <-  'local' NAME '=' 'import'_uniqueEq ('('_uniqueEq STRINGLIT^Err_008 ')'^Err_009  /  STRINGLIT_uniqueEq)^Err_010
foreign         <-  'local' NAME^Err_011 '='^Err_012 'foreign'_uniqueEq^Err_013 'import'_uniqueEq^Err_014 ('('_uniqueEq STRINGLIT^Err_015 ')'^Err_016  /  STRINGLIT_uniqueEq)^Err_017
rettypeopt      <-  (':' rettype^Err_018)?
paramlist       <-  (param (',' param^Err_019)*)?
param           <-  NAME ':'^Err_020 type^Err_021
decl            <-  NAME (':' type)?
decllist        <-  decl (',' decl)*
simpletype      <-  'nil'  /  'boolean'_uniqueEq  /  'integer'_uniqueEq  /  'float'_uniqueEq  /  'string'_uniqueEq  /  'value'_uniqueEq  /  NAME  /  '{' type '}'
typelist        <-  '(' (type (',' type)*)? ')'
rettype         <-  typelist '->'_uniqueEq rettype  /  simpletype '->'_uniqueEq rettype  /  typelist  /  simpletype
type            <-  typelist '->'_uniqueEq rettype  /  simpletype '->'_uniqueEq rettype  /  simpletype
recordfields    <-  recordfield+^Err_022
recordfield     <-  NAME ':'^Err_023 type^Err_024 ';'?
block           <-  statement* returnstat_uniqueEq?
statement       <-  ';'  /  'do'_uniqueEq block 'end'  /  'while'_uniqueEq exp^Err_025 'do'_uniqueEq^Err_026 block 'end'^Err_027  /  'repeat'_uniqueEq block 'until'_uniqueEq^Err_028 exp^Err_029  /  'if'_uniqueEq exp^Err_030 'then'_uniqueEq^Err_031 block elseifstats elseopt 'end'^Err_032  /  'for'_uniqueEq decl^Err_033 '='^Err_034 exp^Err_035 ','_uniqueEq^Err_036 exp^Err_037 (','_uniqueEq exp^Err_038)? 'do'_uniqueEq^Err_039 block 'end'_uniqueEq^Err_040  /  'local' decllist '=' explist  /  varlist '=' explist  /  suffixedexp
elseifstats     <-  elseifstat_uniqueEq*
elseifstat      <-  'elseif'_uniqueEq exp^Err_041 'then'_uniqueEq^Err_042 block
elseopt         <-  ('else'_uniqueEq block)?
returnstat      <-  'return'_uniqueEq explist? ';'?
exp             <-  e1
e1              <-  e2 ('or'_uniqueEq e2^Err_043)*
e2              <-  e3 ('and'_uniqueEq e3^Err_044)*
e3              <-  e4 (('=='_uniqueEq  /  '~='_uniqueEq  /  '<='_uniqueEq  /  '>='_uniqueEq  /  '<'_uniqueEq  /  '>'_uniqueEq) e4^Err_045)*
e4              <-  e5 ('|'_uniqueEq e5^Err_046)*
e5              <-  e6 ('~'_uniqueEq !'=' e6^Err_047)*
e6              <-  e7 ('&'_uniqueEq e7^Err_048)*
e7              <-  e8 (('<<'_uniqueEq  /  '>>'_uniqueEq) e8^Err_049)*
e8              <-  e9 ('..'_uniqueEq e8^Err_050)?
e9              <-  e10 (('+'_uniqueEq  /  '-'_uniqueEq) e10^Err_051)*
e10             <-  e11 (('*'_uniqueEq  /  '%%'_uniqueEq  /  '/'_uniqueEq  /  '//'_uniqueEq) e11^Err_052)*
e11             <-  ('not'_uniqueEq  /  '#'_uniqueEq  /  '-'_uniqueEq  /  '~'_uniqueEq)* e12
e12             <-  castexp ('^'_uniqueEq e11^Err_053)?
suffixedexp     <-  prefixexp expsuffix+
expsuffix       <-  funcargs  /  ':'_uniqueEq NAME funcargs  /  '['_uniqueEq exp^Err_054 ']'_uniqueEq^Err_055  /  '.'_uniqueEq !'.' NAME_uniqueEq^Err_056
prefixexp       <-  NAME  /  '(' exp ')'
castexp         <-  simpleexp 'as'_uniqueEq type^Err_057  /  simpleexp
simpleexp       <-  'nil'  /  'false'_uniqueEq  /  'true'_uniqueEq  /  NUMBER_uniqueEq  /  STRINGLIT_uniqueEq  /  initlist  /  suffixedexp  /  prefixexp
var             <-  suffixedexp  /  NAME !expsuffix
varlist         <-  var (',' var)*
funcargs        <-  '(' explist? ')'  /  initlist_uniqueEq  /  STRINGLIT_uniqueEq
explist         <-  exp (','_uniqueEq exp)*
initlist        <-  '{' fieldlist? '}'_uniqueEq
fieldlist       <-  field (fieldsep field)* fieldsep?
field           <-  (NAME '=')? exp
fieldsep        <-  ';'  /  ','_uniqueEq
STRINGLIT       <-  '"' (!'"' .)* '"'  /  "'" (!"'" .)* "'"
RESERVED        <-  ('and'  /  'as'  /  'boolean'  /  'break'  /  'do'  /  'elseif'  /  'else'  /  'end'  /  'float'  /  'foreign'  /  'for'  /  'false'  /  'function'  /  'goto'  /  'if'  /  'import'  /  'integer'  /  'in'  /  'local'  /  'nil'  /  'not'  /  'or'  /  'record'  /  'repeat'  /  'return'  /  'string'  /  'then'  /  'true'  /  'until'  /  'value'  /  'while') ![a-zA-Z_0-9]
NAME            <-  !RESERVED [a-zA-Z_] [a-zA-Z_0-9]*
NUMBER          <-  [0-9]+ ('.' !'.' [0-9]*)?
COMMENT         <-  '--' (!%nl .)*
SPACE           <-  [ 	
]  /  COMMENT
SKIP            <-  ([ 	
]  /  COMMENT)*
Token           <-  '~='  /  '~'  /  '}'  /  '|'  /  '{'  /  STRINGLIT  /  RESERVED  /  NUMBER  /  NAME  /  COMMENT  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '->'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  '#'
EatToken        <-  (Token  /  (!SPACE .)+) SKIP
Err_001         <-  (!'(' EatToken)*
Err_002         <-  (!(NAME  /  ')') EatToken)*
Err_003         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  ':'  /  '(') EatToken)*
Err_004         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_005         <-  (!NAME EatToken)*
Err_006         <-  (!'end' EatToken)*
Err_007         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_008         <-  (!')' EatToken)*
Err_009         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_010         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_011         <-  (!'=' EatToken)*
Err_012         <-  (!'foreign' EatToken)*
Err_013         <-  (!'import' EatToken)*
Err_014         <-  (!(STRINGLIT  /  '(') EatToken)*
Err_015         <-  (!')' EatToken)*
Err_016         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_017         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_018         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_019         <-  (!(','  /  ')') EatToken)*
Err_020         <-  (!('{'  /  'value'  /  'string'  /  'nil'  /  'integer'  /  'float'  /  'boolean'  /  NAME  /  '(') EatToken)*
Err_021         <-  (!(','  /  ')') EatToken)*
Err_022         <-  (!('end'  /  NAME) EatToken)*
Err_023         <-  (!('{'  /  'value'  /  'string'  /  'nil'  /  'integer'  /  'float'  /  'boolean'  /  NAME  /  '(') EatToken)*
Err_024         <-  (!('end'  /  NAME  /  ';') EatToken)*
Err_025         <-  (!'do' EatToken)*
Err_026         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_027         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_028         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_029         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_030         <-  (!'then' EatToken)*
Err_031         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_032         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_033         <-  (!'=' EatToken)*
Err_034         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_035         <-  (!',' EatToken)*
Err_036         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_037         <-  (!('do'  /  ',') EatToken)*
Err_038         <-  (!'do' EatToken)*
Err_039         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_040         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_041         <-  (!'then' EatToken)*
Err_042         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_043         <-  (!('}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ']'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_044         <-  (!('}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_045         <-  (!('~='  /  '}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_046         <-  (!('~='  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_047         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_048         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_049         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_050         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_051         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '..'  /  '-'  /  ','  /  '+'  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_052         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_053         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_054         <-  (!']' EatToken)*
Err_055         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  '{'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'as'  /  'and'  /  STRINGLIT  /  NAME  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '.'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_056         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  '{'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'as'  /  'and'  /  STRINGLIT  /  NAME  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '.'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_057         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  '^'  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*	

End UPath

UPath Deep
Uunique
then	 = 	2
end	 = 	6
NUMBER	 = 	1
true	 = 	1
false	 = 	1
and	 = 	1
<<	 = 	1
import	 = 	2
if	 = 	1
STRINGLIT	 = 	6
>	 = 	1
or	 = 	1
as	 = 	1
record	 = 	1
//	 = 	1
;	 = 	4
^	 = 	1
NAME	 = 	13
>=	 = 	1
string	 = 	1
not	 = 	1
]	 = 	1
float	 = 	1
[	 = 	1
%%	 = 	1
return	 = 	1
*	 = 	1
-	 = 	2
+	 = 	1
..	 = 	1
==	 = 	1
else	 = 	1
(	 = 	6
)	 = 	6
&	 = 	1
~	 = 	2
,	 = 	8
while	 = 	1
boolean	 = 	1
<=	 = 	1
for	 = 	1
local	 = 	4
repeat	 = 	1
nil	 = 	2
|	 = 	1
elseif	 = 	1
->	 = 	4
#	 = 	1
~=	 = 	1
>>	 = 	1
do	 = 	3
foreign	 = 	1
<	 = 	1
=	 = 	7
:	 = 	5
{	 = 	2
until	 = 	1
function	 = 	1
.	 = 	1
/	 = 	1
}	 = 	2
SKIP	 = 	1
value	 = 	1
integer	 = 	1
Token 	1	 = 	45
Token 	2	 = 	7
Token 	3	 = 	1
Token 	4	 = 	3
Token 	5	 = 	1
Token 	6	 = 	4
Token 	7	 = 	1
Token 	8	 = 	1
Token 	9	 = 	nil
Token 	10	 = 	nil
Unique tokens (# 44): #, %%, &, *, +, ., .., /, //, <, <<, <=, ==, >, >=, >>, NUMBER, [, ], ^, and, as, boolean, else, elseif, false, float, for, foreign, function, if, integer, not, or, record, repeat, return, string, true, until, value, while, |, ~=
calcTail
program: 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
toplevelfunc: 	end
toplevelvar: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
toplevelrecord: 	end
localopt: 	__empty, local
import: 	), __STRINGLIT
foreign: 	), __STRINGLIT
rettypeopt: 	), __NAME, __empty, boolean, float, integer, nil, string, value, }
paramlist: 	), __NAME, __empty, boolean, float, integer, nil, string, value, }
param: 	), __NAME, boolean, float, integer, nil, string, value, }
decl: 	), __NAME, boolean, float, integer, nil, string, value, }
decllist: 	), __NAME, boolean, float, integer, nil, string, value, }
simpletype: 	__NAME, boolean, float, integer, nil, string, value, }
typelist: 	)
rettype: 	), __NAME, boolean, float, integer, nil, string, value, }
type: 	), __NAME, boolean, float, integer, nil, string, value, }
recordfields: 	), ;, __NAME, boolean, float, integer, nil, string, value, }
recordfield: 	), ;, __NAME, boolean, float, integer, nil, string, value, }
block: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, true, value, }
statement: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
elseifstats: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
elseifstat: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
elseopt: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, else, end, false, float, integer, nil, return, string, true, value, }
returnstat: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, return, string, true, value, }
exp: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e1: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e2: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e3: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e4: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e5: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e6: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e7: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e8: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e9: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e10: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e11: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e12: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
suffixedexp: 	), ], __NAME, __STRINGLIT, }
expsuffix: 	), ], __NAME, __STRINGLIT, }
prefixexp: 	), __NAME
castexp: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
simpleexp: 	), ], __NAME, __NUMBER, __STRINGLIT, false, nil, true, }
var: 	), ], __NAME, __STRINGLIT, }
varlist: 	), ], __NAME, __STRINGLIT, }
funcargs: 	), __STRINGLIT, }
explist: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
initlist: 	}
fieldlist: 	), ,, ;, ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
field: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
fieldsep: 	,, ;
STRINGLIT: 	", '
RESERVED: 	and, as, boolean, break, do, else, elseif, end, false, float, for, foreign, function, goto, if, import, in, integer, local, nil, not, or, record, repeat, return, string, then, true, until, value, while
NAME: 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, _, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z
NUMBER: 	., 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
COMMENT: 	--, __any
SPACE: 		, 
, , , ,  , __COMMENT
SKIP: 		, 
, , , ,  , __COMMENT, __empty
Global Prefix
program: 	
toplevelfunc: 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
toplevelvar: 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
toplevelrecord: 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
localopt: 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
import: 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
foreign: 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
rettypeopt: 	)
paramlist: 	(
param: 	(, ,
decl: 	,, __empty, for, local
decllist: 	local
simpletype: 	(, ,, ->, :, as, {
typelist: 	(, ,, ->, :, as, {
rettype: 	->, :
type: 	(, ,, :, as, {
recordfields: 	__NAME
recordfield: 	), ;, __NAME, boolean, float, integer, nil, string, value, }
block: 	), __NAME, __empty, boolean, do, else, float, integer, nil, repeat, string, then, value, }
statement: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
elseifstats: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
elseifstat: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
elseopt: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
returnstat: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
exp: 	(, ,, ;, =, [, elseif, if, return, until, while, {
e1: 	(, ,, ;, =, [, elseif, if, return, until, while, {
e2: 	(, ,, ;, =, [, elseif, if, or, return, until, while, {
e3: 	(, ,, ;, =, [, and, elseif, if, or, return, until, while, {
e4: 	(, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, ~=
e5: 	(, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, |, ~=
e6: 	(, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
e7: 	&, (, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
e8: 	&, (, ,, .., ;, <, <<, <=, =, ==, >, >=, >>, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
e9: 	&, (, ,, .., ;, <, <<, <=, =, ==, >, >=, >>, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
e10: 	&, (, +, ,, -, .., ;, <, <<, <=, =, ==, >, >=, >>, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
e11: 	%%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, or, return, until, while, {, |, ~, ~=
e12: 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
suffixedexp: 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __NUMBER, __STRINGLIT, __empty, and, boolean, do, else, elseif, end, false, float, if, integer, nil, not, or, repeat, return, string, then, true, until, value, while, {, |, }, ~, ~=
expsuffix: 	), ], __NAME, __STRINGLIT, }
prefixexp: 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __NUMBER, __STRINGLIT, __empty, and, boolean, do, else, elseif, end, false, float, if, integer, nil, not, or, repeat, return, string, then, true, until, value, while, {, |, }, ~, ~=
castexp: 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
simpleexp: 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
var: 	), ,, ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
varlist: 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
funcargs: 	), ], __NAME, __STRINGLIT, }
explist: 	(, =, return
initlist: 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __STRINGLIT, and, elseif, if, not, or, return, until, while, {, |, }, ~, ~=
fieldlist: 	{
field: 	,, ;, {
fieldsep: 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
STRINGLIT: 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __STRINGLIT, and, elseif, if, import, not, or, return, until, while, {, |, }, ~, ~=
RESERVED: 	
NAME: 	#, %%, &, (, ), *, +, ,, -, ->, ., .., /, //, :, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __NUMBER, __STRINGLIT, __empty, and, as, boolean, do, else, elseif, end, false, float, for, function, if, integer, local, nil, not, or, record, repeat, return, string, then, true, until, value, while, {, |, }, ~, ~=
NUMBER: 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
COMMENT: 		, 
, , , ,  , __COMMENT
SPACE: 	
SKIP: 	
calcPrefix
foreign	 -> 
	(foreign, program): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
e1	 -> 
	(e1, exp): 	(, ,, ;, =, [, elseif, if, return, until, while, {
e5	 -> 
	(e5, e4): 	(, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, ~=
	(e5, e4): 	|
typelist	 -> 
	(typelist, rettype): 	->, :
	(typelist, type): 	(, ,, :, as, {
	(typelist, rettype): 	->, :
__foreign	 -> 
	(__foreign, foreign): 	=
decllist	 -> 
	(decllist, statement): 	local
__}	 -> 
	(__}, simpletype): 	), __NAME, boolean, float, integer, nil, string, value, }
	(__}, initlist): 	), ,, ;, ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, {, }
e9	 -> 
	(e9, e8): 	&, (, ,, .., ;, <, <<, <=, =, ==, >, >=, >>, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
__&	 -> 
	(__&, e6): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__nil	 -> 
	(__nil, simpletype): 	(, ,, ->, :, as, {
	(__nil, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
__local	 -> 
	(__local, localopt): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
	(__local, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
	(__local, import): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
	(__local, foreign): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
__,	 -> 
	(__,, paramlist): 	), __NAME, boolean, float, integer, nil, string, value, }
	(__,, typelist): 	), __NAME, boolean, float, integer, nil, string, value, }
	(__,, explist): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__,, decllist): 	), __NAME, boolean, float, integer, nil, string, value, }
	(__,, statement): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__,, varlist): 	), ], __NAME, __STRINGLIT, }
	(__,, statement): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__,, fieldsep): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__:	 -> 
	(__:, rettypeopt): 	)
	(__:, decl): 	__NAME
	(__:, recordfield): 	__NAME
	(__:, param): 	__NAME
	(__:, expsuffix): 	), ], __NAME, __STRINGLIT, }
__boolean	 -> 
	(__boolean, simpletype): 	(, ,, ->, :, as, {
decl	 -> 
	(decl, decllist): 	local
	(decl, decllist): 	,
	(decl, toplevelvar): 	__empty, local
	(decl, statement): 	for
__.	 -> 
	(__., expsuffix): 	), ], __NAME, __STRINGLIT, }
__do	 -> 
	(__do, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
	(__do, statement): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__do, statement): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__(	 -> 
	(__(, funcargs): 	), ], __NAME, __STRINGLIT, }
	(__(, prefixexp): 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __NUMBER, __STRINGLIT, __empty, and, boolean, do, else, elseif, end, false, float, if, integer, nil, not, or, repeat, return, string, then, true, until, value, while, {, |, }, ~, ~=
	(__(, foreign): 	import
	(__(, typelist): 	(, ,, ->, :, as, {
	(__(, toplevelfunc): 	__NAME
	(__(, import): 	import
explist	 -> 
	(explist, returnstat): 	return
	(explist, funcargs): 	(
	(explist, statement): 	=
	(explist, statement): 	=
returnstat	 -> 
	(returnstat, block): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
fieldsep	 -> 
	(fieldsep, fieldlist): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(fieldsep, fieldlist): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e4	 -> 
	(e4, e3): 	(, ,, ;, =, [, and, elseif, if, or, return, until, while, {
	(e4, e3): 	<, <=, ==, >, >=, ~=
__]	 -> 
	(__], expsuffix): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__//	 -> 
	(__//, e10): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
field	 -> 
	(field, fieldlist): 	{
	(field, fieldlist): 	,, ;
type	 -> 
	(type, simpletype): 	{
	(type, decl): 	:
	(type, typelist): 	(
	(type, recordfield): 	:
	(type, param): 	:
	(type, castexp): 	as
	(type, typelist): 	,
fieldlist	 -> 
	(fieldlist, initlist): 	{
toplevelrecord	 -> 
	(toplevelrecord, program): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
suffixedexp	 -> 
	(suffixedexp, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
	(suffixedexp, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
	(suffixedexp, var): 	), ,, ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
__->	 -> 
	(__->, type): 	__NAME, boolean, float, integer, nil, string, value, }
	(__->, rettype): 	__NAME, boolean, float, integer, nil, string, value, }
	(__->, rettype): 	)
	(__->, type): 	)
__as	 -> 
	(__as, castexp): 	), ], __NAME, __NUMBER, __STRINGLIT, false, nil, true, }
var	 -> 
	(var, varlist): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
	(var, varlist): 	,
__repeat	 -> 
	(__repeat, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
__+	 -> 
	(__+, e9): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
program	 -> 
NUMBER	 -> 
	(NUMBER, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
__^	 -> 
	(__^, e12): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__false	 -> 
	(__false, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
varlist	 -> 
	(varlist, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
__value	 -> 
	(__value, simpletype): 	(, ,, ->, :, as, {
__while	 -> 
	(__while, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
simpleexp	 -> 
	(simpleexp, castexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
	(simpleexp, castexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
__[	 -> 
	(__[, expsuffix): 	), ], __NAME, __STRINGLIT, }
funcargs	 -> 
	(funcargs, expsuffix): 	), ], __NAME, __STRINGLIT, }
	(funcargs, expsuffix): 	__NAME
expsuffix	 -> 
	(expsuffix, suffixedexp): 	), ], __NAME, __STRINGLIT, }
e12	 -> 
	(e12, e11): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
toplevelfunc	 -> 
	(toplevelfunc, program): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
SKIP	 -> 
	(SKIP, program): 	
__true	 -> 
	(__true, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
castexp	 -> 
	(castexp, e12): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
e3	 -> 
	(e3, e2): 	(, ,, ;, =, [, elseif, if, or, return, until, while, {
	(e3, e2): 	and
prefixexp	 -> 
	(prefixexp, suffixedexp): 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __NUMBER, __STRINGLIT, __empty, and, boolean, do, else, elseif, end, false, float, if, integer, nil, not, or, repeat, return, string, then, true, until, value, while, {, |, }, ~, ~=
	(prefixexp, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
__*	 -> 
	(__*, e10): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
elseifstat	 -> 
	(elseifstat, elseifstats): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
__not	 -> 
	(__not, e11): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
__/	 -> 
	(__/, e10): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__<	 -> 
	(__<, e3): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__#	 -> 
	(__#, e11): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
e11	 -> 
	(e11, e10): 	%%, *, /, //
	(e11, e12): 	^
	(e11, e10): 	&, (, +, ,, -, .., ;, <, <<, <=, =, ==, >, >=, >>, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
STRINGLIT	 -> 
	(STRINGLIT, foreign): 	import
	(STRINGLIT, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
	(STRINGLIT, import): 	import
	(STRINGLIT, foreign): 	(
	(STRINGLIT, funcargs): 	), ], __NAME, __STRINGLIT, }
	(STRINGLIT, import): 	(
__%%	 -> 
	(__%%, e10): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__if	 -> 
	(__if, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
initlist	 -> 
	(initlist, simpleexp): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
	(initlist, funcargs): 	), ], __NAME, __STRINGLIT, }
e10	 -> 
	(e10, e9): 	&, (, ,, .., ;, <, <<, <=, =, ==, >, >=, >>, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
	(e10, e9): 	+, -
__=	 -> 
	(__=, statement): 	), __NAME, boolean, float, integer, nil, string, value, }
	(__=, foreign): 	__NAME
	(__=, import): 	__NAME
	(__=, field): 	__NAME
	(__=, statement): 	), __NAME, boolean, float, integer, nil, string, value, }
	(__=, toplevelvar): 	), __NAME, boolean, float, integer, nil, string, value, }
	(__=, statement): 	), ], __NAME, __STRINGLIT, }
__..	 -> 
	(__.., e8): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__>>	 -> 
	(__>>, e7): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
NAME	 -> 
	(NAME, expsuffix): 	.
	(NAME, field): 	,, ;, {
	(NAME, recordfield): 	), ;, __NAME, boolean, float, integer, nil, string, value, }
	(NAME, param): 	(, ,
	(NAME, foreign): 	local
	(NAME, simpletype): 	(, ,, ->, :, as, {
	(NAME, toplevelfunc): 	function
	(NAME, prefixexp): 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __NUMBER, __STRINGLIT, __empty, and, boolean, do, else, elseif, end, false, float, if, integer, nil, not, or, repeat, return, string, then, true, until, value, while, {, |, }, ~, ~=
	(NAME, toplevelrecord): 	record
	(NAME, decl): 	,, __empty, for, local
	(NAME, import): 	local
	(NAME, var): 	), ,, ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
	(NAME, expsuffix): 	:
__<<	 -> 
	(__<<, e7): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
e8	 -> 
	(e8, e7): 	&, (, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
	(e8, e7): 	<<, >>
	(e8, e8): 	..
e7	 -> 
	(e7, e6): 	(, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, |, ~, ~=
	(e7, e6): 	&
__function	 -> 
	(__function, toplevelfunc): 	__empty, local
__~	 -> 
	(__~, e5): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__~, e11): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
e6	 -> 
	(e6, e5): 	(, ,, ;, <, <=, =, ==, >, >=, [, and, elseif, if, or, return, until, while, {, |, ~=
	(e6, e5): 	~
paramlist	 -> 
	(paramlist, toplevelfunc): 	(
recordfields	 -> 
	(recordfields, toplevelrecord): 	__NAME
__|	 -> 
	(__|, e4): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
toplevelvar	 -> 
	(toplevelvar, program): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
__;	 -> 
	(__;, fieldsep): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__;, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
	(__;, returnstat): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, return, string, true, value, }
	(__;, recordfield): 	), __NAME, boolean, float, integer, nil, string, value, }
__-	 -> 
	(__-, e9): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__-, e11): 	#, %%, &, (, *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ^, and, elseif, if, not, or, return, until, while, {, |, ~, ~=
recordfield	 -> 
	(recordfield, recordfields): 	), ;, __NAME, boolean, float, integer, nil, string, value, }
__elseif	 -> 
	(__elseif, elseifstat): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
__until	 -> 
	(__until, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, repeat, return, string, true, value, }
__float	 -> 
	(__float, simpletype): 	(, ,, ->, :, as, {
elseopt	 -> 
	(elseopt, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
__~=	 -> 
	(__~=, e3): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__return	 -> 
	(__return, returnstat): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
param	 -> 
	(param, paramlist): 	(
	(param, paramlist): 	,
__<=	 -> 
	(__<=, e3): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__and	 -> 
	(__and, e2): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__then	 -> 
	(__then, statement): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__then, elseifstat): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
exp	 -> 
	(exp, statement): 	until
	(exp, statement): 	if
	(exp, statement): 	,
	(exp, statement): 	=
	(exp, statement): 	while
	(exp, statement): 	,
	(exp, field): 	,, ;, =, {
	(exp, explist): 	,
	(exp, explist): 	(, =, return
	(exp, prefixexp): 	(
	(exp, expsuffix): 	[
	(exp, elseifstat): 	elseif
	(exp, toplevelvar): 	=
rettypeopt	 -> 
	(rettypeopt, toplevelfunc): 	)
e2	 -> 
	(e2, e1): 	(, ,, ;, =, [, elseif, if, return, until, while, {
	(e2, e1): 	or
__>	 -> 
	(__>, e3): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
block	 -> 
	(block, statement): 	do
	(block, statement): 	then
	(block, statement): 	repeat
	(block, elseopt): 	else
	(block, statement): 	do
	(block, elseifstat): 	then
	(block, statement): 	do
	(block, toplevelfunc): 	), __NAME, __empty, boolean, float, integer, nil, string, value, }
__integer	 -> 
	(__integer, simpletype): 	(, ,, ->, :, as, {
__else	 -> 
	(__else, elseopt): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
import	 -> 
	(import, program): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
__import	 -> 
	(__import, import): 	=
	(__import, foreign): 	foreign
__for	 -> 
	(__for, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
simpletype	 -> 
	(simpletype, rettype): 	->, :
	(simpletype, type): 	(, ,, :, as, {
	(simpletype, rettype): 	->, :
	(simpletype, type): 	(, ,, :, as, {
__>=	 -> 
	(__>=, e3): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__string	 -> 
	(__string, simpletype): 	(, ,, ->, :, as, {
__or	 -> 
	(__or, e1): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
elseifstats	 -> 
	(elseifstats, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, then, true, value, }
__record	 -> 
	(__record, toplevelrecord): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
__)	 -> 
	(__), typelist): 	(, ), __NAME, boolean, float, integer, nil, string, value, }
	(__), prefixexp): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__), import): 	__STRINGLIT
	(__), funcargs): 	(, ), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
	(__), toplevelfunc): 	(, ), __NAME, __empty, boolean, float, integer, nil, string, value, }
	(__), foreign): 	__STRINGLIT
rettype	 -> 
	(rettype, rettypeopt): 	:
	(rettype, rettype): 	->
	(rettype, type): 	->
	(rettype, type): 	->
	(rettype, rettype): 	->
localopt	 -> 
	(localopt, toplevelfunc): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
	(localopt, toplevelvar): 	), ], __NAME, __NUMBER, __SKIP, __STRINGLIT, boolean, end, false, float, integer, nil, string, true, value, }
__{	 -> 
	(__{, simpletype): 	(, ,, ->, :, as, {
	(__{, initlist): 	#, %%, &, (, ), *, +, ,, -, .., /, //, ;, <, <<, <=, =, ==, >, >=, >>, [, ], ^, __NAME, __STRINGLIT, and, elseif, if, not, or, return, until, while, {, |, }, ~, ~=
__==	 -> 
	(__==, e3): 	), ], __NAME, __NUMBER, __STRINGLIT, boolean, false, float, integer, nil, string, true, value, }
__end	 -> 
	(__end, toplevelrecord): 	), ;, __NAME, boolean, float, integer, nil, string, value, }
	(__end, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, end, false, float, integer, nil, return, string, true, value, }
	(__end, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, end, false, float, integer, nil, return, string, true, value, }
	(__end, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, else, end, false, float, integer, nil, return, string, then, true, value, }
	(__end, statement): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, end, false, float, integer, nil, return, string, true, value, }
	(__end, toplevelfunc): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, end, false, float, integer, nil, return, string, true, value, }
statement	 -> 
	(statement, block): 	), ;, ], __NAME, __NUMBER, __STRINGLIT, __empty, boolean, do, else, end, false, float, integer, nil, repeat, string, then, true, value, }
isPrefixUniqueFlw s = 	SKIP	program
sem colisao
isPrefixUniqueFlw s = 	localopt	toplevelfunc
colide flw	foreign	table: 0x56233fef2de0	program
colide flw	toplevelvar	table: 0x56233fe95210	program
colide flw	toplevelfunc	table: 0x56233fe95070	program
colide flw	import	table: 0x56233fe9e780	program
teve colisao
isPrefixUniqueFlw s = 	localopt	toplevelvar
colide flw	foreign	table: 0x56233fef2de0	program
colide flw	toplevelvar	table: 0x56233fe95210	program
colide flw	toplevelfunc	table: 0x56233fe95070	program
colide flw	import	table: 0x56233fe9e780	program
colide flw	rettypeopt	table: 0x56233fe37880	toplevelfunc
colide flw	statement	table: 0x56233fe81f40	block
teve colisao
isPrefixUniqueFlw s = 	__record	toplevelrecord
sem colisao
isPrefixUniqueFlw s = 	__local	import
colide flw	local	table: 0x56233fd5de60	localopt
colide flw	local	table: 0x56233ff10820	statement
colide flw	local	table: 0x56233fe4ee10	foreign
teve colisao
isPrefixUniqueFlw s = 	__(	import
colide flw	(	table: 0x56233fe4f3f0	foreign
teve colisao
isPrefixUniqueFlw s = 	__local	foreign
colide flw	local	table: 0x56233fd5de60	localopt
colide flw	local	table: 0x56233ff10820	statement
colide flw	local	table: 0x56233fd5e2a0	import
teve colisao
isPrefixUniqueFlw s = 	__(	foreign
colide flw	(	table: 0x56233fd5e8f0	import
teve colisao
isPrefixUniqueFlw s = 	__:	rettypeopt
colide flw	:	table: 0x56233fdbd650	expsuffix
teve colisao
isPrefixUniqueFlw s = 	param	paramlist
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	exp	table: 0x56233fea0410	explist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	e3	table: 0x56233fdac880	e2
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	e2	table: 0x56233fdac100	e1
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	NAME	table: 0x56233ff85090	prefixexp
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	e5	table: 0x56233ff512e0	e4
teve colisao
isPrefixUniqueFlw s = 	__,	paramlist
colide flw	,	table: 0x56233fd2fe00	typelist
colide flw	,	table: 0x56233fea0520	explist
colide flw	,	table: 0x56233fe09900	decllist
colide flw	,	table: 0x56233ffae350	statement
colide flw	,	table: 0x56233ff8dd90	varlist
colide flw	,	table: 0x56233ffae130	statement
colide flw	,	table: 0x56233fe3b3d0	fieldsep
teve colisao
isPrefixUniqueFlw s = 	NAME	param
colide flw	NAME	table: 0x56233ff85090	prefixexp
colide flw	NAME	table: 0x56233fe09010	decl
teve colisao
isPrefixUniqueFlw s = 	NAME	decl
colide flw	NAME	table: 0x56233ff85090	prefixexp
colide flw	NAME	table: 0x56233ffaece0	field
colide flw	NAME	table: 0x56233fde8490	param
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	NAME	table: 0x56233fd5e530	import
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	NAME	table: 0x56233fe4ef20	foreign
teve colisao
isPrefixUniqueFlw s = 	__:	decl
colide flw	:	table: 0x56233fdbd650	expsuffix
colide flw	:	table: 0x56233fe81770	recordfield
colide flw	:	table: 0x56233fde8540	param
teve colisao
isPrefixUniqueFlw s = 	decl	decllist
colide flw	decl	table: 0x56233fecd8f0	toplevelvar
colide flw	NAME	table: 0x56233fe4ef20	foreign
colide flw	decllist	table: 0x56233ff10930	statement
colide flw	NAME	table: 0x56233fd5e530	import
teve colisao
isPrefixUniqueFlw s = 	__,	decllist
colide flw	,	table: 0x56233fde7b80	paramlist
colide flw	,	table: 0x56233fd2fe00	typelist
colide flw	,	table: 0x56233fea0520	explist
colide flw	,	table: 0x56233ffae350	statement
colide flw	,	table: 0x56233ff8dd90	varlist
colide flw	,	table: 0x56233ffae130	statement
colide flw	,	table: 0x56233fe3b3d0	fieldsep
teve colisao
isPrefixUniqueFlw s = 	__{	simpletype
colide flw	{	table: 0x56233fea0bc0	initlist
teve colisao
isPrefixUniqueFlw s = 	__(	typelist
colide flw	(	table: 0x56233ff851e0	prefixexp
teve colisao
isPrefixUniqueFlw s = 	type	typelist
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	NAME	table: 0x56233ff85090	prefixexp
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e2	table: 0x56233fdac100	e1
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e3	table: 0x56233fdac880	e2
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	exp	table: 0x56233fea0410	explist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
teve colisao
isPrefixUniqueFlw s = 	__,	typelist
colide flw	,	table: 0x56233fde7b80	paramlist
colide flw	,	table: 0x56233fea0520	explist
colide flw	,	table: 0x56233fe09900	decllist
colide flw	,	table: 0x56233ffae350	statement
colide flw	,	table: 0x56233ff8dd90	varlist
colide flw	,	table: 0x56233ffae130	statement
colide flw	,	table: 0x56233fe3b3d0	fieldsep
teve colisao
isPrefixUniqueFlw s = 	typelist	rettype
colide flw	typelist	table: 0x56233fe4b240	type
teve colisao
isPrefixUniqueFlw s = 	simpletype	rettype
colide flw	simpletype	table: 0x56233fe4b7c0	type
teve colisao
isPrefixUniqueFlw s = 	typelist	type
colide flw	typelist	table: 0x56233fd30950	rettype
teve colisao
isPrefixUniqueFlw s = 	simpletype	type
colide flw	simpletype	table: 0x56233fe4a760	rettype
teve colisao
isPrefixUniqueFlw s = 	NAME	recordfield
colide flw	NAME	table: 0x56233ff85090	prefixexp
teve colisao
isPrefixUniqueFlw s = 	__do	statement
colide flw	do	table: 0x56233ff70c10	statement
colide flw	do	table: 0x56233ffae7d0	statement
teve colisao
isPrefixUniqueFlw s = 	__while	statement
sem colisao
isPrefixUniqueFlw s = 	__repeat	statement
sem colisao
isPrefixUniqueFlw s = 	__if	statement
sem colisao
isPrefixUniqueFlw s = 	__for	statement
sem colisao
isPrefixUniqueFlw s = 	__,	statement
colide flw	,	table: 0x56233fde7b80	paramlist
colide flw	,	table: 0x56233fd2fe00	typelist
colide flw	,	table: 0x56233fea0520	explist
colide flw	,	table: 0x56233fe09900	decllist
colide flw	,	table: 0x56233ff8dd90	varlist
colide flw	,	table: 0x56233ffae130	statement
colide flw	,	table: 0x56233fe3b3d0	fieldsep
teve colisao
isPrefixUniqueFlw s = 	__local	statement
colide flw	local	table: 0x56233fd5de60	localopt
colide flw	local	table: 0x56233fd5e2a0	import
colide flw	local	table: 0x56233fe4ee10	foreign
teve colisao
isPrefixUniqueFlw s = 	varlist	statement
colide flw	NAME	table: 0x56233ffaece0	field
colide flw	funcargs	table: 0x56233fdbd870	expsuffix
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	funcargs	table: 0x56233fdbd4d0	expsuffix
colide flw	decl	table: 0x56233fecd8f0	toplevelvar
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	expsuffix	table: 0x56233fdbd130	suffixedexp
teve colisao
isPrefixUniqueFlw s = 	__elseif	elseifstat
sem colisao
isPrefixUniqueFlw s = 	__else	elseopt
sem colisao
isPrefixUniqueFlw s = 	__return	returnstat
sem colisao
isPrefixUniqueFlw s = 	e2	e1
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	exp	table: 0x56233fea0630	explist
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	exp	table: 0x56233fd10760	statement
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	recordfield	table: 0x56233fe81180	recordfields
teve colisao
isPrefixUniqueFlw s = 	__or	e1
sem colisao
isPrefixUniqueFlw s = 	e3	e2
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	exp	table: 0x56233fea0630	explist
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	e2	table: 0x56233fdac100	e1
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	exp	table: 0x56233fd10760	statement
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	exp	table: 0x56233fd10c30	statement
teve colisao
isPrefixUniqueFlw s = 	__and	e2
sem colisao
isPrefixUniqueFlw s = 	e4	e3
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	exp	table: 0x56233fea0630	explist
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	exp	table: 0x56233fd10760	statement
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	e2	table: 0x56233fdac100	e1
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	statement	table: 0x56233fe81f40	block
teve colisao
isPrefixUniqueFlw s = 	e5	e4
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	exp	table: 0x56233fea0630	explist
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	e2	table: 0x56233fdac100	e1
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	exp	table: 0x56233fd10760	statement
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
teve colisao
isPrefixUniqueFlw s = 	__|	e4
sem colisao
isPrefixUniqueFlw s = 	e6	e5
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	exp	table: 0x56233fd10760	statement
colide flw	exp	table: 0x56233fea0630	explist
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	e2	table: 0x56233fdac100	e1
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	e5	table: 0x56233ff51530	e4
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
teve colisao
isPrefixUniqueFlw s = 	__~	e5
sem colisao
isPrefixUniqueFlw s = 	e7	e6
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	e6	table: 0x56233ff51ec0	e5
colide flw	exp	table: 0x56233fd10760	statement
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	e2	table: 0x56233fdac320	e1
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	exp	table: 0x56233fea0630	explist
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	e2	table: 0x56233fdac100	e1
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	e5	table: 0x56233ff51530	e4
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
teve colisao
isPrefixUniqueFlw s = 	__&	e6
sem colisao
isPrefixUniqueFlw s = 	e8	e7
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	e7	table: 0x56233fe4c610	e6
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	e6	table: 0x56233ff51ec0	e5
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	exp	table: 0x56233fea0630	explist
colide flw	e5	table: 0x56233ff51530	e4
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	exp	table: 0x56233fd10760	statement
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	e2	table: 0x56233fdac100	e1
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	statement	table: 0x56233fe81f40	block
teve colisao
isPrefixUniqueFlw s = 	e9	e8
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	e8	table: 0x56233fe4d0f0	e7
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	e7	table: 0x56233fe4c610	e6
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	e6	table: 0x56233ff51ec0	e5
colide flw	e2	table: 0x56233fdac100	e1
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	exp	table: 0x56233fd10760	statement
colide flw	exp	table: 0x56233fea0630	explist
colide flw	e8	table: 0x56233fe4d8a0	e8
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	e5	table: 0x56233ff51530	e4
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	recordfield	table: 0x56233fe81180	recordfields
teve colisao
isPrefixUniqueFlw s = 	__..	e8
sem colisao
isPrefixUniqueFlw s = 	e10	e9
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	e8	table: 0x56233fe4d0f0	e7
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	e7	table: 0x56233fe4c610	e6
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e6	table: 0x56233ff51ec0	e5
colide flw	e2	table: 0x56233fdac100	e1
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	e5	table: 0x56233ff51530	e4
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	exp	table: 0x56233fd10760	statement
colide flw	exp	table: 0x56233fea0630	explist
colide flw	e8	table: 0x56233fe4d8a0	e8
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	explist	table: 0x56233ff10b50	statement
teve colisao
isPrefixUniqueFlw s = 	e11	e10
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	e8	table: 0x56233fe4d0f0	e7
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	e7	table: 0x56233fe4c610	e6
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	e6	table: 0x56233ff51ec0	e5
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	e10	table: 0x56233fe6f550	e9
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	exp	table: 0x56233fd10760	statement
colide flw	exp	table: 0x56233fea0630	explist
colide flw	e2	table: 0x56233fdac100	e1
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	e8	table: 0x56233fe4d8a0	e8
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	e5	table: 0x56233ff51530	e4
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
teve colisao
isPrefixUniqueFlw s = 	castexp	e12
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	e8	table: 0x56233fe4d0f0	e7
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	e7	table: 0x56233fe4c610	e6
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	e6	table: 0x56233ff51ec0	e5
colide flw	e10	table: 0x56233fe6f550	e9
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	e11	table: 0x56233fdbcac0	e12
colide flw	e5	table: 0x56233ff51530	e4
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	exp	table: 0x56233fea0630	explist
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	exp	table: 0x56233fd10760	statement
colide flw	e2	table: 0x56233fdac100	e1
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	e11	table: 0x56233ff40d50	e10
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	e8	table: 0x56233fe4d8a0	e8
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	field	table: 0x56233fea12b0	fieldlist
teve colisao
isPrefixUniqueFlw s = 	__^	e12
sem colisao
isPrefixUniqueFlw s = 	prefixexp	suffixedexp
colide flw	NAME	table: 0x56233fe81630	recordfield
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	block	table: 0x56233ff70520	statement
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	block	table: 0x56233fe37990	toplevelfunc
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	block	table: 0x56233ff713a0	statement
colide flw	(	table: 0x56233fe373b0	toplevelfunc
colide flw	NAME	table: 0x56233ffaece0	field
colide flw	block	table: 0x56233fe49270	elseifstat
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	e7	table: 0x56233fe4c610	e6
colide flw	block	table: 0x56233fd10e50	statement
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	block	table: 0x56233ffaf0f0	statement
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	expsuffix	table: 0x56233fdbd130	suffixedexp
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	e11	table: 0x56233fdbcac0	e12
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	recordfields	table: 0x56233fece2d0	toplevelrecord
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	e8	table: 0x56233fe4d0f0	e7
colide flw	e2	table: 0x56233fdac320	e1
colide flw	block	table: 0x56233fe49810	elseopt
colide flw	e6	table: 0x56233ff51ec0	e5
colide flw	e5	table: 0x56233ff51530	e4
colide flw	decl	table: 0x56233fecd8f0	toplevelvar
colide flw	e10	table: 0x56233fe6f550	e9
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	exp	table: 0x56233fd10760	statement
colide flw	(	table: 0x56233ff8e430	funcargs
colide flw	block	table: 0x56233ff70d20	statement
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff858d0	castexp
colide flw	e8	table: 0x56233fe4d8a0	e8
colide flw	toplevelvar	table: 0x56233fe95210	program
colide flw	explist	table: 0x56233ff11180	statement
colide flw	funcargs	table: 0x56233fdbd4d0	expsuffix
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	varlist	table: 0x56233ff10f60	statement
colide flw	e2	table: 0x56233fdac100	e1
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	exp	table: 0x56233fea0630	explist
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	e11	table: 0x56233ff40d50	e10
colide flw	funcargs	table: 0x56233fdbd870	expsuffix
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	NAME	table: 0x56233fde8490	param
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	explist	table: 0x56233fe49db0	returnstat
teve colisao
isPrefixUniqueFlw s = 	__:	expsuffix
colide flw	:	table: 0x56233fde7530	rettypeopt
colide flw	:	table: 0x56233fe81770	recordfield
colide flw	:	table: 0x56233fe09150	decl
colide flw	:	table: 0x56233fde8540	param
teve colisao
isPrefixUniqueFlw s = 	__[	expsuffix
sem colisao
isPrefixUniqueFlw s = 	__.	expsuffix
sem colisao
isPrefixUniqueFlw s = 	__(	prefixexp
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	(	table: 0x56233ff8e430	funcargs
colide flw	(	table: 0x56233fe373b0	toplevelfunc
teve colisao
isPrefixUniqueFlw s = 	simpleexp	castexp
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
teve colisao
isPrefixUniqueFlw s = 	NAME	var
colide flw	NAME	table: 0x56233ff85090	prefixexp
colide flw	NAME	table: 0x56233ffaece0	field
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	NAME	table: 0x56233fe09010	decl
teve colisao
isPrefixUniqueFlw s = 	var	varlist
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	NAME	table: 0x56233ffaece0	field
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	funcargs	table: 0x56233fdbd870	expsuffix
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	funcargs	table: 0x56233fdbd4d0	expsuffix
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	decl	table: 0x56233fecd8f0	toplevelvar
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e2	table: 0x56233fdac100	e1
colide flw	expsuffix	table: 0x56233fdbd130	suffixedexp
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	varlist	table: 0x56233ff10f60	statement
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	e3	table: 0x56233fdac880	e2
teve colisao
isPrefixUniqueFlw s = 	__,	varlist
colide flw	,	table: 0x56233fde7b80	paramlist
colide flw	,	table: 0x56233fd2fe00	typelist
colide flw	,	table: 0x56233fea0520	explist
colide flw	,	table: 0x56233fe09900	decllist
colide flw	,	table: 0x56233ffae350	statement
colide flw	,	table: 0x56233ffae130	statement
colide flw	,	table: 0x56233fe3b3d0	fieldsep
teve colisao
isPrefixUniqueFlw s = 	__(	funcargs
colide flw	(	table: 0x56233ff851e0	prefixexp
colide flw	(	table: 0x56233fe373b0	toplevelfunc
teve colisao
isPrefixUniqueFlw s = 	exp	explist
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	exp	table: 0x56233fe3af30	field
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e2	table: 0x56233fdac100	e1
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	e3	table: 0x56233fdac880	e2
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	simpletype	table: 0x56233fe80dd0	type
teve colisao
isPrefixUniqueFlw s = 	__,	explist
colide flw	,	table: 0x56233fde7b80	paramlist
colide flw	,	table: 0x56233fd2fe00	typelist
colide flw	,	table: 0x56233fe09900	decllist
colide flw	,	table: 0x56233ffae350	statement
colide flw	,	table: 0x56233ff8dd90	varlist
colide flw	,	table: 0x56233ffae130	statement
colide flw	,	table: 0x56233fe3b3d0	fieldsep
teve colisao
isPrefixUniqueFlw s = 	__{	initlist
colide flw	{	table: 0x56233ff96560	simpletype
teve colisao
isPrefixUniqueFlw s = 	field	fieldlist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233fe3af30	field
colide flw	e2	table: 0x56233fdac100	e1
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	e3	table: 0x56233fdac880	e2
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e7	table: 0x56233fe4c3f0	e6
teve colisao
isPrefixUniqueFlw s = 	fieldsep	fieldlist
colide flw	,	table: 0x56233ff8dd90	varlist
colide flw	,	table: 0x56233fea0520	explist
colide flw	,	table: 0x56233ffae350	statement
colide flw	,	table: 0x56233fd2fe00	typelist
colide flw	;	table: 0x56233fe819e0	recordfield
colide flw	;	table: 0x56233ff70270	statement
colide flw	,	table: 0x56233fde7b80	paramlist
colide flw	,	table: 0x56233ffae130	statement
colide flw	,	table: 0x56233fe09900	decllist
colide flw	statement	table: 0x56233fe81f40	block
teve colisao
isPrefixUniqueFlw s = 	NAME	field
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	NAME	table: 0x56233fe09010	decl
teve colisao
upath 	SKIP
unique var2 	toplevelfunc
unique var 	toplevelrecord
Unique usage	toplevelrecord
unique var2 	import
unique var 	foreign
Unique usage	foreign
unique var 	paramlist
Unique usage	paramlist
unique var 	rettypeopt
Unique usage	rettypeopt
unique var 	block
upath 	record
unique var 	recordfields
Unique usage	recordfields
upath 	(
upath 	(
unique var 	rettype
unique var 	param
unique var 	param
Unique usage	param
unique var 	type
unique var 	recordfield
Unique usage	recordfield
unique var 	type
unique var2 	returnstat
upath 	do
upath 	while
unique var 	exp
unique var 	block
upath 	repeat
unique var 	block
unique var 	exp
upath 	if
unique var 	exp
unique var 	block
unique var 	elseifstats
Unique usage	elseifstats
unique var 	elseopt
Unique usage	elseopt
upath 	for
unique var 	decl
unique var 	exp
unique var 	exp
upath 	,
unique var 	exp
unique var 	block
unique var 	elseifstat
Unique usage	elseifstat
upath 	elseif
unique var 	exp
unique var 	block
upath 	else
unique var 	block
upath 	return
unique var 	explist
upath 	or
unique var 	e2
upath 	and
unique var 	e3
unique var 	e4
upath 	|
unique var 	e5
upath 	~
unique var 	e6
upath 	&
unique var 	e7
unique var 	e8
upath 	..
unique var 	e8
unique var 	e10
unique var 	e11
upath 	^
unique var 	e11
upath 	:
upath 	[
unique var 	exp
upath 	.
unique var 	type
upath 	,
isPrefixUniqueFlw s = 	localopt	toplevelvar
colide flw	foreign	table: 0x56233fef2de0	program
colide flw	toplevelvar	table: 0x56233fe95210	program
colide flw	toplevelfunc	table: 0x56233fe95070	program
colide flw	import	table: 0x56233fe9e780	program
colide flw	rettypeopt	table: 0x56233fe37880	toplevelfunc
colide flw	statement	table: 0x56233fe81f40	block
teve colisao
isPrefixUniqueFlw s = 	__local	import
colide flw	local	table: 0x56233fd5de60	localopt
colide flw	local	table: 0x56233ff10820	statement
colide flw	local	table: 0x56233fe4ee10	foreign
teve colisao
isPrefixUniqueFlw s = 	NAME	decl
colide flw	NAME	table: 0x56233ff85090	prefixexp
colide flw	NAME	table: 0x56233ffaece0	field
colide flw	NAME	table: 0x56233fde8490	param
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	NAME	table: 0x56233fd5e530	import
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	NAME	table: 0x56233fe4ef20	foreign
teve colisao
isPrefixUniqueFlw s = 	__:	decl
colide flw	:	table: 0x56233fdbd650	expsuffix
colide flw	:	table: 0x56233fe81770	recordfield
colide flw	:	table: 0x56233fde8540	param
teve colisao
isPrefixUniqueFlw s = 	decl	decllist
colide flw	decl	table: 0x56233fecd8f0	toplevelvar
colide flw	NAME	table: 0x56233fe4ef20	foreign
colide flw	decllist	table: 0x56233ff10930	statement
colide flw	NAME	table: 0x56233fd5e530	import
teve colisao
isPrefixUniqueFlw s = 	__,	decllist
colide flw	,	table: 0x56233fde7b80	paramlist
colide flw	,	table: 0x56233fd2fe00	typelist
colide flw	,	table: 0x56233fea0520	explist
colide flw	,	table: 0x56233ffae350	statement
colide flw	,	table: 0x56233ff8dd90	varlist
colide flw	,	table: 0x56233ffae130	statement
colide flw	,	table: 0x56233fe3b3d0	fieldsep
teve colisao
isPrefixUniqueFlw s = 	__{	simpletype
colide flw	{	table: 0x56233fea0bc0	initlist
teve colisao
isPrefixUniqueFlw s = 	__(	typelist
colide flw	(	table: 0x56233ff851e0	prefixexp
teve colisao
isPrefixUniqueFlw s = 	type	typelist
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	NAME	table: 0x56233ff85090	prefixexp
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e2	table: 0x56233fdac100	e1
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e3	table: 0x56233fdac880	e2
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	exp	table: 0x56233fea0410	explist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
teve colisao
isPrefixUniqueFlw s = 	__,	typelist
colide flw	,	table: 0x56233fde7b80	paramlist
colide flw	,	table: 0x56233fea0520	explist
colide flw	,	table: 0x56233fe09900	decllist
colide flw	,	table: 0x56233ffae350	statement
colide flw	,	table: 0x56233ff8dd90	varlist
colide flw	,	table: 0x56233ffae130	statement
colide flw	,	table: 0x56233fe3b3d0	fieldsep
teve colisao
isPrefixUniqueFlw s = 	typelist	rettype
colide flw	typelist	table: 0x56233fe4b240	type
teve colisao
isPrefixUniqueFlw s = 	simpletype	rettype
colide flw	simpletype	table: 0x56233fe4b7c0	type
teve colisao
isPrefixUniqueFlw s = 	typelist	type
colide flw	typelist	table: 0x56233fd30950	rettype
teve colisao
isPrefixUniqueFlw s = 	simpletype	type
colide flw	simpletype	table: 0x56233fe4a760	rettype
teve colisao
isPrefixUniqueFlw s = 	__do	statement
colide flw	do	table: 0x56233ff70c10	statement
colide flw	do	table: 0x56233ffae7d0	statement
teve colisao
previousEq	__do
then ; integer ; true ; __empty ; boolean ; false ; repeat ; nil ; do ; string ; } ; float ; ; ; __NUMBER ; __NAME ; ) ; ] ; end ; value ; __STRINGLIT ; else ; 
isPrefixUniqueFlw s = 	__local	statement
colide flw	local	table: 0x56233fd5de60	localopt
colide flw	local	table: 0x56233fd5e2a0	import
colide flw	local	table: 0x56233fe4ee10	foreign
teve colisao
isPrefixUniqueFlw s = 	varlist	statement
colide flw	NAME	table: 0x56233ffaece0	field
colide flw	funcargs	table: 0x56233fdbd870	expsuffix
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	funcargs	table: 0x56233fdbd4d0	expsuffix
colide flw	decl	table: 0x56233fecd8f0	toplevelvar
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	expsuffix	table: 0x56233fdbd130	suffixedexp
teve colisao
isPrefixUniqueFlw s = 	e2	e1
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	exp	table: 0x56233fea0630	explist
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	exp	table: 0x56233fd10760	statement
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	recordfield	table: 0x56233fe81180	recordfields
teve colisao
isPrefixUniqueFlw s = 	e3	e2
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	exp	table: 0x56233fea0630	explist
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	e2	table: 0x56233fdac100	e1
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	exp	table: 0x56233fd10760	statement
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	exp	table: 0x56233fd10c30	statement
teve colisao
isPrefixUniqueFlw s = 	e4	e3
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	exp	table: 0x56233fea0630	explist
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	exp	table: 0x56233fd10760	statement
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	e2	table: 0x56233fdac100	e1
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	statement	table: 0x56233fe81f40	block
teve colisao
isPrefixUniqueFlw s = 	e5	e4
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	exp	table: 0x56233fea0630	explist
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	e2	table: 0x56233fdac100	e1
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	exp	table: 0x56233fd10760	statement
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
teve colisao
isPrefixUniqueFlw s = 	e6	e5
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	exp	table: 0x56233fd10760	statement
colide flw	exp	table: 0x56233fea0630	explist
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	e2	table: 0x56233fdac100	e1
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	e5	table: 0x56233ff51530	e4
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
teve colisao
isPrefixUniqueFlw s = 	e7	e6
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	e6	table: 0x56233ff51ec0	e5
colide flw	exp	table: 0x56233fd10760	statement
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	e2	table: 0x56233fdac320	e1
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	exp	table: 0x56233fea0630	explist
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	e2	table: 0x56233fdac100	e1
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	e5	table: 0x56233ff51530	e4
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
teve colisao
isPrefixUniqueFlw s = 	e8	e7
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	e7	table: 0x56233fe4c610	e6
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	e6	table: 0x56233ff51ec0	e5
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	exp	table: 0x56233fea0630	explist
colide flw	e5	table: 0x56233ff51530	e4
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	exp	table: 0x56233fd10760	statement
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	e2	table: 0x56233fdac100	e1
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	statement	table: 0x56233fe81f40	block
teve colisao
isPrefixUniqueFlw s = 	e9	e8
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	e8	table: 0x56233fe4d0f0	e7
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	e7	table: 0x56233fe4c610	e6
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	e6	table: 0x56233ff51ec0	e5
colide flw	e2	table: 0x56233fdac100	e1
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	exp	table: 0x56233fd10760	statement
colide flw	exp	table: 0x56233fea0630	explist
colide flw	e8	table: 0x56233fe4d8a0	e8
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	e5	table: 0x56233ff51530	e4
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	recordfield	table: 0x56233fe81180	recordfields
teve colisao
isPrefixUniqueFlw s = 	e10	e9
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	e8	table: 0x56233fe4d0f0	e7
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	e7	table: 0x56233fe4c610	e6
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e6	table: 0x56233ff51ec0	e5
colide flw	e2	table: 0x56233fdac100	e1
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	e5	table: 0x56233ff51530	e4
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	exp	table: 0x56233fd10760	statement
colide flw	exp	table: 0x56233fea0630	explist
colide flw	e8	table: 0x56233fe4d8a0	e8
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	explist	table: 0x56233ff10b50	statement
teve colisao
isPrefixUniqueFlw s = 	e11	e10
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	e8	table: 0x56233fe4d0f0	e7
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	e7	table: 0x56233fe4c610	e6
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	e6	table: 0x56233ff51ec0	e5
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	e10	table: 0x56233fe6f550	e9
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	exp	table: 0x56233fd10760	statement
colide flw	exp	table: 0x56233fea0630	explist
colide flw	e2	table: 0x56233fdac100	e1
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	e8	table: 0x56233fe4d8a0	e8
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	e5	table: 0x56233ff51530	e4
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
teve colisao
isPrefixUniqueFlw s = 	castexp	e12
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e2	table: 0x56233fdac320	e1
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	e8	table: 0x56233fe4d0f0	e7
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	e7	table: 0x56233fe4c610	e6
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	e6	table: 0x56233ff51ec0	e5
colide flw	e10	table: 0x56233fe6f550	e9
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	e11	table: 0x56233fdbcac0	e12
colide flw	e5	table: 0x56233ff51530	e4
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	exp	table: 0x56233fea0630	explist
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	exp	table: 0x56233fd10760	statement
colide flw	e2	table: 0x56233fdac100	e1
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	e11	table: 0x56233ff40d50	e10
colide flw	exp	table: 0x56233ffae240	statement
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	e8	table: 0x56233fe4d8a0	e8
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	field	table: 0x56233fea12b0	fieldlist
teve colisao
isPrefixUniqueFlw s = 	prefixexp	suffixedexp
colide flw	NAME	table: 0x56233fe81630	recordfield
colide flw	field	table: 0x56233fea12b0	fieldlist
colide flw	param	table: 0x56233fde7c90	paramlist
colide flw	block	table: 0x56233ff70520	statement
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	exp	table: 0x56233fd10c30	statement
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	block	table: 0x56233fe37990	toplevelfunc
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233ffae460	statement
colide flw	exp	table: 0x56233ff842b0	expsuffix
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff114b0	statement
colide flw	statement	table: 0x56233fe81f40	block
colide flw	e4	table: 0x56233ff50db0	e3
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	block	table: 0x56233ff713a0	statement
colide flw	(	table: 0x56233fe373b0	toplevelfunc
colide flw	NAME	table: 0x56233ffaece0	field
colide flw	block	table: 0x56233fe49270	elseifstat
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	e7	table: 0x56233fe4c610	e6
colide flw	block	table: 0x56233fd10e50	statement
colide flw	exp	table: 0x56233fe49000	elseifstat
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	block	table: 0x56233ffaf0f0	statement
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	exp	table: 0x56233fea0410	explist
colide flw	expsuffix	table: 0x56233fdbd130	suffixedexp
colide flw	recordfield	table: 0x56233fe81180	recordfields
colide flw	e11	table: 0x56233fdbcac0	e12
colide flw	decl	table: 0x56233fe09a10	decllist
colide flw	recordfields	table: 0x56233fece2d0	toplevelrecord
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	e8	table: 0x56233fe4d0f0	e7
colide flw	e2	table: 0x56233fdac320	e1
colide flw	block	table: 0x56233fe49810	elseopt
colide flw	e6	table: 0x56233ff51ec0	e5
colide flw	e5	table: 0x56233ff51530	e4
colide flw	decl	table: 0x56233fecd8f0	toplevelvar
colide flw	e10	table: 0x56233fe6f550	e9
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	var	table: 0x56233ff8dea0	varlist
colide flw	type	table: 0x56233fd2ff10	typelist
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	exp	table: 0x56233fd10760	statement
colide flw	(	table: 0x56233ff8e430	funcargs
colide flw	block	table: 0x56233ff70d20	statement
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e3	table: 0x56233fdaca60	e2
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	simpleexp	table: 0x56233ff858d0	castexp
colide flw	e8	table: 0x56233fe4d8a0	e8
colide flw	toplevelvar	table: 0x56233fe95210	program
colide flw	explist	table: 0x56233ff11180	statement
colide flw	funcargs	table: 0x56233fdbd4d0	expsuffix
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	varlist	table: 0x56233ff10f60	statement
colide flw	e2	table: 0x56233fdac100	e1
colide flw	var	table: 0x56233ff8dc50	varlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233ffae240	statement
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	exp	table: 0x56233ff70b00	statement
colide flw	exp	table: 0x56233fea0630	explist
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	e11	table: 0x56233ff40d50	e10
colide flw	funcargs	table: 0x56233fdbd870	expsuffix
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	NAME	table: 0x56233fde8490	param
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	e3	table: 0x56233fdac880	e2
colide flw	explist	table: 0x56233fe49db0	returnstat
teve colisao
isPrefixUniqueFlw s = 	__:	expsuffix
colide flw	:	table: 0x56233fde7530	rettypeopt
colide flw	:	table: 0x56233fe81770	recordfield
colide flw	:	table: 0x56233fe09150	decl
colide flw	:	table: 0x56233fde8540	param
teve colisao
previousEq	__:
__NAME ; ) ; ] ; __STRINGLIT ; } ; 
isPrefixUniqueFlw s = 	__(	prefixexp
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	(	table: 0x56233ff8e430	funcargs
colide flw	(	table: 0x56233fe373b0	toplevelfunc
teve colisao
isPrefixUniqueFlw s = 	NAME	var
colide flw	NAME	table: 0x56233ff85090	prefixexp
colide flw	NAME	table: 0x56233ffaece0	field
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	NAME	table: 0x56233fe09010	decl
teve colisao
isPrefixUniqueFlw s = 	var	varlist
colide flw	field	table: 0x56233fea14d0	fieldlist
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	NAME	table: 0x56233ffaece0	field
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	funcargs	table: 0x56233fdbd870	expsuffix
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	NAME	table: 0x56233fe09010	decl
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	funcargs	table: 0x56233fdbd4d0	expsuffix
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	decl	table: 0x56233fecd8f0	toplevelvar
colide flw	exp	table: 0x56233fe3af30	field
colide flw	suffixedexp	table: 0x56233ff8d580	var
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e2	table: 0x56233fdac100	e1
colide flw	expsuffix	table: 0x56233fdbd130	suffixedexp
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	varlist	table: 0x56233ff10f60	statement
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	e3	table: 0x56233fdac880	e2
teve colisao
isPrefixUniqueFlw s = 	__,	varlist
colide flw	,	table: 0x56233fde7b80	paramlist
colide flw	,	table: 0x56233fd2fe00	typelist
colide flw	,	table: 0x56233fea0520	explist
colide flw	,	table: 0x56233fe09900	decllist
colide flw	,	table: 0x56233ffae350	statement
colide flw	,	table: 0x56233ffae130	statement
colide flw	,	table: 0x56233fe3b3d0	fieldsep
teve colisao
isPrefixUniqueFlw s = 	__(	funcargs
colide flw	(	table: 0x56233ff851e0	prefixexp
colide flw	(	table: 0x56233fe373b0	toplevelfunc
teve colisao
isPrefixUniqueFlw s = 	exp	explist
colide flw	exp	table: 0x56233ff852f0	prefixexp
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	exp	table: 0x56233fecdb90	toplevelvar
colide flw	type	table: 0x56233fd2fcf0	typelist
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	{	table: 0x56233ff96560	simpletype
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	explist	table: 0x56233ff11180	statement
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	paramlist	table: 0x56233fe375d0	toplevelfunc
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	exp	table: 0x56233fe3af30	field
colide flw	explist	table: 0x56233ff8e540	funcargs
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e2	table: 0x56233fdac100	e1
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	explist	table: 0x56233ff10b50	statement
colide flw	explist	table: 0x56233fe49db0	returnstat
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	STRINGLIT	table: 0x56233fe4f470	foreign
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	exp	table: 0x56233fd11b60	statement
colide flw	(	table: 0x56233fd2fbe0	typelist
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	e3	table: 0x56233fdac880	e2
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	param	table: 0x56233fde7a70	paramlist
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e7	table: 0x56233fe4c3f0	e6
colide flw	STRINGLIT	table: 0x56233fd5ea00	import
colide flw	simpletype	table: 0x56233fe80dd0	type
teve colisao
isPrefixUniqueFlw s = 	__,	explist
colide flw	,	table: 0x56233fde7b80	paramlist
colide flw	,	table: 0x56233fd2fe00	typelist
colide flw	,	table: 0x56233fe09900	decllist
colide flw	,	table: 0x56233ffae350	statement
colide flw	,	table: 0x56233ff8dd90	varlist
colide flw	,	table: 0x56233ffae130	statement
colide flw	,	table: 0x56233fe3b3d0	fieldsep
teve colisao
previousEq	__,
) ; __NUMBER ; string ; } ; float ; value ; ] ; __NAME ; integer ; nil ; true ; false ; __STRINGLIT ; boolean ; 
isPrefixUniqueFlw s = 	__{	initlist
colide flw	{	table: 0x56233ff96560	simpletype
teve colisao
isPrefixUniqueFlw s = 	field	fieldlist
colide flw	type	table: 0x56233ff96a80	simpletype
colide flw	suffixedexp	table: 0x56233ff8a1f0	simpleexp
colide flw	simpletype	table: 0x56233fe80dd0	type
colide flw	castexp	table: 0x56233fdbc870	e12
colide flw	e6	table: 0x56233ff51a90	e5
colide flw	e1	table: 0x56233fdabf30	exp
colide flw	simpleexp	table: 0x56233ff89630	castexp
colide flw	prefixexp	table: 0x56233fdbd020	suffixedexp
colide flw	e4	table: 0x56233fd15b20	e3
colide flw	e12	table: 0x56233fdbc5d0	e11
colide flw	fieldlist	table: 0x56233fea0cd0	initlist
colide flw	exp	table: 0x56233fe3af30	field
colide flw	e2	table: 0x56233fdac100	e1
colide flw	initlist	table: 0x56233ff8a0a0	simpleexp
colide flw	e9	table: 0x56233fe4d650	e8
colide flw	e5	table: 0x56233ff512e0	e4
colide flw	e3	table: 0x56233fdac880	e2
colide flw	prefixexp	table: 0x56233ff8a340	simpleexp
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	e10	table: 0x56233fe6efd0	e9
colide flw	e11	table: 0x56233ff40330	e10
colide flw	e8	table: 0x56233fe4cb70	e7
colide flw	e7	table: 0x56233fe4c3f0	e6
teve colisao
isPrefixUniqueFlw s = 	fieldsep	fieldlist
colide flw	,	table: 0x56233ff8dd90	varlist
colide flw	,	table: 0x56233fea0520	explist
colide flw	,	table: 0x56233ffae350	statement
colide flw	,	table: 0x56233fd2fe00	typelist
colide flw	;	table: 0x56233fe819e0	recordfield
colide flw	;	table: 0x56233ff70270	statement
colide flw	,	table: 0x56233fde7b80	paramlist
colide flw	,	table: 0x56233ffae130	statement
colide flw	,	table: 0x56233fe09900	decllist
colide flw	statement	table: 0x56233fe81f40	block
teve colisao
isPrefixUniqueFlw s = 	NAME	field
colide flw	NAME	table: 0x56233ff96410	simpletype
colide flw	NAME	table: 0x56233ff8d6d0	var
colide flw	NAME	table: 0x56233fe09010	decl
teve colisao
upath 	SKIP
unique var2 	toplevelfunc
unique var 	toplevelrecord
Unique usage	toplevelrecord
unique var2 	import
unique var 	foreign
Unique usage	foreign
unique var 	paramlist
Unique usage	paramlist
unique var 	rettypeopt
Unique usage	rettypeopt
unique var 	block
upath 	record
unique var 	recordfields
Unique usage	recordfields
upath 	(
upath 	(
unique var 	rettype
unique var 	param
Unique usage	param
unique var 	param
Unique usage	param
unique var 	type
unique var 	recordfield
Unique usage	recordfield
unique var 	type
unique var2 	returnstat
upath 	do
upath 	while
unique var 	exp
unique var 	block
upath 	repeat
unique var 	block
unique var 	exp
upath 	if
unique var 	exp
unique var 	block
unique var 	elseifstats
Unique usage	elseifstats
unique var 	elseopt
Unique usage	elseopt
upath 	for
unique var 	decl
unique var 	exp
unique var 	exp
upath 	,
unique var 	exp
unique var 	block
unique var 	elseifstat
Unique usage	elseifstat
upath 	elseif
unique var 	exp
unique var 	block
upath 	else
unique var 	block
upath 	return
unique var 	explist
upath 	or
unique var 	e2
upath 	and
unique var 	e3
unique var 	e4
upath 	|
unique var 	e5
upath 	~
unique var 	e6
upath 	&
unique var 	e7
unique var 	e8
upath 	..
unique var 	e8
unique var 	e10
unique var 	e11
upath 	^
unique var 	e11
upath 	:
upath 	[
unique var 	exp
upath 	.
unique var 	type
upath 	,
Unique vars: program, toplevelrecord, foreign, rettypeopt, paramlist, param, recordfields, recordfield, elseifstats, elseifstat, elseopt, 
matchUPath: toplevelfunc, toplevelrecord, import, foreign, param, recordfields, recordfield, elseifstat, returnstat, 
Adding labels: Err_1, Err_2, Err_3, Err_4, Err_5, Err_6, Err_7, Err_8, Err_9, Err_10, Err_11, Err_12, Err_13, Err_14, Err_15, Err_16, Err_17, Err_18, Err_19, Err_20, Err_21, Err_22, Err_23, Err_24, Err_25, Err_26, Err_27, Err_28, Err_29, Err_30, Err_31, Err_32, Err_33, Err_34, Err_35, Err_36, Err_37, Err_38, Err_39, Err_40, Err_41, Err_42, Err_43, Err_44, Err_45, Err_46, Err_47, Err_48, Err_49, Err_50, Err_51, Err_52, Err_53, Err_54, Err_55, Err_56, Err_57, Err_58, Err_59, Err_60, Err_61, Err_62, 

Property 	nil
program         <-  SKIP (toplevelfunc  /  toplevelvar  /  toplevelrecord  /  import  /  foreign)* !.
toplevelfunc    <-  localopt 'function' NAME^Err_001 '('^Err_002 paramlist ')'^Err_003 rettypeopt block 'end'^Err_004
toplevelvar     <-  localopt decl '=' exp
toplevelrecord  <-  'record' NAME^Err_005 recordfields^Err_006 'end'^Err_007
localopt        <-  'local'?
import          <-  'local' NAME '=' 'import' ('(' STRINGLIT^Err_008 ')'^Err_009  /  STRINGLIT)^Err_010
foreign         <-  'local' NAME^Err_011 '='^Err_012 'foreign'^Err_013 'import'^Err_014 ('(' STRINGLIT^Err_015 ')'^Err_016  /  STRINGLIT)^Err_017
rettypeopt      <-  (':' rettype^Err_018)?
paramlist       <-  (param (',' param^Err_019)*)?
param           <-  NAME ':'^Err_020 type^Err_021
decl            <-  NAME (':' type)?
decllist        <-  decl (',' decl^Err_022)*
simpletype      <-  'nil'  /  'boolean'  /  'integer'  /  'float'  /  'string'  /  'value'  /  NAME  /  '{' type '}'
typelist        <-  '(' (type (',' type)*)? ')'
rettype         <-  typelist '->' rettype  /  simpletype '->' rettype  /  typelist  /  simpletype
type            <-  typelist '->' rettype  /  simpletype '->' rettype  /  simpletype
recordfields    <-  recordfield+^Err_023
recordfield     <-  NAME ':'^Err_024 type^Err_025 ';'?
block           <-  statement* returnstat?
statement       <-  ';'  /  'do' block 'end'^Err_026  /  'while' exp^Err_027 'do'^Err_028 block 'end'^Err_029  /  'repeat' block 'until'^Err_030 exp^Err_031  /  'if' exp^Err_032 'then'^Err_033 block elseifstats elseopt 'end'^Err_034  /  'for' decl^Err_035 '='^Err_036 exp^Err_037 ','^Err_038 exp^Err_039 (',' exp^Err_040)? 'do'^Err_041 block 'end'^Err_042  /  'local' decllist^Err_043 '='^Err_044 explist^Err_045  /  varlist '=' explist  /  suffixedexp
elseifstats     <-  elseifstat*
elseifstat      <-  'elseif' exp^Err_046 'then'^Err_047 block
elseopt         <-  ('else' block)?
returnstat      <-  'return' explist? ';'?
exp             <-  e1
e1              <-  e2 ('or' e2^Err_048)*
e2              <-  e3 ('and' e3^Err_049)*
e3              <-  e4 (('=='  /  '~='  /  '<='  /  '>='  /  '<'  /  '>') e4^Err_050)*
e4              <-  e5 ('|' e5^Err_051)*
e5              <-  e6 ('~' !'=' e6^Err_052)*
e6              <-  e7 ('&' e7^Err_053)*
e7              <-  e8 (('<<'  /  '>>') e8^Err_054)*
e8              <-  e9 ('..' e8^Err_055)?
e9              <-  e10 (('+'  /  '-') e10^Err_056)*
e10             <-  e11 (('*'  /  '%%'  /  '/'  /  '//') e11^Err_057)*
e11             <-  ('not'  /  '#'  /  '-'  /  '~')* e12
e12             <-  castexp ('^' e11^Err_058)?
suffixedexp     <-  prefixexp expsuffix+
expsuffix       <-  funcargs  /  ':' NAME funcargs  /  '[' exp^Err_059 ']'^Err_060  /  '.' !'.' NAME^Err_061
prefixexp       <-  NAME  /  '(' exp ')'
castexp         <-  simpleexp 'as' type^Err_062  /  simpleexp
simpleexp       <-  'nil'  /  'false'  /  'true'  /  NUMBER  /  STRINGLIT  /  initlist  /  suffixedexp  /  prefixexp
var             <-  suffixedexp  /  NAME !expsuffix
varlist         <-  var (',' var)*
funcargs        <-  '(' explist? ')'  /  initlist  /  STRINGLIT
explist         <-  exp (',' exp)*
initlist        <-  '{' fieldlist? '}'
fieldlist       <-  field (fieldsep field)* fieldsep?
field           <-  (NAME '=')? exp
fieldsep        <-  ';'  /  ','
STRINGLIT       <-  '"' (!'"' .)* '"'  /  "'" (!"'" .)* "'"
RESERVED        <-  ('and'  /  'as'  /  'boolean'  /  'break'  /  'do'  /  'elseif'  /  'else'  /  'end'  /  'float'  /  'foreign'  /  'for'  /  'false'  /  'function'  /  'goto'  /  'if'  /  'import'  /  'integer'  /  'in'  /  'local'  /  'nil'  /  'not'  /  'or'  /  'record'  /  'repeat'  /  'return'  /  'string'  /  'then'  /  'true'  /  'until'  /  'value'  /  'while') ![a-zA-Z_0-9]
NAME            <-  !RESERVED [a-zA-Z_] [a-zA-Z_0-9]*
NUMBER          <-  [0-9]+ ('.' !'.' [0-9]*)?
COMMENT         <-  '--' (!%nl .)*
SPACE           <-  [ 	
]  /  COMMENT
SKIP            <-  ([ 	
]  /  COMMENT)*
Token           <-  '~='  /  '~'  /  '}'  /  '|'  /  '{'  /  STRINGLIT  /  RESERVED  /  NUMBER  /  NAME  /  COMMENT  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '->'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  '#'
EatToken        <-  (Token  /  (!SPACE .)+) SKIP
Err_001         <-  (!'(' EatToken)*
Err_002         <-  (!(NAME  /  ')') EatToken)*
Err_003         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  ':'  /  '(') EatToken)*
Err_004         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_005         <-  (!NAME EatToken)*
Err_006         <-  (!'end' EatToken)*
Err_007         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_008         <-  (!')' EatToken)*
Err_009         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_010         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_011         <-  (!'=' EatToken)*
Err_012         <-  (!'foreign' EatToken)*
Err_013         <-  (!'import' EatToken)*
Err_014         <-  (!(STRINGLIT  /  '(') EatToken)*
Err_015         <-  (!')' EatToken)*
Err_016         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_017         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_018         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_019         <-  (!(','  /  ')') EatToken)*
Err_020         <-  (!('{'  /  'value'  /  'string'  /  'nil'  /  'integer'  /  'float'  /  'boolean'  /  NAME  /  '(') EatToken)*
Err_021         <-  (!(','  /  ')') EatToken)*
Err_022         <-  (!('='  /  ',') EatToken)*
Err_023         <-  (!('end'  /  NAME) EatToken)*
Err_024         <-  (!('{'  /  'value'  /  'string'  /  'nil'  /  'integer'  /  'float'  /  'boolean'  /  NAME  /  '(') EatToken)*
Err_025         <-  (!('end'  /  NAME  /  ';') EatToken)*
Err_026         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_027         <-  (!'do' EatToken)*
Err_028         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_029         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_030         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_031         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_032         <-  (!'then' EatToken)*
Err_033         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_034         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_035         <-  (!'=' EatToken)*
Err_036         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_037         <-  (!',' EatToken)*
Err_038         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_039         <-  (!('do'  /  ',') EatToken)*
Err_040         <-  (!'do' EatToken)*
Err_041         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_042         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_043         <-  (!'=' EatToken)*
Err_044         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_045         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_046         <-  (!'then' EatToken)*
Err_047         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_048         <-  (!('}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ']'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_049         <-  (!('}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_050         <-  (!('~='  /  '}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_051         <-  (!('~='  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_052         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_053         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_054         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_055         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_056         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '..'  /  '-'  /  ','  /  '+'  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_057         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_058         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_059         <-  (!']' EatToken)*
Err_060         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  '{'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'as'  /  'and'  /  STRINGLIT  /  NAME  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '.'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_061         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  '{'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'as'  /  'and'  /  STRINGLIT  /  NAME  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '.'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_062         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  '^'  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*	

Property 	ban
program         <-  SKIP (toplevelfunc_ban  /  toplevelvar_ban  /  toplevelrecord  /  import_ban  /  foreign)* !.
toplevelfunc    <-  localopt_ban 'function'_ban NAME^Err_001 '('^Err_002 paramlist ')'^Err_003 rettypeopt block 'end'^Err_004
toplevelvar     <-  localopt_ban decl_ban '='_ban exp_ban
toplevelrecord  <-  'record' NAME^Err_005 recordfields^Err_006 'end'^Err_007
localopt        <-  'local'_ban?_ban
import          <-  'local'_ban NAME_ban '='_ban 'import'_ban ('(' STRINGLIT^Err_008 ')'^Err_009  /  STRINGLIT)^Err_010
foreign         <-  'local' NAME^Err_011 '='^Err_012 'foreign'^Err_013 'import'^Err_014 ('(' STRINGLIT^Err_015 ')'^Err_016  /  STRINGLIT)^Err_017
rettypeopt      <-  (':' rettype^Err_018)?
paramlist       <-  (param (',' param^Err_019)*)?
param           <-  NAME ':'^Err_020 type^Err_021
decl            <-  NAME_ban (':'_ban type_ban)?_ban
decllist        <-  decl (',' decl^Err_022)*
simpletype      <-  ('nil'_ban  /  ('boolean'_ban  /  ('integer'_ban  /  ('float'_ban  /  ('string'_ban  /  ('value'_ban  /  (NAME_ban  /  '{'_ban type_ban '}'_ban)_ban)_ban)_ban)_ban)_ban)_ban)_ban
typelist        <-  '('_ban (type_ban (','_ban type_ban)*_ban)?_ban ')'_ban
rettype         <-  (typelist_ban '->'_ban rettype_ban  /  (simpletype_ban '->'_ban rettype_ban  /  (typelist_ban  /  simpletype_ban)_ban)_ban)_ban
type            <-  (typelist_ban '->'_ban rettype_ban  /  (simpletype_ban '->'_ban rettype_ban  /  simpletype_ban)_ban)_ban
recordfields    <-  recordfield+^Err_023
recordfield     <-  NAME ':'^Err_024 type^Err_025 ';'?
block           <-  statement* returnstat?
statement       <-  ';'  /  'do' block 'end'^Err_026  /  'while' exp^Err_027 'do'^Err_028 block 'end'^Err_029  /  'repeat' block 'until'^Err_030 exp^Err_031  /  'if' exp^Err_032 'then'^Err_033 block elseifstats elseopt 'end'^Err_034  /  'for' decl^Err_035 '='^Err_036 exp^Err_037 ','^Err_038 exp^Err_039 (',' exp^Err_040)? 'do'^Err_041 block 'end'^Err_042  /  'local' decllist^Err_043 '='^Err_044 explist^Err_045  /  varlist_ban '='_ban explist_ban  /  suffixedexp
elseifstats     <-  elseifstat*
elseifstat      <-  'elseif' exp^Err_046 'then'^Err_047 block
elseopt         <-  ('else' block)?
returnstat      <-  'return' explist? ';'?
exp             <-  e1_ban
e1              <-  e2_ban ('or'_ban e2^Err_048)*_ban
e2              <-  e3_ban ('and'_ban e3^Err_049)*_ban
e3              <-  e4_ban ((('=='_ban  /  ('~='_ban  /  ('<='_ban  /  ('>='_ban  /  ('<'_ban  /  '>'_ban)_ban)_ban)_ban)_ban)_ban) e4^Err_050)*_ban
e4              <-  e5_ban ('|'_ban e5^Err_051)*_ban
e5              <-  e6_ban ('~'_ban !'=' e6^Err_052)*_ban
e6              <-  e7_ban ('&'_ban e7^Err_053)*_ban
e7              <-  e8_ban ((('<<'_ban  /  '>>'_ban)_ban) e8^Err_054)*_ban
e8              <-  e9_ban ('..'_ban e8^Err_055)?_ban
e9              <-  e10_ban ((('+'_ban  /  '-'_ban)_ban) e10^Err_056)*_ban
e10             <-  e11_ban ((('*'_ban  /  ('%%'_ban  /  ('/'_ban  /  '//'_ban)_ban)_ban)_ban) e11^Err_057)*_ban
e11             <-  (('not'_ban  /  ('#'_ban  /  ('-'_ban  /  '~'_ban)_ban)_ban)_ban)*_ban e12_ban
e12             <-  castexp_ban ('^'_ban e11^Err_058)?_ban
suffixedexp     <-  prefixexp_ban expsuffix_ban+_ban
expsuffix       <-  (funcargs_ban  /  (':'_ban NAME_ban funcargs_ban  /  ('['_ban exp^Err_059 ']'^Err_060  /  '.'_ban !'.' NAME_ban^Err_061)_ban)_ban)_ban
prefixexp       <-  (NAME_ban  /  '('_ban exp_ban ')'_ban)_ban
castexp         <-  (simpleexp_ban 'as'_ban type^Err_062  /  simpleexp_ban)_ban
simpleexp       <-  ('nil'_ban  /  ('false'_ban  /  ('true'_ban  /  (NUMBER_ban  /  (STRINGLIT_ban  /  (initlist_ban  /  (suffixedexp_ban  /  prefixexp_ban)_ban)_ban)_ban)_ban)_ban)_ban)_ban
var             <-  (suffixedexp_ban  /  NAME_ban !expsuffix)_ban
varlist         <-  var_ban (','_ban var_ban)*_ban
funcargs        <-  ('('_ban explist_ban?_ban ')'_ban  /  (initlist_ban  /  STRINGLIT_ban)_ban)_ban
explist         <-  exp_ban (','_ban exp_ban)*_ban
initlist        <-  '{'_ban fieldlist_ban?_ban '}'_ban
fieldlist       <-  field_ban (fieldsep_ban field_ban)*_ban fieldsep_ban?_ban
field           <-  (NAME_ban '='_ban)?_ban exp_ban
fieldsep        <-  (';'_ban  /  ','_ban)_ban
STRINGLIT       <-  '"' (!'"' .)* '"'  /  "'" (!"'" .)* "'"
RESERVED        <-  ('and'  /  'as'  /  'boolean'  /  'break'  /  'do'  /  'elseif'  /  'else'  /  'end'  /  'float'  /  'foreign'  /  'for'  /  'false'  /  'function'  /  'goto'  /  'if'  /  'import'  /  'integer'  /  'in'  /  'local'  /  'nil'  /  'not'  /  'or'  /  'record'  /  'repeat'  /  'return'  /  'string'  /  'then'  /  'true'  /  'until'  /  'value'  /  'while') ![a-zA-Z_0-9]
NAME            <-  !RESERVED [a-zA-Z_] [a-zA-Z_0-9]*
NUMBER          <-  [0-9]+ ('.' !'.' [0-9]*)?
COMMENT         <-  '--' (!%nl .)*
SPACE           <-  [ 	
]  /  COMMENT
SKIP            <-  ([ 	
]  /  COMMENT)*
Token           <-  '~='  /  '~'  /  '}'  /  '|'  /  '{'  /  STRINGLIT  /  RESERVED  /  NUMBER  /  NAME  /  COMMENT  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '->'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  '#'
EatToken        <-  (Token  /  (!SPACE .)+) SKIP
Err_001         <-  (!'(' EatToken)*
Err_002         <-  (!(NAME  /  ')') EatToken)*
Err_003         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  ':'  /  '(') EatToken)*
Err_004         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_005         <-  (!NAME EatToken)*
Err_006         <-  (!'end' EatToken)*
Err_007         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_008         <-  (!')' EatToken)*
Err_009         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_010         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_011         <-  (!'=' EatToken)*
Err_012         <-  (!'foreign' EatToken)*
Err_013         <-  (!'import' EatToken)*
Err_014         <-  (!(STRINGLIT  /  '(') EatToken)*
Err_015         <-  (!')' EatToken)*
Err_016         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_017         <-  (!('record'  /  'local'  /  'function'  /  NAME  /  !.) EatToken)*
Err_018         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_019         <-  (!(','  /  ')') EatToken)*
Err_020         <-  (!('{'  /  'value'  /  'string'  /  'nil'  /  'integer'  /  'float'  /  'boolean'  /  NAME  /  '(') EatToken)*
Err_021         <-  (!(','  /  ')') EatToken)*
Err_022         <-  (!('='  /  ',') EatToken)*
Err_023         <-  (!('end'  /  NAME) EatToken)*
Err_024         <-  (!('{'  /  'value'  /  'string'  /  'nil'  /  'integer'  /  'float'  /  'boolean'  /  NAME  /  '(') EatToken)*
Err_025         <-  (!('end'  /  NAME  /  ';') EatToken)*
Err_026         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_027         <-  (!'do' EatToken)*
Err_028         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_029         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_030         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_031         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_032         <-  (!'then' EatToken)*
Err_033         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_034         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_035         <-  (!'=' EatToken)*
Err_036         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_037         <-  (!',' EatToken)*
Err_038         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_039         <-  (!('do'  /  ',') EatToken)*
Err_040         <-  (!'do' EatToken)*
Err_041         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_042         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_043         <-  (!'=' EatToken)*
Err_044         <-  (!('~'  /  '{'  /  'true'  /  'not'  /  'nil'  /  'false'  /  STRINGLIT  /  NUMBER  /  NAME  /  '-'  /  '('  /  '#') EatToken)*
Err_045         <-  (!('while'  /  'until'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_046         <-  (!'then' EatToken)*
Err_047         <-  (!('while'  /  'return'  /  'repeat'  /  'local'  /  'if'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ';'  /  '(') EatToken)*
Err_048         <-  (!('}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  NAME  /  ']'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_049         <-  (!('}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_050         <-  (!('~='  /  '}'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_051         <-  (!('~='  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_052         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  !.) EatToken)*
Err_053         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_054         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_055         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ','  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_056         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '..'  /  '-'  /  ','  /  '+'  /  ')'  /  '('  /  '&'  /  !.) EatToken)*
Err_057         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_058         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_059         <-  (!']' EatToken)*
Err_060         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  '{'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'as'  /  'and'  /  STRINGLIT  /  NAME  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '.'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_061         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  '{'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'as'  /  'and'  /  STRINGLIT  /  NAME  /  '^'  /  ']'  /  '['  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '//'  /  '/'  /  '..'  /  '.'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*
Err_062         <-  (!('~='  /  '~'  /  '}'  /  '|'  /  'while'  /  'until'  /  'then'  /  'return'  /  'repeat'  /  'record'  /  'or'  /  'local'  /  'if'  /  'function'  /  'for'  /  'end'  /  'elseif'  /  'else'  /  'do'  /  'and'  /  NAME  /  '^'  /  ']'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  '//'  /  '/'  /  '..'  /  '-'  /  ','  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '%%'  /  !.) EatToken)*	

End UPathDeep

Yes: 	arraytype01.titan
Yes: 	arraytype02.titan
Yes: 	assign01.titan
Yes: 	comment01.titan
Yes: 	dowhile01.titan
Yes: 	expression01.titan
Yes: 	expression02.titan
Yes: 	expression03.titan
Yes: 	expression04.titan
Yes: 	expression05.titan
Yes: 	expression06.titan
Yes: 	expression07.titan
Yes: 	expression08.titan
Yes: 	expressionCall01.titan
Yes: 	expressionCall02.titan
Yes: 	expressionCall03.titan
Yes: 	expressionCall04.titan
Yes: 	expressionCall05.titan
Yes: 	expressionCall06.titan
Yes: 	expressionCall07.titan
Yes: 	expressionCall08.titan
Yes: 	expressionCall09.titan
Yes: 	expressionCall10.titan
Yes: 	expressionCast01.titan
Yes: 	expressionCast02.titan
Yes: 	expressionCast03.titan
Yes: 	expressionCast04.titan
Yes: 	expressionOp01.titan
Yes: 	expressionOp02.titan
Yes: 	expressionOp03.titan
Yes: 	expressionOp04.titan
Yes: 	expressionOp05.titan
Yes: 	expressionOp06.titan
Yes: 	expressionString01.titan
Yes: 	expressionString02.titan
Yes: 	expressionString03.titan
Yes: 	expressionString04.titan
Yes: 	expressionString05.titan
Yes: 	for01.titan
Yes: 	foreign01.titan
Yes: 	functiontype01.titan
Yes: 	functiontype02.titan
Yes: 	functiontype03.titan
Yes: 	functiontype04.titan
Yes: 	functiontype05.titan
Yes: 	functiontype06.titan
Yes: 	functiontype07.titan
Yes: 	functiontype08.titan
Yes: 	if01.titan
Yes: 	if02.titan
Yes: 	if03.titan
Yes: 	if04.titan
Yes: 	import01.titan
Yes: 	moduleMember01.titan
Yes: 	primitivetype01.titan
Yes: 	primitivetype02.titan
Yes: 	record01.titan
Yes: 	record02.titan
Yes: 	record03.titan
Yes: 	record04.titan
Yes: 	record05.titan
Yes: 	record06.titan
Yes: 	record07.titan
Yes: 	record08.titan
Yes: 	record09.titan
Yes: 	record10.titan
Yes: 	record11.titan
Yes: 	record12.titan
Yes: 	repeat01.titan
Yes: 	return01.titan
Yes: 	return02.titan
Yes: 	return03.titan
Yes: 	return04.titan
Yes: 	return05.titan
Yes: 	return06.titan
Yes: 	suffixOp01.titan
Yes: 	table01.titan
Yes: 	table02.titan
Yes: 	table03.titan
Yes: 	toplevelfunction01.titan
Yes: 	toplevelfunction02.titan
Yes: 	toplevelfunction03.titan
Yes: 	toplevelfunction04.titan
Yes: 	toplevelvar01.titan
Yes: 	toplevelvar02.titan
Yes: 	vardec01.titan
Yes: 	while01.titan
No: 	assignAssign01.titan
r = nil lab = fail line: 3 col: 1
No: 	assignFor01.titan
r = nil lab = fail line: 2 col: 9
No: 	assignLocal01.titan
r = nil lab = fail line: 2 col: 11
No: 	assignVar01.titan
r = nil lab = fail line: 1 col: 3
No: 	castMissingType01.titan
r = nil lab = fail line: 4 col: 1
No: 	colonRecordField01.titan
r = nil lab = fail line: 2 col: 5
No: 	commaFor01.titan
r = nil lab = fail line: 2 col: 12
No: 	declFor01.titan
r = nil lab = fail line: 2 col: 6
No: 	declLocal01.titan
r = nil lab = fail line: 2 col: 9
No: 	declLocal02.titan
r = nil lab = fail line: 2 col: 8
No: 	declLocal03.titan
r = nil lab = fail line: 2 col: 15
No: 	declLocal04.titan
r = nil lab = fail line: 2 col: 8
No: 	declParList01.titan
r = nil lab = fail line: 2 col: 11
No: 	declParList02.titan
r = nil lab = fail line: 1 col: 22
No: 	doFor01.titan
r = nil lab = fail line: 3 col: 2
No: 	doWhile01.titan
r = nil lab = fail line: 3 col: 3
No: 	endBlock01.titan
r = nil lab = fail line: 4 col: 1
No: 	endFor01.titan
r = nil lab = fail line: 4 col: 2
No: 	endFunc01.titan
r = nil lab = fail line: 3 col: 2
No: 	endFunc02.titan
r = nil lab = fail line: 2 col: 9
No: 	endFunc03.titan
r = nil lab = fail line: 4 col: 1
No: 	endIf01.titan
r = nil lab = fail line: 5 col: 2
No: 	endRecord01.titan
r = nil lab = fail line: 3 col: 1
No: 	endWhile01.titan
r = nil lab = fail line: 5 col: 2
No: 	exp1For01.titan
r = nil lab = fail line: 2 col: 10
No: 	exp2For01.titan
r = nil lab = fail line: 3 col: 1
No: 	exp3For01.titan
r = nil lab = fail line: 3 col: 1
No: 	expAssign01.titan
r = nil lab = fail line: 2 col: 6
No: 	expAssign02.titan
r = nil lab = fail line: 2 col: 13
No: 	expAssign03.titan
r = nil lab = fail line: 4 col: 1
No: 	expElseIf01.titan
r = nil lab = fail line: 5 col: 1
No: 	expExpList01.titan
r = nil lab = fail line: 4 col: 1
No: 	expExpList02.titan
r = nil lab = fail line: 2 col: 11
No: 	expExpSuf01.titan
r = nil lab = fail line: 2 col: 8
No: 	expFieldList01.titan
r = nil lab = fail line: 2 col: 11
No: 	expIf01.titan
r = nil lab = fail line: 3 col: 1
No: 	expLocal01.titan
r = nil lab = fail line: 4 col: 1
No: 	expRepeat01.titan
r = nil lab = fail line: 6 col: 1
No: 	expSimpleExp01.titan
r = nil lab = fail line: 2 col: 7
No: 	expStat01.titan
r = nil lab = fail line: 3 col: 1
No: 	expStat02.titan
r = nil lab = fail line: 2 col: 2
No: 	expVarDec01.titan
r = nil lab = fail line: 2 col: 1
No: 	expVarList01.titan
r = nil lab = fail line: 2 col: 5
No: 	expWhile01.titan
r = nil lab = fail line: 3 col: 1
No: 	fieldRecord01.titan
r = nil lab = fail line: 3 col: 1
No: 	funcArgsExpSuf01.titan
r = nil lab = fail line: 2 col: 12
No: 	lParPList01.titan
r = nil lab = fail line: 1 col: 14
No: 	nameColonExpSuf01.titan
r = nil lab = fail line: 2 col: 10
No: 	nameDotExpSuf01.titan
r = nil lab = fail line: 2 col: 8
No: 	nameFunc01.titan
r = nil lab = fail line: 1 col: 17
No: 	nameFunc02.titan
r = nil lab = fail line: 1 col: 10
No: 	nameImport01.titan
r = nil lab = fail line: 1 col: 7
No: 	nameRecord01.titan
r = nil lab = fail line: 2 col: 1
No: 	opExp01.titan
r = nil lab = fail line: 4 col: 1
No: 	paramSemicolon01.titan
r = nil lab = fail line: 1 col: 15
No: 	rBracketExpSuf01.titan
r = nil lab = fail line: 3 col: 1
No: 	rCurlyInitList01.titan
r = nil lab = fail line: 3 col: 1
No: 	rCurlyType01.titan
r = nil lab = fail line: 1 col: 15
No: 	rParFuncArgs01.titan
r = nil lab = fail line: 3 col: 1
No: 	rParImport01.titan
r = nil lab = fail line: 2 col: 1
No: 	rParPList01.titan
r = nil lab = fail line: 1 col: 16
No: 	rParSimpleExp01.titan
r = nil lab = fail line: 3 col: 1
No: 	rParenTypelist01.titan
r = nil lab = fail line: 1 col: 21
No: 	stringImport01.titan
r = nil lab = fail line: 2 col: 1
No: 	stringLParImport01.titan
r = nil lab = fail line: 1 col: 22
No: 	thenElseIf01.titan
r = nil lab = fail line: 5 col: 2
No: 	thenIf01.titan
r = nil lab = fail line: 3 col: 3
No: 	typeDecl01.titan
r = nil lab = fail line: 1 col: 18
No: 	typeFunc01.titan
r = nil lab = fail line: 2 col: 7
No: 	typeRecordField01.titan
r = nil lab = fail line: 3 col: 1
No: 	typeReturnTypes01.titan
r = nil lab = fail line: 1 col: 20
No: 	typeType01.titan
r = nil lab = fail line: 1 col: 11
No: 	typelistType01.titan
r = nil lab = fail line: 1 col: 13
No: 	untilRepeat01.titan
r = nil lab = fail line: 5 col: 1
