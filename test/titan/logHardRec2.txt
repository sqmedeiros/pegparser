Yes: 	arraytype01.titan
Yes: 	arraytype02.titan
Yes: 	assign01.titan
Yes: 	comment01.titan
Yes: 	dowhile01.titan
Yes: 	expression01.titan
Yes: 	expression02.titan
Yes: 	expression03.titan
Yes: 	expression04.titan
Yes: 	expression05.titan
Yes: 	expression06.titan
Yes: 	expression07.titan
Yes: 	expression08.titan
Yes: 	expressionCall01.titan
Yes: 	expressionCall02.titan
Yes: 	expressionCall03.titan
Yes: 	expressionCall04.titan
Yes: 	expressionCall05.titan
Yes: 	expressionCall06.titan
Yes: 	expressionCall07.titan
Yes: 	expressionCall08.titan
Yes: 	expressionCall09.titan
Yes: 	expressionCall10.titan
Yes: 	expressionCast01.titan
Yes: 	expressionCast02.titan
Yes: 	expressionCast03.titan
Yes: 	expressionCast04.titan
Yes: 	expressionOp01.titan
Yes: 	expressionOp02.titan
Yes: 	expressionOp03.titan
Yes: 	expressionOp04.titan
Yes: 	expressionOp05.titan
Yes: 	expressionOp06.titan
Yes: 	expressionString01.titan
Yes: 	expressionString02.titan
Yes: 	expressionString03.titan
Yes: 	expressionString04.titan
Yes: 	expressionString05.titan
Yes: 	for01.titan
Yes: 	foreign01.titan
Yes: 	functiontype01.titan
Yes: 	functiontype02.titan
Yes: 	functiontype03.titan
Yes: 	functiontype04.titan
Yes: 	functiontype05.titan
Yes: 	functiontype06.titan
Yes: 	functiontype07.titan
Yes: 	functiontype08.titan
Yes: 	if01.titan
Yes: 	if02.titan
Yes: 	if03.titan
Yes: 	if04.titan
Yes: 	import01.titan
Yes: 	moduleMember01.titan
Yes: 	primitivetype01.titan
Yes: 	primitivetype02.titan
Yes: 	record01.titan
Yes: 	record02.titan
Yes: 	record03.titan
Yes: 	record04.titan
Yes: 	record05.titan
Yes: 	record06.titan
Yes: 	record07.titan
Yes: 	record08.titan
Yes: 	record09.titan
Yes: 	record10.titan
Yes: 	record11.titan
Yes: 	record12.titan
Yes: 	repeat01.titan
Yes: 	return01.titan
Yes: 	return02.titan
Yes: 	return03.titan
Yes: 	return04.titan
Yes: 	return05.titan
Yes: 	return06.titan
Yes: 	suffixOp01.titan
Yes: 	table01.titan
Yes: 	table02.titan
Yes: 	table03.titan
Yes: 	toplevelfunction01.titan
Yes: 	toplevelfunction02.titan
Yes: 	toplevelfunction03.titan
Yes: 	toplevelfunction04.titan
Yes: 	toplevelvar01.titan
Yes: 	toplevelvar02.titan
Yes: 	vardec01.titan
Yes: 	while01.titan
No: 	assignAssign01.titan
function foo(): nil
	x
end

if x == 2 then
	x = 3
end
program{"NONE", }

No: 	assignFor01.titan
function foo(): nil
	for x  1, 10 do
	end
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"for", decl{"x", }, "NONE", simpleexp{"1", }, ",", simpleexp{"10", }, "do", block{}, "end", }, "end", }

No: 	assignLocal01.titan
function foo(): nil
	local x  3
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"local", decl{"x", }, "NONE", simpleexp{"3", }, }, "end", }

No: 	assignVar01.titan
x 3
program{"NONE", }

No: 	castMissingType01.titan
function foo(): nil
	x = foo as
end

if x == 2 then
end
program{"NONE", }

No: 	colonRecordField01.titan
record A
	x  int
end
toplevelrecord{"record", "A", recordfield{"x", "NONE", simpletype{"int", }, }, "end", }

No: 	commaFor01.titan
function foo(): nil
	for x = 1 10 do
	end
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"for", decl{"x", }, "=", simpleexp{"1", }, "NONE", simpleexp{"10", }, "do", block{}, "end", }, "end", }

No: 	declFor01.titan
function foo(): nil
	for = 1, 10 do
	end
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"for", "NONE", "=", simpleexp{"1", }, ",", simpleexp{"10", }, "do", block{}, "end", }, "end", }

No: 	declLocal01.titan
function foo(): nil
	local  = 10
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"local", "NONE", "=", simpleexp{"10", }, }, "end", }

No: 	declLocal02.titan
function foo(): nil
	local (x) = 42
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"local", "NONE", "=", simpleexp{"42", }, }, "end", }

No: 	declLocal03.titan
function f()
	local integer: integer = 10
end
toplevelfunc{localopt{}, "function", "f", "(", paramlist{}, ")", rettypeopt{}, statement{"local", "NONE", "=", simpleexp{"10", }, }, "end", }

No: 	declLocal04.titan
function foo(): nil
	local = 3
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"local", "NONE", "=", simpleexp{"3", }, }, "end", }

No: 	declParList01.titan
function foo(): nil
	local x, = 10, 20
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"local", decllist{decl{"x", }, ",", "NONE", }, "=", explist{simpleexp{"10", }, ",", simpleexp{"20", }, }, }, "end", }

No: 	declParList02.titan
function foo (a:int, ) : int
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{param{"a", ":", simpletype{"int", }, }, ",", "NONE", }, ")", rettypeopt{":", simpletype{"int", }, }, block{}, "end", }

No: 	doFor01.titan
function foo(): nil
	for x = 1, 10, 1
	end
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"for", decl{"x", }, "=", simpleexp{"1", }, ",", simpleexp{"10", }, ",", simpleexp{"1", }, "NONE", block{}, "end", }, "end", }

No: 	doWhile01.titan
function foo(): nil
	while x > 3
		x = x - 1
	end
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"while", e3{prefixexp{"x", }, ">", simpleexp{"3", }, }, "NONE", statement{var{"x", }, "=", e9{prefixexp{"x", }, "-", simpleexp{"1", }, }, }, "end", }, "end", }

No: 	endBlock01.titan
function f ( x : int) : string
	do
	return "42"
program{"NONE", }

No: 	endFor01.titan
function foo(): nil
	for x = 1, 10, 1 do
		return 42
	return 41
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, block{statement{"for", decl{"x", }, "=", simpleexp{"1", }, ",", simpleexp{"10", }, ",", simpleexp{"1", }, "do", returnstat{"return", simpleexp{"42", }, }, "NONE", }, returnstat{"return", simpleexp{"41", }, }, }, "end", }

No: 	endFunc01.titan
function foo(): nil
	return 10
	return 11
end

function x () : integer
	while x < 10 do
		x = x + 1
	end
end
program{"NONE", }

No: 	endFunc02.titan
function foo(): nil
	return;;
end

function x () : integer
	while x < 10 do
		x = x + 1
	end
end
program{"NONE", }

No: 	endFunc03.titan
function foo () : int
	local x = 3
	return x
program{"NONE", }

No: 	endIf01.titan
function foo(): nil
	if x > 10 then
		x = x - 1
		return 42
	return 41
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, block{statement{"if", e3{prefixexp{"x", }, ">", simpleexp{"10", }, }, "then", block{statement{var{"x", }, "=", e9{prefixexp{"x", }, "-", simpleexp{"1", }, }, }, returnstat{"return", simpleexp{"42", }, }, }, elseifstats{}, elseopt{}, "NONE", }, returnstat{"return", simpleexp{"41", }, }, }, "end", }

No: 	endRecord01.titan
record A
	x : int
program{"NONE", }

No: 	endWhile01.titan
function foo(): nil
	while x > 3 do
		x = x - 1
		return 42
	return 41
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, block{statement{"while", e3{prefixexp{"x", }, ">", simpleexp{"3", }, }, "do", block{statement{var{"x", }, "=", e9{prefixexp{"x", }, "-", simpleexp{"1", }, }, }, returnstat{"return", simpleexp{"42", }, }, }, "NONE", }, returnstat{"return", simpleexp{"41", }, }, }, "end", }

No: 	exp1For01.titan
function foo(): nil
	for x = , 10 do
	end
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"for", decl{"x", }, "=", "NONE", ",", simpleexp{"10", }, "do", block{}, "end", }, "end", }

No: 	exp2For01.titan
function foo(): nil
	for x = 1, do
	end
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"for", decl{"x", }, "=", simpleexp{"1", }, ",", "NONE", "do", block{}, "end", }, "end", }

No: 	exp3For01.titan
function foo(): nil
	for x = 1, 10, do
	end
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"for", decl{"x", }, "=", simpleexp{"1", }, ",", simpleexp{"10", }, ",", "NONE", "do", block{}, "end", }, "end", }

No: 	expAssign01.titan
function foo(): nil
	(x) = 42
end

function k() : nil
	y = 33
end
program{"NONE", }

No: 	expAssign02.titan
function foo(): nil
	x = integer.new(10)
end
program{"NONE", }

No: 	expAssign03.titan
function foo(): nil
	x =
        while x < 10 do
		x = x + 1
	end
end
program{"NONE", }

No: 	expElseIf01.titan
function foo(): nil
	if x > 1 then
		x = x - 1
	elseif then
	end
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"if", e3{prefixexp{"x", }, ">", simpleexp{"1", }, }, "then", statement{var{"x", }, "=", e9{prefixexp{"x", }, "-", simpleexp{"1", }, }, }, elseifstat{"elseif", "NONE", "then", block{}, }, elseopt{}, "end", }, "end", }

No: 	expExpList01.titan
function foo(): nil
	local x, y = 10,
end
program{"NONE", }

No: 	expExpList02.titan
function foo(): nil
	x = f(42,)
end
program{"NONE", }

No: 	expExpSuf01.titan
function foo(): nil
	x = y[]
end
program{"NONE", }

No: 	expFieldList01.titan
function foo(): nil
	x = y{42,,}
end
program{"NONE", }

No: 	expIf01.titan
function foo(): nil
	if then
		x = x - 1
	end
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"if", "NONE", "then", statement{var{"x", }, "=", e9{prefixexp{"x", }, "-", simpleexp{"1", }, }, }, elseifstats{}, elseopt{}, "end", }, "end", }

No: 	expLocal01.titan
function foo(): nil
	local x =
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"local", decl{"x", }, "=", "NONE", }, "end", }

No: 	expLocal02.titan
function foo(): nil
	local x =
	while x < 10 do
	end
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, block{statement{"local", decl{"x", }, "=", "NONE", }, statement{"while", e3{prefixexp{"x", }, "<", simpleexp{"10", }, }, "do", block{}, "end", }, }, "end", }

No: 	expRepeat01.titan
function foo(): nil
	repeat
		x = x - 1
	until
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"repeat", statement{var{"x", }, "=", e9{prefixexp{"x", }, "-", simpleexp{"1", }, }, }, "until", "NONE", }, "end", }

No: 	expSimpleExp01.titan
function foo(): nil
	x = ()
end
program{"NONE", }

No: 	expStat01.titan
function foo(): nil
	(f)
end

function bar(): nil
	
end
program{"NONE", }

No: 	expStat02.titan
function foo(): nil
	1 + 1
end
program{"NONE", }

No: 	expVarDec01.titan
x =

function k() : nil
	y = 33
end
program{"NONE", }

No: 	expVarList01.titan
function foo(): nil
	x, = 20
end
program{"NONE", }

No: 	expWhile01.titan
function foo(): nil
	while do
		x = x - 1
	end
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"while", "NONE", "do", statement{var{"x", }, "=", e9{prefixexp{"x", }, "-", simpleexp{"1", }, }, }, "end", }, "end", }

No: 	fieldRecord01.titan
record A
end
program{"NONE", }

No: 	funcArgsExpSuf01.titan
function foo(): nil
	x = obj:f + 1
end
program{"NONE", }

No: 	lParPList01.titan
function foo : int
  while x < 10 do
	x = x + 1
  end
end
program{"NONE", }

No: 	nameColonExpSuf01.titan
function foo(): nil
	x = obj:()
end
program{"NONE", }

No: 	nameDotExpSuf01.titan
function foo(): nil
	x = y.()
end
program{"NONE", }

No: 	nameFunc01.titan
function integer()
end
program{"NONE", }

No: 	nameFunc02.titan
function () : int
end
program{"NONE", }

No: 	nameImport01.titan
local = import "bola"
program{"NONE", }

No: 	nameRecord01.titan
record
program{"NONE", }

No: 	opExp01.titan
function foo(): nil
	x = 1 +
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{var{"x", }, "=", e9{simpleexp{"1", }, "+", "NONE", }, }, "end", }

No: 	paramSemicolon01.titan
function foo(x, y) : int
end
toplevelfunc{localopt{}, "function", "foo", "(", param{"x", "NONE", simpletype{"y", }, }, ")", rettypeopt{":", simpletype{"int", }, }, block{}, "end", }

No: 	rBracketExpSuf01.titan
function foo(): nil
	x = y[1
end
program{"NONE", }

No: 	rCurlyInitList01.titan
function foo(): nil
	x = y{42
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{var{"x", }, "=", suffixedexp{prefixexp{"y", }, initlist{"{", simpleexp{"42", }, "NONE", }, }, }, "end", }

No: 	rCurlyType01.titan
local x: {int = nil
toplevelvar{localopt{"local", }, decl{"x", ":", "NONE", }, "=", simpleexp{"nil", }, }

No: 	rParFuncArgs01.titan
function foo(): nil
	x = f(42
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{var{"x", }, "=", suffixedexp{prefixexp{"f", }, funcargs{"(", simpleexp{"42", }, "NONE", }, }, }, "end", }

No: 	rParImport01.titan
local bola = import ('bola'
program{"NONE", }

No: 	rParPList01.titan
function foo ( : int
end
program{"NONE", }

No: 	rParSimpleExp01.titan
function foo(): nil
	x = (42
end
program{"NONE", }

No: 	rParenTypelist01.titan
local x: (a, b -> b = nil
program{"NONE", }

No: 	stringImport01.titan
local bola = import
program{"NONE", }

No: 	stringLParImport01.titan
local bola = import ()
program{"NONE", }

No: 	thenElseIf01.titan
function foo(): nil
	if x > 1 then
		x = x - 1
	elseif x > 0
	end
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"if", e3{prefixexp{"x", }, ">", simpleexp{"1", }, }, "then", statement{var{"x", }, "=", e9{prefixexp{"x", }, "-", simpleexp{"1", }, }, }, elseifstat{"elseif", e3{prefixexp{"x", }, ">", simpleexp{"0", }, }, "NONE", block{}, }, elseopt{}, "end", }, "end", }

No: 	thenIf01.titan
function foo(): nil
	if x > 10
		x = x - 1
	end
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", simpletype{"nil", }, }, statement{"if", e3{prefixexp{"x", }, ">", simpleexp{"10", }, }, "NONE", statement{var{"x", }, "=", e9{prefixexp{"x", }, "-", simpleexp{"1", }, }, }, elseifstats{}, elseopt{}, "end", }, "end", }

No: 	typeDecl01.titan
function foo (a: ) : int
end
toplevelfunc{localopt{}, "function", "foo", "(", param{"a", ":", "NONE", }, ")", rettypeopt{":", simpletype{"int", }, }, block{}, "end", }

No: 	typeFunc01.titan
function foo () :
	local x = 3
end
toplevelfunc{localopt{}, "function", "foo", "(", paramlist{}, ")", rettypeopt{":", "NONE", }, statement{"local", decl{"x", }, "=", simpleexp{"3", }, }, "end", }

No: 	typeRecordField01.titan
record A
	x : function
end
toplevelrecord{"record", "A", recordfield{"x", ":", "NONE", }, "end", }

No: 	typeReturnTypes01.titan
local x: (a, b) -> = nil = nil

function foo(): nil

end
program{"NONE", }

No: 	typeType01.titan
local x: {} = nil
toplevelvar{localopt{"local", }, decl{"x", ":", "NONE", }, "=", simpleexp{"nil", }, }

No: 	typelistType01.titan
local x: (a,,,) -> b = nil
program{"NONE", }

No: 	untilRepeat01.titan
function foo(): nil
	repeat
		x = x - 1
	end
	x = x + 42
end

function bar(): int
end

program{"NONE", }

irec: 	75	 ifail: 	0
