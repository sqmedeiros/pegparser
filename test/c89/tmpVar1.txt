Unique Path (UPath)
insideLoop: external_decl, function_def, decl_spec, decl, storage_class_spec, type_spec, type_qualifier, struct_or_union, init_declarator_list, init_declarator, struct_decl, spec_qualifier, declarator, direct_declarator, pointer, param_type_list, param_decl, id_list, abstract_declarator, direct_abstract_declarator, typedef_name, stat, compound_stat, exp, assignment_exp, conditional_exp, const_exp, logical_or_exp, logical_and_exp, inclusive_or_exp, exclusive_or_exp, and_exp, equality_exp, relational_exp, shift_exp, additive_exp, multiplicative_exp, cast_exp, unary_exp, postfix_exp, primary_exp, constant, unary_operator, 
Uunique
case	 = 	1
!=	 = 	1
else	 = 	1
&&	 = 	1
return	 = 	1
do	 = 	1
volatile	 = 	1
typedef	 = 	1
=	 = 	3
>	 = 	1
?	 = 	1
:	 = 	5
;	 = 	10
<	 = 	1
double	 = 	1
|=	 = 	1
auto	 = 	1
STRING	 = 	1
CHAR_CONST	 = 	1
extern	 = 	1
<<=	 = 	1
float	 = 	1
...	 = 	1
ID	 = 	15
while	 = 	2
||	 = 	1
]	 = 	3
^	 = 	1
union	 = 	1
default	 = 	1
[	 = 	3
if	 = 	2
SKIP	 = 	1
switch	 = 	1
^=	 = 	1
enum	 = 	2
const	 = 	1
long	 = 	1
sizeof	 = 	1
ENUMERATION_CONST	 = 	1
FLOAT_CONST	 = 	1
INT_CONST	 = 	1
signed	 = 	1
->	 = 	1
>>	 = 	1
}	 = 	4
~	 = 	1
--	 = 	2
break	 = 	1
++	 = 	2
%	 = 	1
{	 = 	4
|	 = 	1
==	 = 	1
unsigned	 = 	1
<<	 = 	1
int	 = 	1
static	 = 	1
void	 = 	1
<=	 = 	1
goto	 = 	1
-	 = 	2
.	 = 	1
/	 = 	1
>=	 = 	1
)	 = 	14
*	 = 	4
+	 = 	2
register	 = 	1
-=	 = 	1
&	 = 	2
continue	 = 	1
(	 = 	14
!	 = 	1
/=	 = 	1
char	 = 	1
,	 = 	10
%=	 = 	1
+=	 = 	1
short	 = 	1
struct	 = 	1
>>=	 = 	1
*=	 = 	1
for	 = 	1
&=	 = 	1
Token 	1	 = 	65
Token 	2	 = 	8
Token 	3	 = 	3
Token 	4	 = 	3
Token 	5	 = 	1
Token 	6	 = 	nil
Token 	7	 = 	nil
Token 	8	 = 	nil
Token 	9	 = 	nil
Token 	10	 = 	2
Unique tokens (# 64): !, !=, %, %=, &&, &=, *=, +=, -=, ->, ., ..., /, /=, <, <<, <<=, <=, ==, >, >=, >>, >>=, ?, CHAR_CONST, ENUMERATION_CONST, FLOAT_CONST, INT_CONST, STRING, ^, ^=, auto, break, case, char, const, continue, default, do, double, else, extern, float, for, goto, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, |, |=, ||, ~
calcTail
translation_unit: 	;, }
external_decl: 	;, }
function_def: 	}
decl_spec: 	__ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
decl: 	;
storage_class_spec: 	auto, extern, register, static, typedef
type_spec: 	__ID, char, double, float, int, long, short, signed, unsigned, void, }
type_qualifier: 	const, volatile
struct_or_union: 	struct, union
init_declarator_list: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
init_declarator: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
struct_decl: 	;
spec_qualifier_list: 	__ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
spec_qualifier: 	__ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
struct_declarator: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
enumerator: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
declarator: 	), ], __ID
direct_declarator: 	), ], __ID
pointer: 	*, const, volatile
param_type_list: 	), *, ..., ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
param_decl: 	), *, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
id_list: 	__ID
initializer: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
type_name: 	), *, ], __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
abstract_declarator: 	), *, ], const, volatile
direct_abstract_declarator: 	), ]
typedef_name: 	__ID
stat: 	;, }
compound_stat: 	}
exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
assignment_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
assignment_operator: 	%=, &=, *=, +=, -=, /=, <<=, =, >>=, ^=, |=
conditional_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
const_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
logical_or_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
logical_and_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
inclusive_or_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
exclusive_or_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
and_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
equality_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
relational_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
shift_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
additive_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
multiplicative_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
cast_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
unary_exp: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
postfix_exp: 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING
primary_exp: 	), __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING
constant: 	__CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __INT_CONST
unary_operator: 	!, &, *, +, -, ~
COMMENT: 	*/
INT_CONST: 	0, 1, 2, 3, 4, 5, 6, 7, 8, L, U, __DIGIT, __XDIGIT, l, u
FLOAT_CONST: 	., F, L, __DIGIT, __XDIGIT, f, l
XDIGIT: 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, a, b, c, d, e, f
DIGIT: 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
CHAR_CONST: 	'
STRING: 	"
ESC_CHAR: 	", ', 0, 1, 2, 3, 4, 5, 6, 7, ?, \\, __XDIGIT, a, b, f, n, r, t, v
ENUMERATION_CONST: 	__ID
ID: 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, _, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z
KEYWORDS: 	auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while
SPACE: 		, 
, , , ,  , __COMMENT
SKIP: 		, 
, , , ,  , __COMMENT, __empty
Global Prefix
translation_unit: 	
external_decl: 	;, }
function_def: 	;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
decl_spec: 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
decl: 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
storage_class_spec: 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
type_spec: 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
type_qualifier: 	), *, ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
struct_or_union: 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
init_declarator_list: 	__ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
init_declarator: 	,, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
struct_decl: 	;, __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
spec_qualifier_list: 	(, sizeof
spec_qualifier: 	;, __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
struct_declarator: 	,, __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
enumerator: 	,, {
declarator: 	(, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
direct_declarator: 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
pointer: 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
param_type_list: 	(
param_decl: 	(, ,
id_list: 	(
initializer: 	,, =, {
type_name: 	(, sizeof
abstract_declarator: 	(, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
direct_abstract_declarator: 	(, *, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
typedef_name: 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
stat: 	), :, ;, do, else, {, }
compound_stat: 	), :, ;, ], __ID, do, else, {, }
exp: 	(, ), :, ;, ?, [, do, else, return, {, }
assignment_exp: 	%=, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^=, do, else, return, {, |=, }
assignment_operator: 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
conditional_exp: 	%=, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^=, case, do, else, return, {, |=, }
const_exp: 	:, =, [, case
logical_or_exp: 	%=, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^=, case, do, else, return, {, |=, }
logical_and_exp: 	%=, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^=, case, do, else, return, {, |=, ||, }
inclusive_or_exp: 	%=, &&, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^=, case, do, else, return, {, |=, ||, }
exclusive_or_exp: 	%=, &&, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^=, case, do, else, return, {, |, |=, ||, }
and_exp: 	%=, &&, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }
equality_exp: 	%=, &, &&, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }
relational_exp: 	!=, %=, &, &&, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, ==, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }
shift_exp: 	!=, %=, &, &&, &=, (, ), *=, +=, ,, -=, /=, :, ;, <, <<=, <=, =, ==, >, >=, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }
additive_exp: 	!=, %=, &, &&, &=, (, ), *=, +=, ,, -=, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }
multiplicative_exp: 	!=, %=, &, &&, &=, (, ), *=, +, +=, ,, -, -=, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }
cast_exp: 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }, ~
unary_exp: 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
postfix_exp: 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
primary_exp: 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
constant: 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
unary_operator: 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
COMMENT: 		, 
, , , ,  , __COMMENT
INT_CONST: 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
FLOAT_CONST: 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
XDIGIT: 	__XDIGIT, x
DIGIT: 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, __DIGIT, case, do, else, return, sizeof, {, |, |=, ||, }, ~
CHAR_CONST: 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
STRING: 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
ESC_CHAR: 	
ENUMERATION_CONST: 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
ID: 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, __ID, auto, case, char, const, do, double, else, enum, extern, float, goto, int, long, register, return, short, signed, sizeof, static, struct, typedef, union, unsigned, void, volatile, {, |, |=, ||, }, ~
KEYWORDS: 	
SPACE: 	
SKIP: 	
calcPrefix
logical_and_exp	 -> 
	(logical_and_exp, logical_or_exp): 	%=, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^=, case, do, else, return, {, |=, }
	(logical_and_exp, logical_or_exp): 	||
__auto	 -> 
	(__auto, storage_class_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
__&&	 -> 
	(__&&, logical_and_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__<<=	 -> 
	(__<<=, assignment_operator): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__|=	 -> 
	(__|=, assignment_operator): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
INT_CONST	 -> 
	(INT_CONST, constant): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
type_name	 -> 
	(type_name, cast_exp): 	(
	(type_name, unary_exp): 	sizeof
multiplicative_exp	 -> 
	(multiplicative_exp, additive_exp): 	!=, %=, &, &&, &=, (, ), *=, +=, ,, -=, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }
	(multiplicative_exp, additive_exp): 	+, -
external_decl	 -> 
	(external_decl, translation_unit): 	;, }
struct_declarator	 -> 
	(struct_declarator, struct_decl): 	__ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(struct_declarator, struct_decl): 	,
shift_exp	 -> 
	(shift_exp, relational_exp): 	!=, %=, &, &&, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, ==, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }
	(shift_exp, relational_exp): 	<, <=, >, >=
__||	 -> 
	(__||, logical_or_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__|	 -> 
	(__|, inclusive_or_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
param_type_list	 -> 
	(param_type_list, direct_declarator): 	(
	(param_type_list, direct_abstract_declarator): 	(
__>>=	 -> 
	(__>>=, assignment_operator): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
decl_spec	 -> 
	(decl_spec, param_decl): 	__ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(decl_spec, function_def): 	;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(decl_spec, decl): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
	(decl_spec, decl): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
equality_exp	 -> 
	(equality_exp, and_exp): 	%=, &&, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }
	(equality_exp, and_exp): 	&
and_exp	 -> 
	(and_exp, exclusive_or_exp): 	%=, &&, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^=, case, do, else, return, {, |, |=, ||, }
	(and_exp, exclusive_or_exp): 	^
__const	 -> 
	(__const, type_qualifier): 	), *, ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
__switch	 -> 
	(__switch, stat): 	), :, ;, do, else, {, }
__>>	 -> 
	(__>>, shift_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
direct_declarator	 -> 
	(direct_declarator, declarator): 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
type_spec	 -> 
	(type_spec, decl_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
	(type_spec, spec_qualifier_list): 	__ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(type_spec, spec_qualifier): 	;, __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
stat	 -> 
	(stat, stat): 	do
	(stat, stat): 	:
	(stat, stat): 	)
	(stat, stat): 	)
	(stat, stat): 	:
	(stat, stat): 	else
	(stat, compound_stat): 	;, {, }
	(stat, stat): 	)
	(stat, stat): 	:
	(stat, stat): 	)
	(stat, stat): 	)
initializer	 -> 
	(initializer, initializer): 	{
	(initializer, initializer): 	,
	(initializer, init_declarator): 	=
__/	 -> 
	(__/, multiplicative_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__,	 -> 
	(__,, id_list): 	__ID
	(__,, init_declarator_list): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__,, postfix_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__,, struct_decl): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__,, initializer): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__,, param_type_list): 	), *, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(__,, initializer): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__,, exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__,, type_spec): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__,, param_type_list): 	), *, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
translation_unit	 -> 
__continue	 -> 
	(__continue, stat): 	), :, ;, do, else, {, }
__+	 -> 
	(__+, additive_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__+, unary_operator): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
logical_or_exp	 -> 
	(logical_or_exp, conditional_exp): 	%=, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^=, case, do, else, return, {, |=, }
	(logical_or_exp, conditional_exp): 	%=, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^=, case, do, else, return, {, |=, }
__default	 -> 
	(__default, stat): 	), :, ;, do, else, {, }
__<	 -> 
	(__<, relational_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
SKIP	 -> 
	(SKIP, translation_unit): 	
__...	 -> 
	(__..., param_type_list): 	,
__<<	 -> 
	(__<<, shift_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__sizeof	 -> 
	(__sizeof, unary_exp): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
__;	 -> 
	(__;, stat): 	)
	(__;, struct_decl): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__;, stat): 	(, ), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__;, stat): 	), *, ++, --, :, ;, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, do, double, else, float, int, long, short, signed, unsigned, void, volatile, {, }
	(__;, stat): 	__ID
	(__;, stat): 	break
	(__;, stat): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, return, short, signed, unsigned, void, volatile, }
	(__;, stat): 	continue
	(__;, decl): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(__;, stat): 	), *, ++, --, ;, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__)	 -> 
	(__), stat): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__), stat): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__), direct_abstract_declarator): 	), *, ], const, volatile
	(__), stat): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__), direct_declarator): 	), ], __ID
	(__), primary_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__), direct_declarator): 	(, __ID
	(__), stat): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__), direct_abstract_declarator): 	(, ), *, ..., ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(__), postfix_exp): 	(, ), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__), direct_declarator): 	), *, ..., ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(__), stat): 	), *, ++, --, ;, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__), cast_exp): 	), *, ], __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__), stat): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__return	 -> 
	(__return, stat): 	), :, ;, do, else, {, }
__?	 -> 
	(__?, conditional_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__goto	 -> 
	(__goto, stat): 	), :, ;, do, else, {, }
type_qualifier	 -> 
	(type_qualifier, pointer): 	*, const, volatile
	(type_qualifier, pointer): 	*, const, volatile
	(type_qualifier, decl_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
	(type_qualifier, spec_qualifier): 	;, __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(type_qualifier, spec_qualifier_list): 	__ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__>=	 -> 
	(__>=, relational_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__%	 -> 
	(__%, multiplicative_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
conditional_exp	 -> 
	(conditional_exp, assignment_exp): 	%=, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^=, do, else, return, {, |=, }
	(conditional_exp, conditional_exp): 	:
	(conditional_exp, const_exp): 	:, =, [, case
pointer	 -> 
	(pointer, declarator): 	(, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(pointer, pointer): 	*, const, volatile
	(pointer, abstract_declarator): 	(, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(pointer, abstract_declarator): 	(, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
__signed	 -> 
	(__signed, type_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
exclusive_or_exp	 -> 
	(exclusive_or_exp, inclusive_or_exp): 	%=, &&, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^=, case, do, else, return, {, |=, ||, }
	(exclusive_or_exp, inclusive_or_exp): 	|
__--	 -> 
	(__--, unary_exp): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
	(__--, postfix_exp): 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING
__[	 -> 
	(__[, postfix_exp): 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING
	(__[, direct_abstract_declarator): 	), ]
	(__[, direct_declarator): 	), ], __ID
__float	 -> 
	(__float, type_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
__void	 -> 
	(__void, type_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
__==	 -> 
	(__==, equality_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__case	 -> 
	(__case, stat): 	), :, ;, do, else, {, }
__^=	 -> 
	(__^=, assignment_operator): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
spec_qualifier_list	 -> 
	(spec_qualifier_list, type_name): 	(, sizeof
__(	 -> 
	(__(, direct_declarator): 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(__(, direct_declarator): 	), ], __ID
	(__(, postfix_exp): 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING
	(__(, direct_declarator): 	), ], __ID
	(__(, stat): 	for
	(__(, direct_abstract_declarator): 	), ]
	(__(, primary_exp): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
	(__(, cast_exp): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }, ~
	(__(, stat): 	while
	(__(, stat): 	while
	(__(, stat): 	if
	(__(, stat): 	if
	(__(, direct_abstract_declarator): 	(, *, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(__(, stat): 	switch
__break	 -> 
	(__break, stat): 	), :, ;, do, else, {, }
exp	 -> 
	(exp, stat): 	(
	(exp, stat): 	(
	(exp, postfix_exp): 	[
	(exp, primary_exp): 	(
	(exp, stat): 	), :, ;, do, else, {, }
	(exp, stat): 	(
	(exp, stat): 	return
	(exp, stat): 	;
	(exp, stat): 	;
	(exp, conditional_exp): 	?
	(exp, stat): 	(
	(exp, stat): 	(
	(exp, stat): 	(
storage_class_spec	 -> 
	(storage_class_spec, decl_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
declarator	 -> 
	(declarator, init_declarator): 	,, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(declarator, param_decl): 	__ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(declarator, function_def): 	;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(declarator, struct_declarator): 	,, __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(declarator, init_declarator): 	,, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(declarator, direct_declarator): 	(
	(declarator, struct_declarator): 	,, __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__short	 -> 
	(__short, type_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
param_decl	 -> 
	(param_decl, param_type_list): 	(
	(param_decl, param_type_list): 	,
__*	 -> 
	(__*, unary_operator): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
	(__*, pointer): 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(__*, pointer): 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(__*, multiplicative_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
relational_exp	 -> 
	(relational_exp, equality_exp): 	%=, &, &&, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }
	(relational_exp, equality_exp): 	!=, ==
__register	 -> 
	(__register, storage_class_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
__do	 -> 
	(__do, stat): 	), :, ;, do, else, {, }
__double	 -> 
	(__double, type_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
assignment_exp	 -> 
	(assignment_exp, exp): 	,
	(assignment_exp, postfix_exp): 	(
	(assignment_exp, assignment_exp): 	%=, &=, *=, +=, -=, /=, <<=, =, >>=, ^=, |=
	(assignment_exp, initializer): 	,, =, {
	(assignment_exp, postfix_exp): 	,
	(assignment_exp, exp): 	(, ), :, ;, ?, [, do, else, return, {, }
__^	 -> 
	(__^, exclusive_or_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__+=	 -> 
	(__+=, assignment_operator): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
init_declarator_list	 -> 
	(init_declarator_list, decl): 	__ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
additive_exp	 -> 
	(additive_exp, shift_exp): 	!=, %=, &, &&, &=, (, ), *=, +=, ,, -=, /=, :, ;, <, <<=, <=, =, ==, >, >=, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }
	(additive_exp, shift_exp): 	<<, >>
__<=	 -> 
	(__<=, relational_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
FLOAT_CONST	 -> 
	(FLOAT_CONST, constant): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
__if	 -> 
	(__if, stat): 	), :, ;, do, else, {, }
	(__if, stat): 	), :, ;, do, else, {, }
__&=	 -> 
	(__&=, assignment_operator): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
ID	 -> 
	(ID, primary_exp): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
	(ID, id_list): 	,
	(ID, postfix_exp): 	.
	(ID, type_spec): 	enum
	(ID, type_spec): 	struct, union
	(ID, postfix_exp): 	->
	(ID, direct_declarator): 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(ID, stat): 	goto
	(ID, type_spec): 	struct, union
	(ID, id_list): 	(
	(ID, stat): 	), :, ;, do, else, {, }
	(ID, enumerator): 	,, {
	(ID, typedef_name): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
	(ID, enumerator): 	,, {
	(ID, type_spec): 	enum
struct_decl	 -> 
	(struct_decl, type_spec): 	;
	(struct_decl, struct_decl): 	__ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__for	 -> 
	(__for, stat): 	), :, ;, do, else, {, }
__unsigned	 -> 
	(__unsigned, type_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
__=	 -> 
	(__=, enumerator): 	__ID
	(__=, assignment_operator): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__=, init_declarator): 	), ], __ID
decl	 -> 
	(decl, compound_stat): 	;, {
	(decl, function_def): 	), ;, ], __ID
	(decl, external_decl): 	;, }
	(decl, decl): 	__ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
__typedef	 -> 
	(__typedef, storage_class_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
__-	 -> 
	(__-, additive_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__-, unary_operator): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
__!=	 -> 
	(__!=, equality_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
enumerator	 -> 
	(enumerator, type_spec): 	{
	(enumerator, type_spec): 	,
__}	 -> 
	(__}, initializer): 	), *, ++, ,, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__}, compound_stat): 	;, {, }
	(__}, type_spec): 	;
	(__}, type_spec): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
STRING	 -> 
	(STRING, primary_exp): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
__~	 -> 
	(__~, unary_operator): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
ENUMERATION_CONST	 -> 
	(ENUMERATION_CONST, constant): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
CHAR_CONST	 -> 
	(CHAR_CONST, constant): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
struct_or_union	 -> 
	(struct_or_union, type_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
	(struct_or_union, type_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
__!	 -> 
	(__!, unary_operator): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
__->	 -> 
	(__->, postfix_exp): 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING
__.	 -> 
	(__., postfix_exp): 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING
primary_exp	 -> 
	(primary_exp, postfix_exp): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
id_list	 -> 
	(id_list, direct_declarator): 	(
__while	 -> 
	(__while, stat): 	), :, ;, do, else, {, }
	(__while, stat): 	;, }
typedef_name	 -> 
	(typedef_name, type_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
unary_operator	 -> 
	(unary_operator, unary_exp): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
__++	 -> 
	(__++, unary_exp): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
	(__++, postfix_exp): 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING
postfix_exp	 -> 
	(postfix_exp, unary_exp): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
__%=	 -> 
	(__%=, assignment_operator): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
const_exp	 -> 
	(const_exp, stat): 	case
	(const_exp, enumerator): 	=
	(const_exp, direct_declarator): 	[
	(const_exp, direct_abstract_declarator): 	[
	(const_exp, struct_declarator): 	:
direct_abstract_declarator	 -> 
	(direct_abstract_declarator, abstract_declarator): 	(, *, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
unary_exp	 -> 
	(unary_exp, unary_exp): 	++
	(unary_exp, cast_exp): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }, ~
	(unary_exp, assignment_exp): 	%=, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^=, do, else, return, {, |=, }
	(unary_exp, unary_exp): 	sizeof
	(unary_exp, unary_exp): 	--
cast_exp	 -> 
	(cast_exp, multiplicative_exp): 	%, *, /
	(cast_exp, cast_exp): 	)
	(cast_exp, unary_exp): 	!, &, *, +, -, ~
	(cast_exp, multiplicative_exp): 	!=, %=, &, &&, &=, (, ), *=, +, +=, ,, -, -=, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }
__int	 -> 
	(__int, type_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
__]	 -> 
	(__], postfix_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__], direct_abstract_declarator): 	), *, ++, --, [, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__], direct_declarator): 	), *, ++, --, [, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__*=	 -> 
	(__*=, assignment_operator): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__else	 -> 
	(__else, stat): 	;, }
__{	 -> 
	(__{, type_spec): 	__ID, struct, union
	(__{, type_spec): 	__ID, enum
	(__{, compound_stat): 	), :, ;, ], __ID, do, else, {, }
	(__{, initializer): 	,, =, {
__-=	 -> 
	(__-=, assignment_operator): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__union	 -> 
	(__union, struct_or_union): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
function_def	 -> 
	(function_def, external_decl): 	;, }
	(function_def, function_def): 	__ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
assignment_operator	 -> 
	(assignment_operator, assignment_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__>	 -> 
	(__>, relational_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__:	 -> 
	(__:, stat): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__:, struct_declarator): 	), ,, ], __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__:, conditional_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__:, stat): 	default
	(__:, stat): 	__ID
__&	 -> 
	(__&, and_exp): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(__&, unary_operator): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
__volatile	 -> 
	(__volatile, type_qualifier): 	), *, ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
inclusive_or_exp	 -> 
	(inclusive_or_exp, logical_and_exp): 	%=, &=, (, ), *=, +=, ,, -=, /=, :, ;, <<=, =, >>=, ?, [, ^=, case, do, else, return, {, |=, ||, }
	(inclusive_or_exp, logical_and_exp): 	&&
constant	 -> 
	(constant, primary_exp): 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~
__long	 -> 
	(__long, type_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
spec_qualifier	 -> 
	(spec_qualifier, struct_decl): 	;, __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(spec_qualifier, struct_decl): 	;, __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
__extern	 -> 
	(__extern, storage_class_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
__struct	 -> 
	(__struct, struct_or_union): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
__enum	 -> 
	(__enum, type_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
	(__enum, type_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
__/=	 -> 
	(__/=, assignment_operator): 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
compound_stat	 -> 
	(compound_stat, function_def): 	), ;, ], __ID
	(compound_stat, stat): 	), :, ;, do, else, {, }
init_declarator	 -> 
	(init_declarator, init_declarator_list): 	__ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
	(init_declarator, init_declarator_list): 	,
__char	 -> 
	(__char, type_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
__static	 -> 
	(__static, storage_class_spec): 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }
abstract_declarator	 -> 
	(abstract_declarator, direct_abstract_declarator): 	(
	(abstract_declarator, type_name): 	__ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }
	(abstract_declarator, param_decl): 	__ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }
SKIP	 pref := 		 flw := 	$, (, *, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
true33	SKIP
foi true22	SKIP	table: 0x55b6bee48390	nil
symPrefUniVar	external_decl	translation_unit	true
passou um
symPrefUniVar	function_def	external_decl	false
symPrefUniVar	decl	external_decl	false
symPrefUniVar	declarator	function_def	false
symPrefUniVar	decl	function_def	false
symPrefUniVar	compound_stat	function_def	false
symPrefUniVar	decl_spec	function_def	false
symPrefUniVar	function_def	function_def	false
symPrefUniVar	storage_class_spec	decl_spec	true
passou um
passou três	storage_class_spec	decl_spec
symPrefUniVar	type_spec	decl_spec	false
symPrefUniVar	type_qualifier	decl_spec	false
symPrefUniVar	decl_spec	decl	false
symPrefUniVar	init_declarator_list	decl	true
passou um
__;	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	!, $, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, auto, break, case, char, const, continue, default, do, double, enum, extern, float, for, goto, if, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while, {, }, ~
symPrefUniVar	decl_spec	decl	false
symPrefUniVar	decl	decl	false
__auto	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	(, ), *, ,, ;, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
true33	auto
__register	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	(, ), *, ,, ;, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
true33	register
__static	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	(, ), *, ,, ;, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
true33	static
__extern	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	(, ), *, ,, ;, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
true33	extern
__typedef	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	(, ), *, ,, ;, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
true33	typedef
__void	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	void
__char	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	char
__short	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	short
__int	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	int
__long	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	long
__float	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	float
__double	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	double
__signed	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	signed
__unsigned	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	unsigned
symPrefUniVar	typedef_name	type_spec	true
passou um
__enum	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	__ID, {
Subset	__enum	rule = 	type_spec	total = 	2
ID	 pref := 	enum	 flw := 	{
UniqueFlw	ID	rule = 	type_spec	pref = 	enum	flw = 	{	nInt = 	1	nEq = 	1	pflw = 	table: 0x55b6bef02ac0
__{	 pref := 	__ID, enum	 flw := 	__ID
symPrefUniVar	enumerator	type_spec	true
passou um
__,	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	__ID
symPrefUniVar	enumerator	type_spec	true
passou um
__}	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
__enum	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	__ID
true33	enum
Subset	__enum	rule = 	type_spec	total = 	2
ID	 pref := 	enum	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	ID
UniqueFlw	ID	rule = 	type_spec	pref = 	enum	flw = 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }	nInt = 	1	nEq = 	1	pflw = 	nil
symPrefUniVar	struct_or_union	type_spec	false
ID	 pref := 	struct, union	 flw := 	{
UniqueFlw	ID	rule = 	type_spec	pref = 	struct, union	flw = 	{	nInt = 	1	nEq = 	1	pflw = 	table: 0x55b6bef03dd0
__{	 pref := 	__ID, struct, union	 flw := 	__ID, char, const, double, enum, float, int, long, short, signed, struct, union, unsigned, void, volatile, }
symPrefUniVar	struct_decl	type_spec	true
passou um
__}	 pref := 	;	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
symPrefUniVar	struct_or_union	type_spec	true
passou um
passou três	struct_or_union	type_spec
ID	 pref := 	struct, union	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	ID
UniqueFlw	ID	rule = 	type_spec	pref = 	struct, union	flw = 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }	nInt = 	1	nEq = 	1	pflw = 	nil
__const	 pref := 	), *, ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	const
__volatile	 pref := 	), *, ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	volatile
__struct	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	__ID, {
true33	struct
__union	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	__ID, {
true33	union
symPrefUniVar	init_declarator	init_declarator_list	true
passou um
__,	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	(, *, __ID
symPrefUniVar	init_declarator	init_declarator_list	true
passou um
symPrefUniVar	declarator	init_declarator	false
__=	 pref := 	), ], __ID	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, {, ~
symPrefUniVar	initializer	init_declarator	true
passou um
passou três	initializer	init_declarator
symPrefUniVar	declarator	init_declarator	false
symPrefUniVar	spec_qualifier	struct_decl	false
symPrefUniVar	struct_declarator	struct_decl	true
passou um
__,	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	(, *, :, __ID
symPrefUniVar	struct_declarator	struct_decl	true
passou um
__;	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	__ID, char, const, double, enum, float, int, long, short, signed, struct, union, unsigned, void, volatile, }
symPrefUniVar	spec_qualifier	struct_decl	true
passou um
symPrefUniVar	struct_decl	struct_decl	true
passou um
symPrefUniVar	type_spec	spec_qualifier_list	false
symPrefUniVar	type_qualifier	spec_qualifier_list	false
symPrefUniVar	type_spec	spec_qualifier	false
symPrefUniVar	type_qualifier	spec_qualifier	false
symPrefUniVar	declarator	struct_declarator	false
__:	 pref := 	), ,, ], __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	const_exp	struct_declarator	true
passou um
symPrefUniVar	declarator	struct_declarator	false
ID	 pref := 	,, {	 flw := 	=
__=	 pref := 	__ID	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	const_exp	enumerator	true
passou um
passou três	const_exp	enumerator
ID	 pref := 	,, {	 flw := 	,, }
symPrefUniVar	pointer	declarator	false
symPrefUniVar	direct_declarator	declarator	true
passou um
ID	 pref := 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	(, ), ,, :, ;, =, [, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, {
__(	 pref := 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	(, *, __ID
symPrefUniVar	declarator	direct_declarator	true
passou um
__)	 pref := 	), ], __ID	 flw := 	(, ), ,, :, ;, =, [, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, {
__[	 pref := 	), ], __ID	 flw := 	!, &, (, *, +, ++, -, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	const_exp	direct_declarator	false
__]	 pref := 	), *, ++, --, [, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	(, ), ,, :, ;, =, [, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, {
Subset	__]	rule = 	direct_declarator	total = 	3
__(	 pref := 	), ], __ID	 flw := 	__ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
symPrefUniVar	param_type_list	direct_declarator	false
__)	 pref := 	), *, ..., ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	(, ), ,, :, ;, =, [, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, {
__(	 pref := 	), ], __ID	 flw := 	), __ID
symPrefUniVar	id_list	direct_declarator	true
passou um
__)	 pref := 	(, __ID	 flw := 	(, ), ,, :, ;, =, [, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, {
__*	 pref := 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	*, const, volatile
symPrefUniVar	type_qualifier	pointer	false
symPrefUniVar	pointer	pointer	false
__*	 pref := 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, const, volatile, |, |=, ||, }
symPrefUniVar	type_qualifier	pointer	false
symPrefUniVar	param_decl	param_type_list	true
passou um
__,	 pref := 	), *, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	__ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
symPrefUniVar	param_decl	param_type_list	true
passou um
__,	 pref := 	), *, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	...
UniqueFlw	__,	rule = 	param_type_list	pref = 	), *, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	flw = 	...	nInt = 	9	nEq = 	2	pflw = 	table: 0x55b6bef0d7c0
__...	 pref := 	,	 flw := 	)
true33	...
symPrefUniVar	decl_spec	param_decl	false
symPrefUniVar	declarator	param_decl	false
symPrefUniVar	abstract_declarator	param_decl	false
ID	 pref := 	(	 flw := 	), ,
__,	 pref := 	__ID	 flw := 	__ID
ID	 pref := 	,	 flw := 	), ,
__{	 pref := 	,, =, {	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, {, ~
symPrefUniVar	initializer	initializer	true
passou um
__,	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, {, ~
symPrefUniVar	initializer	initializer	true
passou um
__,	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	}
UniqueFlw	__,	rule = 	initializer	pref = 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	flw = 	}	nInt = 	9	nEq = 	7	pflw = 	table: 0x55b6bef0ffa0
__}	 pref := 	), *, ++, ,, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	,, ;, }
symPrefUniVar	assignment_exp	initializer	false
symPrefUniVar	spec_qualifier_list	type_name	true
passou um
symPrefUniVar	abstract_declarator	type_name	false
symPrefUniVar	pointer	abstract_declarator	false
symPrefUniVar	pointer	abstract_declarator	false
symPrefUniVar	direct_abstract_declarator	abstract_declarator	true
passou um
__(	 pref := 	(, *, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	(, *
symPrefUniVar	abstract_declarator	direct_abstract_declarator	true
passou um
__)	 pref := 	), *, ], const, volatile	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
__[	 pref := 	), ]	 flw := 	!, &, (, *, +, ++, -, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	const_exp	direct_abstract_declarator	false
__]	 pref := 	), *, ++, --, [, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
Subset	__]	rule = 	direct_abstract_declarator	total = 	3
__(	 pref := 	), ]	 flw := 	), __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
symPrefUniVar	param_type_list	direct_abstract_declarator	false
__)	 pref := 	(, ), *, ..., ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
ID	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
ID	 pref := 	), :, ;, do, else, {, }	 flw := 	:
__:	 pref := 	__ID	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
symPrefUniVar	stat	stat	false
__case	 pref := 	), :, ;, do, else, {, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	case
foi true22	case	const_exp	nil
symPrefUniVar	const_exp	stat	true
passou um
passou três	const_exp	stat
__:	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
symPrefUniVar	stat	stat	false
__default	 pref := 	), :, ;, do, else, {, }	 flw := 	:
true33	default
foi true22	default	:	nil
__:	 pref := 	default	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
true33	:
foi true22	:	stat	true
symPrefUniVar	stat	stat	true
passou um
passou três	stat	stat
symPrefUniVar	exp	stat	false
__;	 pref := 	), *, ++, --, :, ;, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, do, double, else, float, int, long, short, signed, unsigned, void, volatile, {, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, else, for, goto, if, return, sizeof, switch, while, {, }, ~
symPrefUniVar	compound_stat	stat	false
__if	 pref := 	), :, ;, do, else, {, }	 flw := 	(
Subset	__if	rule = 	stat	total = 	2
__(	 pref := 	if	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	exp	stat	false
__)	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
symPrefUniVar	stat	stat	false
__else	 pref := 	;, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
true33	else
foi true22	else	stat	nil
symPrefUniVar	stat	stat	true
passou um
passou três	stat	stat
__if	 pref := 	), :, ;, do, else, {, }	 flw := 	(
true33	if
Subset	__if	rule = 	stat	total = 	2
__(	 pref := 	if	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	(
symPrefUniVar	exp	stat	false
__)	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
symPrefUniVar	stat	stat	false
__switch	 pref := 	), :, ;, do, else, {, }	 flw := 	(
true33	switch
foi true22	switch	(	nil
__(	 pref := 	switch	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	(
foi true22	(	exp	true
symPrefUniVar	exp	stat	false
__)	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
symPrefUniVar	stat	stat	false
__while	 pref := 	), :, ;, do, else, {, }	 flw := 	(
Subset	__while	rule = 	stat	total = 	2
__(	 pref := 	while	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	exp	stat	false
__)	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
symPrefUniVar	stat	stat	false
__do	 pref := 	), :, ;, do, else, {, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
true33	do
foi true22	do	stat	nil
symPrefUniVar	stat	stat	true
passou um
passou três	stat	stat
__while	 pref := 	;, }	 flw := 	(
true33	while
__(	 pref := 	while	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	(
symPrefUniVar	exp	stat	false
__)	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	;
__;	 pref := 	)	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, else, for, goto, if, return, sizeof, switch, while, {, }, ~
__for	 pref := 	), :, ;, do, else, {, }	 flw := 	(
true33	for
foi true22	for	(	nil
__(	 pref := 	for	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	(
foi true22	(	table: 0x55b6bee48550	true
symPrefUniVar	exp	stat	false
__;	 pref := 	(, ), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	exp	stat	false
__;	 pref := 	), *, ++, --, ;, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, ), *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	exp	stat	true
passou um
__)	 pref := 	), *, ++, --, ;, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
symPrefUniVar	stat	stat	true
passou um
__goto	 pref := 	), :, ;, do, else, {, }	 flw := 	__ID
true33	goto
foi true22	goto	ID	nil
ID	 pref := 	goto	 flw := 	;
true33	ID
foi true22	ID	;	true
__;	 pref := 	__ID	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, else, for, goto, if, return, sizeof, switch, while, {, }, ~
__continue	 pref := 	), :, ;, do, else, {, }	 flw := 	;
true33	continue
foi true22	continue	;	nil
__;	 pref := 	continue	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, else, for, goto, if, return, sizeof, switch, while, {, }, ~
true33	;
__break	 pref := 	), :, ;, do, else, {, }	 flw := 	;
true33	break
foi true22	break	;	nil
__;	 pref := 	break	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, else, for, goto, if, return, sizeof, switch, while, {, }, ~
true33	;
__return	 pref := 	), :, ;, do, else, {, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	return
foi true22	return	table: 0x55b6bee5f4c0	nil
symPrefUniVar	exp	stat	true
passou um
passou três	exp	stat
__;	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, return, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, else, for, goto, if, return, sizeof, switch, while, {, }, ~
__{	 pref := 	), :, ;, ], __ID, do, else, {, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, auto, break, case, char, const, continue, default, do, double, enum, extern, float, for, goto, if, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while, {, }, ~
symPrefUniVar	decl	compound_stat	false
symPrefUniVar	stat	compound_stat	true
passou um
__}	 pref := 	;, {, }	 flw := 	!, $, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while, {, }, ~
symPrefUniVar	assignment_exp	exp	false
__,	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	assignment_exp	exp	false
symPrefUniVar	unary_exp	assignment_exp	false
symPrefUniVar	assignment_operator	assignment_exp	true
passou um
symPrefUniVar	assignment_exp	assignment_exp	false
symPrefUniVar	conditional_exp	assignment_exp	false
__=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
Subset	__=	rule = 	assignment_operator	total = 	3
__*=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	*=
__/=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	/=
__%=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	%=
__+=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	+=
__-=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	-=
__<<=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	<<=
__>>=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	>>=
__&=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	&=
__^=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	^=
__|=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	|=
symPrefUniVar	logical_or_exp	conditional_exp	false
__?	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	?
foi true22	?	exp	nil
symPrefUniVar	exp	conditional_exp	true
passou um
passou três	exp	conditional_exp
__:	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	conditional_exp	conditional_exp	false
symPrefUniVar	logical_or_exp	conditional_exp	true
passou um
symPrefUniVar	conditional_exp	const_exp	false
symPrefUniVar	logical_and_exp	logical_or_exp	true
passou um
__||	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	||
symPrefUniVar	logical_and_exp	logical_or_exp	true
passou um
passou três	logical_and_exp	logical_or_exp
symPrefUniVar	inclusive_or_exp	logical_and_exp	true
passou um
__&&	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	&&
symPrefUniVar	inclusive_or_exp	logical_and_exp	true
passou um
passou três	inclusive_or_exp	logical_and_exp
symPrefUniVar	exclusive_or_exp	inclusive_or_exp	true
passou um
__|	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	|
symPrefUniVar	exclusive_or_exp	inclusive_or_exp	true
passou um
passou três	exclusive_or_exp	inclusive_or_exp
symPrefUniVar	and_exp	exclusive_or_exp	true
passou um
__^	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	^
symPrefUniVar	and_exp	exclusive_or_exp	true
passou um
passou três	and_exp	exclusive_or_exp
symPrefUniVar	equality_exp	and_exp	true
passou um
__&	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	equality_exp	and_exp	true
passou um
passou três	equality_exp	and_exp
symPrefUniVar	relational_exp	equality_exp	true
passou um
__==	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	==
__!=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	!=
symPrefUniVar	relational_exp	equality_exp	true
passou um
passou três	relational_exp	equality_exp
symPrefUniVar	shift_exp	relational_exp	true
passou um
__<=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	<=
__>=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	>=
__<	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	<
__>	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	>
symPrefUniVar	shift_exp	relational_exp	true
passou um
passou três	shift_exp	relational_exp
symPrefUniVar	additive_exp	shift_exp	true
passou um
__<<	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	<<
__>>	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	>>
symPrefUniVar	additive_exp	shift_exp	true
passou um
passou três	additive_exp	shift_exp
symPrefUniVar	multiplicative_exp	additive_exp	true
passou um
__+	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
__-	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	multiplicative_exp	additive_exp	true
passou um
passou três	multiplicative_exp	additive_exp
symPrefUniVar	cast_exp	multiplicative_exp	false
__*	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
__/	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	/
__%	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	%
symPrefUniVar	cast_exp	multiplicative_exp	false
__(	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }, ~	 flw := 	__ID, char, const, double, enum, float, int, long, short, signed, struct, union, unsigned, void, volatile
symPrefUniVar	type_name	cast_exp	true
passou um
__)	 pref := 	), *, ], __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	cast_exp	cast_exp	false
symPrefUniVar	unary_exp	cast_exp	false
__++	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	unary_exp	unary_exp	true
passou um
__--	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	unary_exp	unary_exp	true
passou um
symPrefUniVar	unary_operator	unary_exp	true
passou um
symPrefUniVar	cast_exp	unary_exp	false
__sizeof	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, enum, float, int, long, short, signed, sizeof, struct, union, unsigned, void, volatile, ~
true33	sizeof
foi true22	sizeof	table: 0x55b6beeb0df0	nil
symPrefUniVar	type_name	unary_exp	true
passou um
symPrefUniVar	unary_exp	unary_exp	true
passou um
passou três	unary_exp	unary_exp
symPrefUniVar	postfix_exp	unary_exp	true
passou um
symPrefUniVar	primary_exp	postfix_exp	true
passou um
__[	 pref := 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
Subset	__[	rule = 	postfix_exp	total = 	3
symPrefUniVar	exp	postfix_exp	true
passou um
passou três	exp	postfix_exp
__]	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
__(	 pref := 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING	 flw := 	!, &, (, ), *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	assignment_exp	postfix_exp	false
__,	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	assignment_exp	postfix_exp	false
__)	 pref := 	(, ), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
__.	 pref := 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING	 flw := 	__ID
true33	.
ID	 pref := 	.	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
true33	ID
__->	 pref := 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING	 flw := 	__ID
true33	->
ID	 pref := 	->	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
true33	ID
__++	 pref := 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
__--	 pref := 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
ID	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
STRING	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
true33	STRING
symPrefUniVar	constant	primary_exp	true
passou um
passou três	constant	primary_exp
__(	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	exp	primary_exp	false
__)	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
INT_CONST	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
true33	INT_CONST
CHAR_CONST	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
true33	CHAR_CONST
FLOAT_CONST	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
true33	FLOAT_CONST
ENUMERATION_CONST	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
true33	ENUMERATION_CONST
__&	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
__*	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
__+	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
__-	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
__~	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	~
__!	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	!
unique var 	external_decl
Unique usage	external_decl
unique var 	decl
unique var 	const_exp
unique var 	stat
unique var 	stat
unique var 	stat
unique var 	exp
unique var 	stat
unique var 	exp
unique var 	stat
unique var 	stat
unique var 	exp
unique var 	exp
unique var 	exp
unique var 	exp
unique var 	stat
unique var 	exp
unique var 	exp
unique var 	conditional_exp
unique var 	logical_and_exp
unique var 	inclusive_or_exp
unique var 	exclusive_or_exp
unique var 	and_exp
unique var 	relational_exp
unique var 	shift_exp
unique var 	additive_exp
unique var 	unary_exp
SKIP	 pref := 		 flw := 	$, (, *, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
true33	SKIP
foi true22	SKIP	table: 0x55b6bee48390	true
symPrefUniVar	external_decl	translation_unit	true
passou um
symPrefUniVar	function_def	external_decl	false
symPrefUniVar	decl	external_decl	false
symPrefUniVar	declarator	function_def	false
symPrefUniVar	decl	function_def	false
symPrefUniVar	compound_stat	function_def	false
symPrefUniVar	decl_spec	function_def	false
symPrefUniVar	function_def	function_def	false
symPrefUniVar	storage_class_spec	decl_spec	true
passou um
passou três	storage_class_spec	decl_spec
symPrefUniVar	type_spec	decl_spec	false
symPrefUniVar	type_qualifier	decl_spec	false
symPrefUniVar	decl_spec	decl	false
symPrefUniVar	init_declarator_list	decl	true
passou um
__;	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	!, $, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, auto, break, case, char, const, continue, default, do, double, enum, extern, float, for, goto, if, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while, {, }, ~
symPrefUniVar	decl_spec	decl	false
symPrefUniVar	decl	decl	false
__auto	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	(, ), *, ,, ;, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
true33	auto
__register	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	(, ), *, ,, ;, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
true33	register
__static	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	(, ), *, ,, ;, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
true33	static
__extern	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	(, ), *, ,, ;, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
true33	extern
__typedef	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	(, ), *, ,, ;, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
true33	typedef
__void	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	void
__char	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	char
__short	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	short
__int	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	int
__long	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	long
__float	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	float
__double	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	double
__signed	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	signed
__unsigned	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	unsigned
symPrefUniVar	typedef_name	type_spec	true
passou um
__enum	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	__ID, {
Subset	__enum	rule = 	type_spec	total = 	2
ID	 pref := 	enum	 flw := 	{
UniqueFlw	ID	rule = 	type_spec	pref = 	enum	flw = 	{	nInt = 	1	nEq = 	1	pflw = 	table: 0x55b6bef02ac0
__{	 pref := 	__ID, enum	 flw := 	__ID
symPrefUniVar	enumerator	type_spec	true
passou um
__,	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	__ID
symPrefUniVar	enumerator	type_spec	true
passou um
__}	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
__enum	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	__ID
true33	enum
Subset	__enum	rule = 	type_spec	total = 	2
ID	 pref := 	enum	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	ID
UniqueFlw	ID	rule = 	type_spec	pref = 	enum	flw = 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }	nInt = 	1	nEq = 	1	pflw = 	nil
symPrefUniVar	struct_or_union	type_spec	false
ID	 pref := 	struct, union	 flw := 	{
UniqueFlw	ID	rule = 	type_spec	pref = 	struct, union	flw = 	{	nInt = 	1	nEq = 	1	pflw = 	table: 0x55b6bef03dd0
__{	 pref := 	__ID, struct, union	 flw := 	__ID, char, const, double, enum, float, int, long, short, signed, struct, union, unsigned, void, volatile, }
symPrefUniVar	struct_decl	type_spec	true
passou um
__}	 pref := 	;	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
symPrefUniVar	struct_or_union	type_spec	true
passou um
passou três	struct_or_union	type_spec
ID	 pref := 	struct, union	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	ID
UniqueFlw	ID	rule = 	type_spec	pref = 	struct, union	flw = 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }	nInt = 	1	nEq = 	1	pflw = 	nil
__const	 pref := 	), *, ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	const
__volatile	 pref := 	), *, ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
true33	volatile
__struct	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	__ID, {
true33	struct
__union	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	__ID, {
true33	union
symPrefUniVar	init_declarator	init_declarator_list	true
passou um
__,	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	(, *, __ID
symPrefUniVar	init_declarator	init_declarator_list	true
passou um
symPrefUniVar	declarator	init_declarator	false
__=	 pref := 	), ], __ID	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, {, ~
symPrefUniVar	initializer	init_declarator	true
passou um
passou três	initializer	init_declarator
symPrefUniVar	declarator	init_declarator	false
symPrefUniVar	spec_qualifier	struct_decl	false
symPrefUniVar	struct_declarator	struct_decl	true
passou um
__,	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	(, *, :, __ID
symPrefUniVar	struct_declarator	struct_decl	true
passou um
__;	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	__ID, char, const, double, enum, float, int, long, short, signed, struct, union, unsigned, void, volatile, }
symPrefUniVar	spec_qualifier	struct_decl	true
passou um
symPrefUniVar	struct_decl	struct_decl	true
passou um
symPrefUniVar	type_spec	spec_qualifier_list	false
symPrefUniVar	type_qualifier	spec_qualifier_list	false
symPrefUniVar	type_spec	spec_qualifier	false
symPrefUniVar	type_qualifier	spec_qualifier	false
symPrefUniVar	declarator	struct_declarator	false
__:	 pref := 	), ,, ], __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	const_exp	struct_declarator	true
passou um
symPrefUniVar	declarator	struct_declarator	false
ID	 pref := 	,, {	 flw := 	=
__=	 pref := 	__ID	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	const_exp	enumerator	true
passou um
passou três	const_exp	enumerator
ID	 pref := 	,, {	 flw := 	,, }
symPrefUniVar	pointer	declarator	false
symPrefUniVar	direct_declarator	declarator	true
passou um
ID	 pref := 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	(, ), ,, :, ;, =, [, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, {
__(	 pref := 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	(, *, __ID
symPrefUniVar	declarator	direct_declarator	true
passou um
__)	 pref := 	), ], __ID	 flw := 	(, ), ,, :, ;, =, [, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, {
__[	 pref := 	), ], __ID	 flw := 	!, &, (, *, +, ++, -, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	const_exp	direct_declarator	false
__]	 pref := 	), *, ++, --, [, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	(, ), ,, :, ;, =, [, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, {
Subset	__]	rule = 	direct_declarator	total = 	3
__(	 pref := 	), ], __ID	 flw := 	__ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
symPrefUniVar	param_type_list	direct_declarator	false
__)	 pref := 	), *, ..., ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	(, ), ,, :, ;, =, [, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, {
__(	 pref := 	), ], __ID	 flw := 	), __ID
symPrefUniVar	id_list	direct_declarator	true
passou um
__)	 pref := 	(, __ID	 flw := 	(, ), ,, :, ;, =, [, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, {
__*	 pref := 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	*, const, volatile
symPrefUniVar	type_qualifier	pointer	false
symPrefUniVar	pointer	pointer	false
__*	 pref := 	(, *, ,, ;, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, const, volatile, |, |=, ||, }
symPrefUniVar	type_qualifier	pointer	false
symPrefUniVar	param_decl	param_type_list	true
passou um
__,	 pref := 	), *, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	__ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
symPrefUniVar	param_decl	param_type_list	true
passou um
__,	 pref := 	), *, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	...
UniqueFlw	__,	rule = 	param_type_list	pref = 	), *, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	flw = 	...	nInt = 	9	nEq = 	2	pflw = 	table: 0x55b6bef0d7c0
__...	 pref := 	,	 flw := 	)
true33	...
symPrefUniVar	decl_spec	param_decl	false
symPrefUniVar	declarator	param_decl	false
symPrefUniVar	abstract_declarator	param_decl	false
ID	 pref := 	(	 flw := 	), ,
__,	 pref := 	__ID	 flw := 	__ID
ID	 pref := 	,	 flw := 	), ,
__{	 pref := 	,, =, {	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, {, ~
symPrefUniVar	initializer	initializer	true
passou um
__,	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, {, ~
symPrefUniVar	initializer	initializer	true
passou um
__,	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	}
UniqueFlw	__,	rule = 	initializer	pref = 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	flw = 	}	nInt = 	9	nEq = 	7	pflw = 	table: 0x55b6bef0ffa0
__}	 pref := 	), *, ++, ,, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	,, ;, }
symPrefUniVar	assignment_exp	initializer	false
symPrefUniVar	spec_qualifier_list	type_name	true
passou um
symPrefUniVar	abstract_declarator	type_name	false
symPrefUniVar	pointer	abstract_declarator	false
symPrefUniVar	pointer	abstract_declarator	false
symPrefUniVar	direct_abstract_declarator	abstract_declarator	true
passou um
__(	 pref := 	(, *, __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	(, *
symPrefUniVar	abstract_declarator	direct_abstract_declarator	true
passou um
__)	 pref := 	), *, ], const, volatile	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
__[	 pref := 	), ]	 flw := 	!, &, (, *, +, ++, -, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	const_exp	direct_abstract_declarator	false
__]	 pref := 	), *, ++, --, [, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
Subset	__]	rule = 	direct_abstract_declarator	total = 	3
__(	 pref := 	), ]	 flw := 	), __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile
symPrefUniVar	param_type_list	direct_abstract_declarator	false
__)	 pref := 	(, ), *, ..., ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
ID	 pref := 	), ;, ], __ID, auto, char, const, double, extern, float, int, long, register, short, signed, static, typedef, unsigned, void, volatile, {, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, ], ^, ^=, __ID, auto, char, const, double, enum, extern, float, int, long, register, short, signed, static, struct, typedef, union, unsigned, void, volatile, |, |=, ||, }
ID	 pref := 	), :, ;, do, else, {, }	 flw := 	:
__:	 pref := 	__ID	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
symPrefUniVar	stat	stat	false
__case	 pref := 	), :, ;, do, else, {, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	case
foi true22	case	const_exp	true
symPrefUniVar	const_exp	stat	true
passou um
passou três	const_exp	stat
__:	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
symPrefUniVar	stat	stat	false
__default	 pref := 	), :, ;, do, else, {, }	 flw := 	:
true33	default
foi true22	default	:	true
__:	 pref := 	default	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
true33	:
foi true22	:	stat	true
symPrefUniVar	stat	stat	true
passou um
passou três	stat	stat
symPrefUniVar	exp	stat	false
__;	 pref := 	), *, ++, --, :, ;, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, do, double, else, float, int, long, short, signed, unsigned, void, volatile, {, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, else, for, goto, if, return, sizeof, switch, while, {, }, ~
symPrefUniVar	compound_stat	stat	false
__if	 pref := 	), :, ;, do, else, {, }	 flw := 	(
Subset	__if	rule = 	stat	total = 	2
__(	 pref := 	if	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	exp	stat	false
__)	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
symPrefUniVar	stat	stat	false
__else	 pref := 	;, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
true33	else
foi true22	else	stat	true
symPrefUniVar	stat	stat	true
passou um
passou três	stat	stat
__if	 pref := 	), :, ;, do, else, {, }	 flw := 	(
true33	if
Subset	__if	rule = 	stat	total = 	2
__(	 pref := 	if	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	(
symPrefUniVar	exp	stat	false
__)	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
symPrefUniVar	stat	stat	false
__switch	 pref := 	), :, ;, do, else, {, }	 flw := 	(
true33	switch
foi true22	switch	(	true
__(	 pref := 	switch	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	(
foi true22	(	exp	true
symPrefUniVar	exp	stat	false
__)	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
symPrefUniVar	stat	stat	false
__while	 pref := 	), :, ;, do, else, {, }	 flw := 	(
Subset	__while	rule = 	stat	total = 	2
__(	 pref := 	while	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	exp	stat	false
__)	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
symPrefUniVar	stat	stat	false
__do	 pref := 	), :, ;, do, else, {, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
true33	do
foi true22	do	stat	true
symPrefUniVar	stat	stat	true
passou um
passou três	stat	stat
__while	 pref := 	;, }	 flw := 	(
true33	while
__(	 pref := 	while	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	(
symPrefUniVar	exp	stat	false
__)	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	;
__;	 pref := 	)	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, else, for, goto, if, return, sizeof, switch, while, {, }, ~
__for	 pref := 	), :, ;, do, else, {, }	 flw := 	(
true33	for
foi true22	for	(	true
__(	 pref := 	for	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	(
foi true22	(	table: 0x55b6bee48550	true
symPrefUniVar	exp	stat	false
__;	 pref := 	(, ), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	exp	stat	false
__;	 pref := 	), *, ++, --, ;, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, ), *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	exp	stat	true
passou um
__)	 pref := 	), *, ++, --, ;, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, for, goto, if, return, sizeof, switch, while, {, ~
symPrefUniVar	stat	stat	true
passou um
__goto	 pref := 	), :, ;, do, else, {, }	 flw := 	__ID
true33	goto
foi true22	goto	ID	true
ID	 pref := 	goto	 flw := 	;
true33	ID
foi true22	ID	;	true
__;	 pref := 	__ID	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, else, for, goto, if, return, sizeof, switch, while, {, }, ~
__continue	 pref := 	), :, ;, do, else, {, }	 flw := 	;
true33	continue
foi true22	continue	;	true
__;	 pref := 	continue	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, else, for, goto, if, return, sizeof, switch, while, {, }, ~
true33	;
__break	 pref := 	), :, ;, do, else, {, }	 flw := 	;
true33	break
foi true22	break	;	true
__;	 pref := 	break	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, else, for, goto, if, return, sizeof, switch, while, {, }, ~
true33	;
__return	 pref := 	), :, ;, do, else, {, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	return
foi true22	return	table: 0x55b6bee5f4c0	true
symPrefUniVar	exp	stat	true
passou um
passou três	exp	stat
__;	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, return, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, break, case, continue, default, do, else, for, goto, if, return, sizeof, switch, while, {, }, ~
__{	 pref := 	), :, ;, ], __ID, do, else, {, }	 flw := 	!, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, auto, break, case, char, const, continue, default, do, double, enum, extern, float, for, goto, if, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while, {, }, ~
symPrefUniVar	decl	compound_stat	false
symPrefUniVar	stat	compound_stat	true
passou um
__}	 pref := 	;, {, }	 flw := 	!, $, &, (, *, +, ++, -, --, ;, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while, {, }, ~
symPrefUniVar	assignment_exp	exp	false
__,	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	assignment_exp	exp	false
symPrefUniVar	unary_exp	assignment_exp	false
symPrefUniVar	assignment_operator	assignment_exp	true
passou um
symPrefUniVar	assignment_exp	assignment_exp	false
symPrefUniVar	conditional_exp	assignment_exp	false
__=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
Subset	__=	rule = 	assignment_operator	total = 	3
__*=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	*=
__/=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	/=
__%=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	%=
__+=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	+=
__-=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	-=
__<<=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	<<=
__>>=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	>>=
__&=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	&=
__^=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	^=
__|=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	|=
symPrefUniVar	logical_or_exp	conditional_exp	false
__?	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	?
foi true22	?	exp	true
symPrefUniVar	exp	conditional_exp	true
passou um
passou três	exp	conditional_exp
__:	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	conditional_exp	conditional_exp	false
symPrefUniVar	logical_or_exp	conditional_exp	true
passou um
symPrefUniVar	conditional_exp	const_exp	false
symPrefUniVar	logical_and_exp	logical_or_exp	true
passou um
__||	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	||
symPrefUniVar	logical_and_exp	logical_or_exp	true
passou um
passou três	logical_and_exp	logical_or_exp
symPrefUniVar	inclusive_or_exp	logical_and_exp	true
passou um
__&&	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	&&
symPrefUniVar	inclusive_or_exp	logical_and_exp	true
passou um
passou três	inclusive_or_exp	logical_and_exp
symPrefUniVar	exclusive_or_exp	inclusive_or_exp	true
passou um
__|	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	|
symPrefUniVar	exclusive_or_exp	inclusive_or_exp	true
passou um
passou três	exclusive_or_exp	inclusive_or_exp
symPrefUniVar	and_exp	exclusive_or_exp	true
passou um
__^	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	^
symPrefUniVar	and_exp	exclusive_or_exp	true
passou um
passou três	and_exp	exclusive_or_exp
symPrefUniVar	equality_exp	and_exp	true
passou um
__&	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	equality_exp	and_exp	true
passou um
passou três	equality_exp	and_exp
symPrefUniVar	relational_exp	equality_exp	true
passou um
__==	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	==
__!=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	!=
symPrefUniVar	relational_exp	equality_exp	true
passou um
passou três	relational_exp	equality_exp
symPrefUniVar	shift_exp	relational_exp	true
passou um
__<=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	<=
__>=	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	>=
__<	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	<
__>	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	>
symPrefUniVar	shift_exp	relational_exp	true
passou um
passou três	shift_exp	relational_exp
symPrefUniVar	additive_exp	shift_exp	true
passou um
__<<	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	<<
__>>	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	>>
symPrefUniVar	additive_exp	shift_exp	true
passou um
passou três	additive_exp	shift_exp
symPrefUniVar	multiplicative_exp	additive_exp	true
passou um
__+	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
__-	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	multiplicative_exp	additive_exp	true
passou um
passou três	multiplicative_exp	additive_exp
symPrefUniVar	cast_exp	multiplicative_exp	false
__*	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
__/	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	/
__%	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	%
symPrefUniVar	cast_exp	multiplicative_exp	false
__(	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, +=, ,, -, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, {, |, |=, ||, }, ~	 flw := 	__ID, char, const, double, enum, float, int, long, short, signed, struct, union, unsigned, void, volatile
symPrefUniVar	type_name	cast_exp	true
passou um
__)	 pref := 	), *, ], __ID, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	cast_exp	cast_exp	false
symPrefUniVar	unary_exp	cast_exp	false
__++	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	unary_exp	unary_exp	true
passou um
__--	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	unary_exp	unary_exp	true
passou um
symPrefUniVar	unary_operator	unary_exp	true
passou um
symPrefUniVar	cast_exp	unary_exp	false
__sizeof	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, enum, float, int, long, short, signed, sizeof, struct, union, unsigned, void, volatile, ~
true33	sizeof
foi true22	sizeof	table: 0x55b6beeb0df0	true
symPrefUniVar	type_name	unary_exp	true
passou um
symPrefUniVar	unary_exp	unary_exp	true
passou um
passou três	unary_exp	unary_exp
symPrefUniVar	postfix_exp	unary_exp	true
passou um
symPrefUniVar	primary_exp	postfix_exp	true
passou um
__[	 pref := 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
Subset	__[	rule = 	postfix_exp	total = 	3
symPrefUniVar	exp	postfix_exp	true
passou um
passou três	exp	postfix_exp
__]	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
__(	 pref := 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING	 flw := 	!, &, (, ), *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	assignment_exp	postfix_exp	false
__,	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	assignment_exp	postfix_exp	false
__)	 pref := 	(, ), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
__.	 pref := 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING	 flw := 	__ID
true33	.
ID	 pref := 	.	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
true33	ID
__->	 pref := 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING	 flw := 	__ID
true33	->
ID	 pref := 	->	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
true33	ID
__++	 pref := 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
__--	 pref := 	), ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
ID	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
STRING	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
true33	STRING
symPrefUniVar	constant	primary_exp	true
passou um
passou três	constant	primary_exp
__(	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
symPrefUniVar	exp	primary_exp	false
__)	 pref := 	), *, ++, --, ], __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, char, const, double, float, int, long, short, signed, unsigned, void, volatile, }	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
INT_CONST	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
true33	INT_CONST
CHAR_CONST	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
true33	CHAR_CONST
FLOAT_CONST	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
true33	FLOAT_CONST
ENUMERATION_CONST	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, ->, ., /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ], ^, ^=, |, |=, ||, }
true33	ENUMERATION_CONST
__&	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
__*	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
__+	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
__-	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
__~	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	~
__!	 pref := 	!, !=, %, %=, &, &&, &=, (, ), *, *=, +, ++, +=, ,, -, --, -=, /, /=, :, ;, <, <<, <<=, <=, =, ==, >, >=, >>, >>=, ?, [, ^, ^=, case, do, else, return, sizeof, {, |, |=, ||, }, ~	 flw := 	!, &, (, *, +, ++, -, --, __CHAR_CONST, __ENUMERATION_CONST, __FLOAT_CONST, __ID, __INT_CONST, __STRING, sizeof, ~
true33	!
unique var 	external_decl
Unique usage	external_decl
unique var 	decl
unique var2 	storage_class_spec
unique var 	const_exp
unique var 	stat
unique var 	stat
unique var 	stat
unique var 	exp
unique var 	stat
unique var 	exp
unique var 	stat
unique var 	stat
unique var 	exp
unique var 	exp
unique var 	exp
unique var 	exp
unique var 	stat
unique var 	exp
unique var 	exp
unique var 	conditional_exp
unique var 	logical_and_exp
unique var 	inclusive_or_exp
unique var 	exclusive_or_exp
unique var 	and_exp
unique var 	relational_exp
unique var 	shift_exp
unique var 	additive_exp
unique var 	unary_exp
unique var2 	constant
Unique vars: translation_unit, external_decl, 
matchUPath: translation_unit, external_decl, storage_class_spec, type_qualifier, struct_or_union, constant, 
Adding labels: Err_1, Err_2, Err_3, Err_4, Err_5, Err_6, Err_7, Err_8, Err_9, Err_10, Err_11, Err_12, Err_13, Err_14, Err_15, Err_16, Err_17, Err_18, Err_19, Err_20, Err_21, Err_22, Err_23, Err_24, Err_25, Err_26, Err_27, Err_28, Err_29, Err_30, Err_31, Err_32, Err_33, Err_34, Err_35, Err_36, Err_37, Err_38, Err_39, Err_40, Err_41, Err_42, Err_43, Err_44, Err_45, Err_46, Err_47, Err_48, Err_49, Err_50, Err_51, 

Property 	nil
translation_unit <-  SKIP external_decl+^Err_001 !.
external_decl   <-  function_def  /  decl
function_def    <-  declarator decl* compound_stat  /  decl_spec function_def
decl_spec       <-  storage_class_spec  /  type_spec  /  type_qualifier
decl            <-  decl_spec init_declarator_list? ';'  /  decl_spec decl
storage_class_spec <-  'auto'  /  'register'  /  'static'  /  'extern'  /  'typedef'
type_spec       <-  'void'  /  'char'  /  'short'  /  'int'  /  'long'  /  'float'  /  'double'  /  'signed'  /  'unsigned'  /  typedef_name  /  'enum' ID? '{' enumerator (',' enumerator)* '}'  /  'enum' ID^Err_002  /  struct_or_union ID? '{' struct_decl+ '}'  /  struct_or_union ID^Err_003
type_qualifier  <-  'const'  /  'volatile'
struct_or_union <-  'struct'  /  'union'
init_declarator_list <-  init_declarator (',' init_declarator)*
init_declarator <-  declarator '=' initializer  /  declarator
struct_decl     <-  spec_qualifier struct_declarator (',' struct_declarator)* ';'  /  spec_qualifier struct_decl
spec_qualifier_list <-  (type_spec  /  type_qualifier)+
spec_qualifier  <-  type_spec  /  type_qualifier
struct_declarator <-  declarator? ':' const_exp  /  declarator
enumerator      <-  ID '=' const_exp  /  ID
declarator      <-  pointer? direct_declarator
direct_declarator <-  (ID  /  '(' declarator ')') ('[' const_exp? ']'  /  '(' param_type_list ')'  /  '(' id_list? ')')*
pointer         <-  '*' type_qualifier* pointer  /  '*' type_qualifier*
param_type_list <-  param_decl (',' param_decl)* (',' '...')?
param_decl      <-  decl_spec+ (declarator  /  abstract_declarator)?
id_list         <-  ID (',' ID)*
initializer     <-  '{' initializer (',' initializer)* ','? '}'  /  assignment_exp
type_name       <-  spec_qualifier_list abstract_declarator?
abstract_declarator <-  pointer  /  pointer? direct_abstract_declarator
direct_abstract_declarator <-  '(' abstract_declarator ')' ('[' const_exp? ']'  /  '(' param_type_list? ')')*
typedef_name    <-  ID
stat            <-  ID ':' stat  /  'case' const_exp^Err_004 ':'^Err_005 stat^Err_006  /  'default' ':'^Err_007 stat^Err_008  /  exp? ';'  /  compound_stat  /  'if' '('^Err_009 exp^Err_010 ')' stat 'else' stat^Err_011  /  'if' '('^Err_012 exp^Err_013 ')'^Err_014 stat^Err_015  /  'switch' '('^Err_016 exp^Err_017 ')'^Err_018 stat^Err_019  /  'while' '('^Err_020 exp^Err_021 ')' stat  /  'do' stat^Err_022 'while'^Err_023 '('^Err_024 exp^Err_025 ')'^Err_026 ';'^Err_027  /  'for' '('^Err_028 exp? ';'^Err_029 exp? ';'^Err_030 exp? ')'^Err_031 stat^Err_032  /  'goto' ID^Err_033 ';'^Err_034  /  'continue' ';'^Err_035  /  'break' ';'^Err_036  /  'return' exp? ';'^Err_037
compound_stat   <-  '{' decl* stat* '}'
exp             <-  assignment_exp (',' assignment_exp)*
assignment_exp  <-  unary_exp assignment_operator assignment_exp  /  conditional_exp
assignment_operator <-  '=' !'='  /  '*='  /  '/='  /  '%='  /  '+='  /  '-='  /  '<<='  /  '>>='  /  '&='  /  '^='  /  '|='
conditional_exp <-  logical_or_exp '?' exp^Err_038 ':'^Err_039 conditional_exp^Err_040  /  logical_or_exp
const_exp       <-  conditional_exp
logical_or_exp  <-  logical_and_exp ('||' logical_and_exp^Err_041)*
logical_and_exp <-  inclusive_or_exp ('&&' inclusive_or_exp^Err_042)*
inclusive_or_exp <-  exclusive_or_exp ('|' !'|' exclusive_or_exp^Err_043)*
exclusive_or_exp <-  and_exp ('^' and_exp^Err_044)*
and_exp         <-  equality_exp ('&' !'&' equality_exp)*
equality_exp    <-  relational_exp (('=='  /  '!=') relational_exp^Err_045)*
relational_exp  <-  shift_exp (('<='  /  '>='  /  '<'  /  '>') shift_exp^Err_046)*
shift_exp       <-  additive_exp (('<<'  /  '>>') additive_exp^Err_047)*
additive_exp    <-  multiplicative_exp (('+'  /  '-') multiplicative_exp)*
multiplicative_exp <-  cast_exp (('*'  /  '/'  /  '%') cast_exp)*
cast_exp        <-  '(' type_name ')' cast_exp  /  unary_exp
unary_exp       <-  '++' unary_exp  /  '--' unary_exp  /  unary_operator cast_exp  /  'sizeof' (type_name  /  unary_exp)^Err_048  /  postfix_exp
postfix_exp     <-  primary_exp ('[' exp ']'^Err_049  /  '(' (assignment_exp (',' assignment_exp)*)? ')'  /  '.' ID^Err_050  /  '->' ID^Err_051  /  '++'  /  '--')*
primary_exp     <-  ID  /  STRING  /  constant  /  '(' exp ')'
constant        <-  INT_CONST  /  CHAR_CONST  /  FLOAT_CONST  /  ENUMERATION_CONST
unary_operator  <-  '&'  /  '*'  /  '+'  /  '-'  /  '~'  /  '!'
COMMENT         <-  '/*' (!'*/' .)* '*/'
INT_CONST       <-  ('0' [xX] XDIGIT+  /  !'0' DIGIT DIGIT*  /  '0' [0-8]*) ([uU] [lL]  /  [lL] [uU]  /  'l'  /  'L'  /  'u'  /  'U')?
FLOAT_CONST     <-  '0x' (('.'  /  XDIGIT+  /  XDIGIT+  /  '.') ([eE] [-+]? XDIGIT+)? [lLfF]?  /  XDIGIT+ [eE] [-+]? XDIGIT+ [lLfF]?)  /  ('.'  /  DIGIT+  /  DIGIT+  /  '.') ([eE] [-+]? DIGIT+)? [lLfF]?  /  DIGIT+ [eE] [-+]? DIGIT+ [lLfF]?
XDIGIT          <-  [0-9a-fA-F]
DIGIT           <-  [0-9]
CHAR_CONST      <-  "'" (%nl  /  !"'" .) "'"
STRING          <-  '"' (%nl  /  !'"' .)* '"'
ESC_CHAR        <-  '\\' ('n'  /  't'  /  'v'  /  'b'  /  'r'  /  'f'  /  'a'  /  '\\'  /  '?'  /  "'"  /  '"'  /  [01234567] [01234567]? [01234567]?  /  'x' XDIGIT)
ENUMERATION_CONST <-  ID
ID              <-  !KEYWORDS [a-zA-Z_] [a-zA-Z_0-9]*
KEYWORDS        <-  ('auto'  /  'double'  /  'int'  /  'struct'  /  'break'  /  'else'  /  'long'  /  'switch'  /  'case'  /  'enum'  /  'register'  /  'typedef'  /  'char'  /  'extern'  /  'return'  /  'union'  /  'const'  /  'float'  /  'short'  /  'unsigned'  /  'continue'  /  'for'  /  'signed'  /  'void'  /  'default'  /  'goto'  /  'sizeof'  /  'volatile'  /  'do'  /  'if'  /  'static'  /  'while') ![a-zA-Z_0-9]
SPACE           <-  [ 	
]  /  COMMENT
SKIP            <-  ([ 	
]  /  COMMENT)*
Token           <-  '~'  /  '}'  /  '||'  /  '|='  /  '|'  /  '{'  /  XDIGIT  /  STRING  /  KEYWORDS  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ESC_CHAR  /  ENUMERATION_CONST  /  DIGIT  /  COMMENT  /  CHAR_CONST  /  '^='  /  '^'  /  ']'  /  '['  /  '>>='  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '/='  /  '/'  /  '...'  /  '->'  /  '-='  /  '--'  /  '-'  /  ','  /  '+='  /  '++'  /  '+'  /  '*='  /  '*'  /  ')'  /  '('  /  '&='  /  '&&'  /  '&'  /  '%='  /  '%'  /  '!='  /  '!'
EatToken        <-  (Token  /  (!SPACE .)+) SKIP
Err_001         <-  (!('volatile'  /  'void'  /  'unsigned'  /  'union'  /  'typedef'  /  'struct'  /  'static'  /  'signed'  /  'short'  /  'register'  /  'long'  /  'int'  /  'float'  /  'extern'  /  'enum'  /  'double'  /  'const'  /  'char'  /  'auto'  /  ID  /  '*'  /  '('  /  !.) EatToken)*
Err_002         <-  (!('}'  /  '||'  /  '|='  /  '|'  /  'volatile'  /  'void'  /  'unsigned'  /  'union'  /  'typedef'  /  'struct'  /  'static'  /  'signed'  /  'short'  /  'register'  /  'long'  /  'int'  /  'float'  /  'extern'  /  'enum'  /  'double'  /  'const'  /  'char'  /  'auto'  /  ID  /  '^='  /  '^'  /  ']'  /  '?'  /  '>>='  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '/='  /  '/'  /  '-='  /  '-'  /  ','  /  '+='  /  '+'  /  '*='  /  '*'  /  ')'  /  '('  /  '&='  /  '&&'  /  '&'  /  '%='  /  '%'  /  '!=') EatToken)*
Err_003         <-  (!('}'  /  '||'  /  '|='  /  '|'  /  'volatile'  /  'void'  /  'unsigned'  /  'union'  /  'typedef'  /  'struct'  /  'static'  /  'signed'  /  'short'  /  'register'  /  'long'  /  'int'  /  'float'  /  'extern'  /  'enum'  /  'double'  /  'const'  /  'char'  /  'auto'  /  ID  /  '^='  /  '^'  /  ']'  /  '?'  /  '>>='  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '/='  /  '/'  /  '-='  /  '-'  /  ','  /  '+='  /  '+'  /  '*='  /  '*'  /  ')'  /  '('  /  '&='  /  '&&'  /  '&'  /  '%='  /  '%'  /  '!=') EatToken)*
Err_004         <-  (!':' EatToken)*
Err_005         <-  (!('~'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_006         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_007         <-  (!('~'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_008         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_009         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_010         <-  (!')' EatToken)*
Err_011         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_012         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_013         <-  (!')' EatToken)*
Err_014         <-  (!('~'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_015         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_016         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_017         <-  (!')' EatToken)*
Err_018         <-  (!('~'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_019         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_020         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_021         <-  (!')' EatToken)*
Err_022         <-  (!'while' EatToken)*
Err_023         <-  (!'(' EatToken)*
Err_024         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_025         <-  (!')' EatToken)*
Err_026         <-  (!';' EatToken)*
Err_027         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_028         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_029         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_030         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '!') EatToken)*
Err_031         <-  (!('~'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_032         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_033         <-  (!';' EatToken)*
Err_034         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_035         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_036         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_037         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_038         <-  (!':' EatToken)*
Err_039         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_040         <-  (!('}'  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_041         <-  (!('}'  /  '||'  /  ']'  /  '?'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_042         <-  (!('}'  /  '||'  /  ']'  /  '?'  /  ';'  /  ':'  /  ','  /  ')'  /  '&&') EatToken)*
Err_043         <-  (!('}'  /  '||'  /  '|'  /  ']'  /  '?'  /  ';'  /  ':'  /  ','  /  ')'  /  '&&') EatToken)*
Err_044         <-  (!('}'  /  '||'  /  '|'  /  '^'  /  ']'  /  '?'  /  ';'  /  ':'  /  ','  /  ')'  /  '&&') EatToken)*
Err_045         <-  (!('}'  /  '||'  /  '|'  /  '^'  /  ']'  /  '?'  /  '=='  /  ';'  /  ':'  /  ','  /  ')'  /  '&&'  /  '&'  /  '!=') EatToken)*
Err_046         <-  (!('}'  /  '||'  /  '|'  /  '^'  /  ']'  /  '?'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ':'  /  ','  /  ')'  /  '&&'  /  '&'  /  '!=') EatToken)*
Err_047         <-  (!('}'  /  '||'  /  '|'  /  '^'  /  ']'  /  '?'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  ','  /  ')'  /  '&&'  /  '&'  /  '!=') EatToken)*
Err_048         <-  (!('}'  /  '||'  /  '|='  /  '|'  /  '^='  /  '^'  /  ']'  /  '?'  /  '>>='  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '/='  /  '/'  /  '-='  /  '-'  /  ','  /  '+='  /  '+'  /  '*='  /  '*'  /  ')'  /  '&='  /  '&&'  /  '&'  /  '%='  /  '%'  /  '!=') EatToken)*
Err_049         <-  (!('}'  /  '||'  /  '|='  /  '|'  /  '^='  /  '^'  /  ']'  /  '['  /  '?'  /  '>>='  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '/='  /  '/'  /  '.'  /  '->'  /  '-='  /  '--'  /  '-'  /  ','  /  '+='  /  '++'  /  '+'  /  '*='  /  '*'  /  ')'  /  '('  /  '&='  /  '&&'  /  '&'  /  '%='  /  '%'  /  '!=') EatToken)*
Err_050         <-  (!('}'  /  '||'  /  '|='  /  '|'  /  '^='  /  '^'  /  ']'  /  '['  /  '?'  /  '>>='  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '/='  /  '/'  /  '.'  /  '->'  /  '-='  /  '--'  /  '-'  /  ','  /  '+='  /  '++'  /  '+'  /  '*='  /  '*'  /  ')'  /  '('  /  '&='  /  '&&'  /  '&'  /  '%='  /  '%'  /  '!=') EatToken)*
Err_051         <-  (!('}'  /  '||'  /  '|='  /  '|'  /  '^='  /  '^'  /  ']'  /  '['  /  '?'  /  '>>='  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '/='  /  '/'  /  '.'  /  '->'  /  '-='  /  '--'  /  '-'  /  ','  /  '+='  /  '++'  /  '+'  /  '*='  /  '*'  /  ')'  /  '('  /  '&='  /  '&&'  /  '&'  /  '%='  /  '%'  /  '!=') EatToken)*	

Property 	unique
translation_unit <-  SKIP_unique external_decl_unique+_unique^Err_001 !.
external_decl   <-  (function_def  /  decl_unique)_unique
function_def    <-  declarator decl* compound_stat  /  decl_spec function_def
decl_spec       <-  storage_class_spec_unique  /  type_spec  /  type_qualifier
decl            <-  decl_spec init_declarator_list? ';'  /  decl_spec decl
storage_class_spec <-  ('auto'_unique  /  ('register'_unique  /  ('static'_unique  /  ('extern'_unique  /  'typedef'_unique)_unique)_unique)_unique)_unique
type_spec       <-  'void'_unique  /  'char'_unique  /  'short'_unique  /  'int'_unique  /  'long'_unique  /  'float'_unique  /  'double'_unique  /  'signed'_unique  /  'unsigned'_unique  /  typedef_name  /  'enum' ID? '{' enumerator (',' enumerator)* '}'  /  'enum'_unique ID_unique^Err_002  /  struct_or_union ID? '{' struct_decl+ '}'  /  struct_or_union_unique ID_unique^Err_003
type_qualifier  <-  ('const'_unique  /  'volatile'_unique)_unique
struct_or_union <-  ('struct'_unique  /  'union'_unique)_unique
init_declarator_list <-  init_declarator (',' init_declarator)*
init_declarator <-  declarator '=' initializer_unique  /  declarator
struct_decl     <-  spec_qualifier struct_declarator (',' struct_declarator)* ';'  /  spec_qualifier struct_decl
spec_qualifier_list <-  (type_spec  /  type_qualifier)+
spec_qualifier  <-  type_spec  /  type_qualifier
struct_declarator <-  declarator? ':' const_exp  /  declarator
enumerator      <-  ID '=' const_exp_unique  /  ID
declarator      <-  pointer? direct_declarator
direct_declarator <-  (ID  /  '(' declarator ')') ('[' const_exp? ']'  /  '(' param_type_list ')'  /  '(' id_list? ')')*
pointer         <-  '*' type_qualifier* pointer  /  '*' type_qualifier*
param_type_list <-  param_decl (',' param_decl)* (',' '...'_unique)?
param_decl      <-  decl_spec+ (declarator  /  abstract_declarator)?
id_list         <-  ID (',' ID)*
initializer     <-  '{' initializer (',' initializer)* ','? '}'  /  assignment_exp
type_name       <-  spec_qualifier_list abstract_declarator?
abstract_declarator <-  pointer  /  pointer? direct_abstract_declarator
direct_abstract_declarator <-  '(' abstract_declarator ')' ('[' const_exp? ']'  /  '(' param_type_list? ')')*
typedef_name    <-  ID
stat            <-  ID ':' stat  /  'case'_unique const_exp_unique^Err_004 ':'_unique^Err_005 stat_unique^Err_006  /  'default'_unique ':'_unique^Err_007 stat_unique^Err_008  /  exp? ';'  /  compound_stat  /  'if' '('^Err_009 exp^Err_010 ')' stat 'else'_unique stat_unique^Err_011  /  'if'_unique '('_unique^Err_012 exp_unique^Err_013 ')'_unique^Err_014 stat_unique^Err_015  /  'switch'_unique '('_unique^Err_016 exp_unique^Err_017 ')'_unique^Err_018 stat_unique^Err_019  /  'while' '('^Err_020 exp^Err_021 ')' stat  /  ('do'_unique stat_unique^Err_022 'while'_unique^Err_023 '('_unique^Err_024 exp_unique^Err_025 ')'_unique^Err_026 ';'_unique^Err_027  /  ('for'_unique '('_unique^Err_028 exp_unique?_unique ';'_unique^Err_029 exp_unique?_unique ';'_unique^Err_030 exp_unique?_unique ')'_unique^Err_031 stat_unique^Err_032  /  ('goto'_unique ID_unique^Err_033 ';'_unique^Err_034  /  ('continue'_unique ';'_unique^Err_035  /  ('break'_unique ';'_unique^Err_036  /  'return'_unique exp_unique?_unique ';'_unique^Err_037)_unique)_unique)_unique)_unique)_unique
compound_stat   <-  '{' decl* stat* '}'
exp             <-  assignment_exp (',' assignment_exp)*
assignment_exp  <-  unary_exp assignment_operator assignment_exp  /  conditional_exp
assignment_operator <-  '=' !'='  /  ('*='_unique  /  ('/='_unique  /  ('%='_unique  /  ('+='_unique  /  ('-='_unique  /  ('<<='_unique  /  ('>>='_unique  /  ('&='_unique  /  ('^='_unique  /  '|='_unique)_unique)_unique)_unique)_unique)_unique)_unique)_unique)_unique)_unique
conditional_exp <-  logical_or_exp '?'_unique exp_unique^Err_038 ':'_unique^Err_039 conditional_exp_unique^Err_040  /  logical_or_exp
const_exp       <-  conditional_exp
logical_or_exp  <-  logical_and_exp ('||'_unique logical_and_exp_unique^Err_041)*
logical_and_exp <-  inclusive_or_exp ('&&'_unique inclusive_or_exp_unique^Err_042)*
inclusive_or_exp <-  exclusive_or_exp ('|'_unique !'|' exclusive_or_exp_unique^Err_043)*
exclusive_or_exp <-  and_exp ('^'_unique and_exp_unique^Err_044)*
and_exp         <-  equality_exp ('&' !'&' equality_exp_unique)*
equality_exp    <-  relational_exp ((('=='_unique  /  '!='_unique)_unique) relational_exp_unique^Err_045)*
relational_exp  <-  shift_exp ((('<='_unique  /  ('>='_unique  /  ('<'_unique  /  '>'_unique)_unique)_unique)_unique) shift_exp_unique^Err_046)*
shift_exp       <-  additive_exp ((('<<'_unique  /  '>>'_unique)_unique) additive_exp_unique^Err_047)*
additive_exp    <-  multiplicative_exp (('+'  /  '-') multiplicative_exp_unique)*
multiplicative_exp <-  cast_exp (('*'  /  ('/'_unique  /  '%'_unique)_unique) cast_exp)*
cast_exp        <-  '(' type_name ')' cast_exp  /  unary_exp
unary_exp       <-  '++' unary_exp  /  '--' unary_exp  /  unary_operator cast_exp  /  'sizeof'_unique ((type_name  /  unary_exp_unique)_unique)^Err_048  /  postfix_exp
postfix_exp     <-  primary_exp ('[' exp_unique ']'_unique^Err_049  /  '(' (assignment_exp (',' assignment_exp)*)? ')'  /  '.'_unique ID_unique^Err_050  /  '->'_unique ID_unique^Err_051  /  '++'  /  '--')*
primary_exp     <-  ID  /  STRING_unique  /  constant_unique  /  '(' exp ')'
constant        <-  (INT_CONST_unique  /  (CHAR_CONST_unique  /  (FLOAT_CONST_unique  /  ENUMERATION_CONST_unique)_unique)_unique)_unique
unary_operator  <-  '&'  /  '*'  /  '+'  /  '-'  /  ('~'_unique  /  '!'_unique)_unique
COMMENT         <-  '/*' (!'*/' .)* '*/'
INT_CONST       <-  ('0' [xX] XDIGIT+  /  !'0' DIGIT DIGIT*  /  '0' [0-8]*) ([uU] [lL]  /  [lL] [uU]  /  'l'  /  'L'  /  'u'  /  'U')?
FLOAT_CONST     <-  '0x' (('.'  /  XDIGIT+  /  XDIGIT+  /  '.') ([eE] [-+]? XDIGIT+)? [lLfF]?  /  XDIGIT+ [eE] [-+]? XDIGIT+ [lLfF]?)  /  ('.'  /  DIGIT+  /  DIGIT+  /  '.') ([eE] [-+]? DIGIT+)? [lLfF]?  /  DIGIT+ [eE] [-+]? DIGIT+ [lLfF]?
XDIGIT          <-  [0-9a-fA-F]
DIGIT           <-  [0-9]
CHAR_CONST      <-  "'" (%nl  /  !"'" .) "'"
STRING          <-  '"' (%nl  /  !'"' .)* '"'
ESC_CHAR        <-  '\\' ('n'  /  't'  /  'v'  /  'b'  /  'r'  /  'f'  /  'a'  /  '\\'  /  '?'  /  "'"  /  '"'  /  [01234567] [01234567]? [01234567]?  /  'x' XDIGIT)
ENUMERATION_CONST <-  ID
ID              <-  !KEYWORDS [a-zA-Z_] [a-zA-Z_0-9]*
KEYWORDS        <-  ('auto'  /  'double'  /  'int'  /  'struct'  /  'break'  /  'else'  /  'long'  /  'switch'  /  'case'  /  'enum'  /  'register'  /  'typedef'  /  'char'  /  'extern'  /  'return'  /  'union'  /  'const'  /  'float'  /  'short'  /  'unsigned'  /  'continue'  /  'for'  /  'signed'  /  'void'  /  'default'  /  'goto'  /  'sizeof'  /  'volatile'  /  'do'  /  'if'  /  'static'  /  'while') ![a-zA-Z_0-9]
SPACE           <-  [ 	
]  /  COMMENT
SKIP            <-  ([ 	
]  /  COMMENT)*
Token           <-  '~'  /  '}'  /  '||'  /  '|='  /  '|'  /  '{'  /  XDIGIT  /  STRING  /  KEYWORDS  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ESC_CHAR  /  ENUMERATION_CONST  /  DIGIT  /  COMMENT  /  CHAR_CONST  /  '^='  /  '^'  /  ']'  /  '['  /  '>>='  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '/='  /  '/'  /  '...'  /  '->'  /  '-='  /  '--'  /  '-'  /  ','  /  '+='  /  '++'  /  '+'  /  '*='  /  '*'  /  ')'  /  '('  /  '&='  /  '&&'  /  '&'  /  '%='  /  '%'  /  '!='  /  '!'
EatToken        <-  (Token  /  (!SPACE .)+) SKIP
Err_001         <-  (!('volatile'  /  'void'  /  'unsigned'  /  'union'  /  'typedef'  /  'struct'  /  'static'  /  'signed'  /  'short'  /  'register'  /  'long'  /  'int'  /  'float'  /  'extern'  /  'enum'  /  'double'  /  'const'  /  'char'  /  'auto'  /  ID  /  '*'  /  '('  /  !.) EatToken)*
Err_002         <-  (!('}'  /  '||'  /  '|='  /  '|'  /  'volatile'  /  'void'  /  'unsigned'  /  'union'  /  'typedef'  /  'struct'  /  'static'  /  'signed'  /  'short'  /  'register'  /  'long'  /  'int'  /  'float'  /  'extern'  /  'enum'  /  'double'  /  'const'  /  'char'  /  'auto'  /  ID  /  '^='  /  '^'  /  ']'  /  '?'  /  '>>='  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '/='  /  '/'  /  '-='  /  '-'  /  ','  /  '+='  /  '+'  /  '*='  /  '*'  /  ')'  /  '('  /  '&='  /  '&&'  /  '&'  /  '%='  /  '%'  /  '!=') EatToken)*
Err_003         <-  (!('}'  /  '||'  /  '|='  /  '|'  /  'volatile'  /  'void'  /  'unsigned'  /  'union'  /  'typedef'  /  'struct'  /  'static'  /  'signed'  /  'short'  /  'register'  /  'long'  /  'int'  /  'float'  /  'extern'  /  'enum'  /  'double'  /  'const'  /  'char'  /  'auto'  /  ID  /  '^='  /  '^'  /  ']'  /  '?'  /  '>>='  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '/='  /  '/'  /  '-='  /  '-'  /  ','  /  '+='  /  '+'  /  '*='  /  '*'  /  ')'  /  '('  /  '&='  /  '&&'  /  '&'  /  '%='  /  '%'  /  '!=') EatToken)*
Err_004         <-  (!':' EatToken)*
Err_005         <-  (!('~'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_006         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_007         <-  (!('~'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_008         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_009         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_010         <-  (!')' EatToken)*
Err_011         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_012         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_013         <-  (!')' EatToken)*
Err_014         <-  (!('~'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_015         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_016         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_017         <-  (!')' EatToken)*
Err_018         <-  (!('~'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_019         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_020         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_021         <-  (!')' EatToken)*
Err_022         <-  (!'while' EatToken)*
Err_023         <-  (!'(' EatToken)*
Err_024         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_025         <-  (!')' EatToken)*
Err_026         <-  (!';' EatToken)*
Err_027         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_028         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_029         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_030         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  ')'  /  '('  /  '&'  /  '!') EatToken)*
Err_031         <-  (!('~'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_032         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_033         <-  (!';' EatToken)*
Err_034         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_035         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_036         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_037         <-  (!('~'  /  '}'  /  '{'  /  'while'  /  'switch'  /  'sizeof'  /  'return'  /  'if'  /  'goto'  /  'for'  /  'else'  /  'do'  /  'default'  /  'continue'  /  'case'  /  'break'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  ';'  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_038         <-  (!':' EatToken)*
Err_039         <-  (!('~'  /  'sizeof'  /  STRING  /  INT_CONST  /  ID  /  FLOAT_CONST  /  ENUMERATION_CONST  /  CHAR_CONST  /  '--'  /  '-'  /  '++'  /  '+'  /  '*'  /  '('  /  '&'  /  '!') EatToken)*
Err_040         <-  (!('}'  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_041         <-  (!('}'  /  '||'  /  ']'  /  '?'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_042         <-  (!('}'  /  '||'  /  ']'  /  '?'  /  ';'  /  ':'  /  ','  /  ')'  /  '&&') EatToken)*
Err_043         <-  (!('}'  /  '||'  /  '|'  /  ']'  /  '?'  /  ';'  /  ':'  /  ','  /  ')'  /  '&&') EatToken)*
Err_044         <-  (!('}'  /  '||'  /  '|'  /  '^'  /  ']'  /  '?'  /  ';'  /  ':'  /  ','  /  ')'  /  '&&') EatToken)*
Err_045         <-  (!('}'  /  '||'  /  '|'  /  '^'  /  ']'  /  '?'  /  '=='  /  ';'  /  ':'  /  ','  /  ')'  /  '&&'  /  '&'  /  '!=') EatToken)*
Err_046         <-  (!('}'  /  '||'  /  '|'  /  '^'  /  ']'  /  '?'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<'  /  ';'  /  ':'  /  ','  /  ')'  /  '&&'  /  '&'  /  '!=') EatToken)*
Err_047         <-  (!('}'  /  '||'  /  '|'  /  '^'  /  ']'  /  '?'  /  '>>'  /  '>='  /  '>'  /  '=='  /  '<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  ','  /  ')'  /  '&&'  /  '&'  /  '!=') EatToken)*
Err_048         <-  (!('}'  /  '||'  /  '|='  /  '|'  /  '^='  /  '^'  /  ']'  /  '?'  /  '>>='  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '/='  /  '/'  /  '-='  /  '-'  /  ','  /  '+='  /  '+'  /  '*='  /  '*'  /  ')'  /  '&='  /  '&&'  /  '&'  /  '%='  /  '%'  /  '!=') EatToken)*
Err_049         <-  (!('}'  /  '||'  /  '|='  /  '|'  /  '^='  /  '^'  /  ']'  /  '['  /  '?'  /  '>>='  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '/='  /  '/'  /  '.'  /  '->'  /  '-='  /  '--'  /  '-'  /  ','  /  '+='  /  '++'  /  '+'  /  '*='  /  '*'  /  ')'  /  '('  /  '&='  /  '&&'  /  '&'  /  '%='  /  '%'  /  '!=') EatToken)*
Err_050         <-  (!('}'  /  '||'  /  '|='  /  '|'  /  '^='  /  '^'  /  ']'  /  '['  /  '?'  /  '>>='  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '/='  /  '/'  /  '.'  /  '->'  /  '-='  /  '--'  /  '-'  /  ','  /  '+='  /  '++'  /  '+'  /  '*='  /  '*'  /  ')'  /  '('  /  '&='  /  '&&'  /  '&'  /  '%='  /  '%'  /  '!=') EatToken)*
Err_051         <-  (!('}'  /  '||'  /  '|='  /  '|'  /  '^='  /  '^'  /  ']'  /  '['  /  '?'  /  '>>='  /  '>>'  /  '>='  /  '>'  /  '=='  /  '='  /  '<='  /  '<<='  /  '<<'  /  '<'  /  ';'  /  ':'  /  '/='  /  '/'  /  '.'  /  '->'  /  '-='  /  '--'  /  '-'  /  ','  /  '+='  /  '++'  /  '+'  /  '*='  /  '*'  /  ')'  /  '('  /  '&='  /  '&&'  /  '&'  /  '%='  /  '%'  /  '!=') EatToken)*	

End UPath

Yes: 	array01.c
Yes: 	array02.c
Yes: 	array03.c
Yes: 	assignment01.c
Yes: 	decl01.c
Yes: 	dowhile01.c
Yes: 	enum01.c
Yes: 	enum02.c
Yes: 	enum03.c
Yes: 	enum04.c
Yes: 	enum05.c
Yes: 	expand.c
Yes: 	expbinand.c
Yes: 	expbinor.c
Yes: 	expor.c
Yes: 	expor02.c
Yes: 	expunary01.c
Yes: 	expxor.c
Yes: 	for01.c
Yes: 	for02.c
Yes: 	function01.c
Yes: 	function02.c
Yes: 	global01.c
Yes: 	goto01.c
Yes: 	goto02.c
Yes: 	if01.c
Yes: 	if02.c
Yes: 	main01.c
Yes: 	main02.c
Yes: 	pointer01.c
Yes: 	sizeof01.c
Yes: 	struct01.c
Yes: 	struct02.c
Yes: 	struct03.c
Yes: 	struct04.c
Yes: 	switch01.c
Yes: 	switch02.c
Yes: 	switch03.c
Yes: 	switch04.c
Yes: 	ternary01.c
Yes: 	ternary02.c
Yes: 	while01.c
Yes: 	while02.c
Yes: 	while03.c
Yes: 	while04.c
No: 	braces01.c
r = nil lab = fail line: 2 col: 10
No: 	braces02.c
r = nil lab = fail line: 2 col: 25
No: 	braces03.c
r = nil lab = fail line: 3 col: 17
No: 	brack01.c
r = nil lab = fail line: 4 col: 1
No: 	brack02.c
r = nil lab = fail line: 4 col: 15
No: 	brack03.c
r = nil lab = fail line: 5 col: 9
No: 	brackIf01.c
r = nil lab = fail line: 4 col: 8
No: 	brackSwitch01.c
r = nil lab = fail line: 5 col: 12
No: 	brackWhile01.c
r = nil lab = fail line: 4 col: 11
No: 	brackWhile02.c
r = nil lab = fail line: 6 col: 11
No: 	colon01.c
r = nil lab = fail line: 8 col: 13
No: 	colon02.c
r = nil lab = fail line: 4 col: 43
No: 	declAfterComma01.c
r = nil lab = fail line: 2 col: 11
No: 	endComment01.c
r = nil lab = fail line: 7 col: 1
No: 	enumeratorComma01.c
r = nil lab = fail line: 2 col: 12
No: 	exprAnd01.c
r = nil lab = fail line: 4 col: 13
No: 	exprComma01.c
r = nil lab = fail line: 5 col: 45
No: 	exprExcOr01.c
r = nil lab = fail line: 4 col: 14
No: 	exprIncOr01.c
r = nil lab = fail line: 4 col: 14
No: 	exprLogAnd01.c
r = nil lab = fail line: 4 col: 14
No: 	exprLogOr01.c
r = nil lab = fail line: 4 col: 15
No: 	identifier01.c
r = nil lab = fail line: 4 col: 9
No: 	identifier02.c
r = nil lab = fail line: 6 col: 22
No: 	identifier03.c
r = nil lab = fail line: 6 col: 23
No: 	invalidDecl01.c
r = nil lab = fail line: 3 col: 1
No: 	invalidExpr01.c
r = nil lab = fail line: 4 col: 1
No: 	invalidExpr02.c
r = nil lab = fail line: 7 col: 14
No: 	invalidExpr03.c
r = nil lab = fail line: 6 col: 14
No: 	invalidExpr04.c
r = nil lab = fail line: 4 col: 8
No: 	invalidExpr05.c
r = nil lab = fail line: 5 col: 12
No: 	invalidExpr06.c
r = nil lab = fail line: 4 col: 11
No: 	invalidExpr07.c
r = nil lab = fail line: 6 col: 11
No: 	invalidExpr08.c
r = nil lab = fail line: 5 col: 10
No: 	invalidExpr09.c
r = nil lab = fail line: 5 col: 22
No: 	invalidExpr10.c
r = nil lab = fail line: 8 col: 17
No: 	invalidExprCond101.c
r = nil lab = fail line: 4 col: 20
No: 	invalidExprCond201.c
r = nil lab = fail line: 4 col: 24
No: 	invalidExprInc01.c
r = nil lab = fail line: 5 col: 7
No: 	invalidExprUnary01.c
r = nil lab = fail line: 5 col: 10
No: 	invalidSizeof01.c
r = nil lab = fail line: 4 col: 26
No: 	multBrack01.c
r = nil lab = fail line: 9 col: 27
No: 	multEnumeratorBraces01.c
r = nil lab = fail line: 6 col: 9
No: 	multExpr01.c
r = nil lab = fail line: 9 col: 13
No: 	multExpr02.c
r = nil lab = fail line: 9 col: 9
No: 	multExprBraces01.c
r = nil lab = fail line: 8 col: 9
No: 	multSemicolon01.c
r = nil lab = fail line: 8 col: 23
No: 	multStat01.c
r = nil lab = fail line: 10 col: 5
No: 	semicolon01.c
r = nil lab = fail line: 2 col: 24
No: 	semicolon02.c
r = nil lab = fail line: 5 col: 23
No: 	semicolon03.c
r = nil lab = fail line: 7 col: 1
No: 	semicolon04.c
r = nil lab = fail line: 5 col: 1
No: 	semicolon05.c
r = nil lab = fail line: 7 col: 5
No: 	sqBrack01.c
r = nil lab = fail line: 4 col: 13
No: 	stat01.c
r = nil lab = fail line: 5 col: 1
No: 	stat02.c
r = nil lab = fail line: 6 col: 1
No: 	stat03.c
r = nil lab = fail line: 6 col: 1
No: 	statCase01.c
r = nil lab = fail line: 7 col: 5
No: 	statDefault01.c
r = nil lab = fail line: 7 col: 5
No: 	while01.c
r = nil lab = fail line: 6 col: 1
No: 	zeroDecl01.c
r = nil lab = fail line: 4 col: 1
