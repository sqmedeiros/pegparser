Yes: 	array01.c
Yes: 	array02.c
Yes: 	array03.c
Yes: 	assignment01.c
Yes: 	decl01.c
Yes: 	dowhile01.c
Yes: 	enum01.c
Yes: 	enum02.c
Yes: 	enum03.c
Yes: 	enum04.c
Yes: 	enum05.c
Yes: 	expand.c
Yes: 	expbinand.c
Yes: 	expbinor.c
Yes: 	expor.c
Yes: 	expor02.c
Yes: 	expunary01.c
Yes: 	expxor.c
Yes: 	for01.c
Yes: 	for02.c
Yes: 	function01.c
Yes: 	function02.c
Yes: 	global01.c
Yes: 	goto01.c
Yes: 	goto02.c
Yes: 	if01.c
Yes: 	if02.c
Yes: 	main01.c
Yes: 	main02.c
Yes: 	pointer01.c
Yes: 	sizeof01.c
Yes: 	struct01.c
Yes: 	struct02.c
Yes: 	struct03.c
Yes: 	struct04.c
Yes: 	switch01.c
Yes: 	switch02.c
Yes: 	switch03.c
Yes: 	switch04.c
Yes: 	ternary01.c
Yes: 	ternary02.c
Yes: 	while01.c
Yes: 	while02.c
Yes: 	while03.c
Yes: 	while04.c
No: 	braces01.c
/* expected '}' */
enum a{ b;

int main () {

}

/*OK:
enum a{b};
*/
translation_unit{"NONE", }

No: 	braces02.c
/* expected '}' */
struct point{ int x, y; ;


translation_unit{"NONE", }

No: 	braces03.c
/* expected '}' */

int x[] = {1,2,3;

/*OK:
int x[] = {1,2,3};
int x[] = {1,2,};
*/


translation_unit{"NONE", }

No: 	brack01.c
/* expected ')' */

int main(
{

}

/*OK:
int main()
{

}
*/


function_def{type_spec{"int", }, function_def{direct_declarator{"main", "(", "NONE", }, compound_stat{"{", "}", }, }, }

No: 	brack02.c
/* expected ')' */

int main(){
    while(true;
}

/*OK:
int main(){
    while(true);
}
*/
translation_unit{"NONE", }

No: 	brack03.c
/* expected ')' */

int main(){
    if(true
        printf("hello, world!\n");
}

/*OK:
int main(){
    if(true)
        printf("hello, world!\n");
}
*/
translation_unit{"NONE", }

No: 	brackIf01.c
/* expected '(' after "if" */

int main(){
    if true {
        puts("Hello, World");
    }
}

/*OK:
int main(){
    if(true){
        puts("Hello, World");
    }
}
*/
translation_unit{"NONE", }

No: 	brackSwitch01.c
/* expected '(' after "switch" */

int main(){
    int x = 1;
    switch x{
        case 1:
        break;
    }
}

/*OK:
int main(){
    int x = 1;
    switch(x){
        default:
        break;
    }
}
*/
translation_unit{"NONE", }

No: 	brackWhile01.c
/* expected '(' after "while" */

int main(){
    while true {
        puts("Hello, World");
        break;
    }
}

/*OK:
int main(){
    while(true){
        puts("Hello, World");
        break;
    }
}
*/
translation_unit{"NONE", }

No: 	brackWhile02.c
/* expected '(' after "while" */

int main(){
    do
        puts("Hello, World");
    while false;
}

/*OK:
int main(){
    do
        puts("Hello, World");
    while(false);
}
*/
translation_unit{"NONE", }

No: 	colon01.c
/* expected ':' */

int main(){
    int a;
    scanf("%d", &a);
    switch(a){
        case 1
            printf("it's 1\n");
            break;
        default:
            printf("not 1\n");
            break;
    }
    return 0;
}

/*OK:
int main(){
    int a;
    scanf("%d", &a);
    switch(a){
        case 1:
            printf("it's 1\n");
            break;
        default:
            printf("not 1\n");
            break;
    }
    return 0;
}
*/
translation_unit{"NONE", }

No: 	colon02.c
/* expected ':' */

int main(){
    printf("Hello, %s!\n", true ? "World" "Wrlod");
}

/*OK:
int main(){
    printf("Hello, %s!\n", true ? "World" : "Wrlod");
}
*/
translation_unit{"NONE", }

No: 	declAfterComma01.c
/* expected declarator after ',' */
int a, b, ;

/*OK:
int a, b, c;
*/
translation_unit{"NONE", }

No: 	endComment01.c
int main(){
}
/*comment not closed



translation_unit{function_def{type_spec{"int", }, function_def{direct_declarator{"main", "(", ")", }, compound_stat{"{", "}", }, }, }, "NONE", }

No: 	enumeratorComma01.c
/* expected enumerator */
enum a{ b, };

int x;

translation_unit{"NONE", }

No: 	exprAnd01.c
/* expected expression after '&' operator */

int main(){
    if(true&)
        printf("Hello, World!\n");
}

/*OK:
int main(){
    if(true&true)
        printf("Hello, World!\n");
}
*/
function_def{type_spec{"int", }, function_def{direct_declarator{"main", "(", ")", }, compound_stat{"{", stat{"if", "(", and_exp{primary_exp{"true", }, "&", "NONE", }, ")", stat{postfix_exp{primary_exp{"printf", }, "(", primary_exp{""Hello, World!\n"", }, ")", }, ";", }, }, "}", }, }, }

No: 	exprComma01.c
/* expected expression after ',' operator */

int main(){
    int vet[] = {1,2,3}, i;
    for(i=0; i < 3; printf("%d\n", vet[i]), );
}

/*OK:
int main(){
    int vet[] = {1,2,3}, i;
    for(i=0; i < 3; printf("%d\n", vet[i]), i++);
}
*/
translation_unit{"NONE", }

No: 	exprExcOr01.c
/* expected expression after '^' operator */

int main(){
    if(false^)
        printf("Hello, World!\n");
}

/*OK:
int main(){
    if(false^true)
        printf("Hello, World!\n");
}
*/
function_def{type_spec{"int", }, function_def{direct_declarator{"main", "(", ")", }, compound_stat{"{", stat{"if", "(", exclusive_or_exp{primary_exp{"false", }, "^", "NONE", }, ")", stat{postfix_exp{primary_exp{"printf", }, "(", primary_exp{""Hello, World!\n"", }, ")", }, ";", }, }, "}", }, }, }

No: 	exprIncOr01.c
/* expected expression after '|' operator */

int main(){
    if(false|)
        printf("Hello, World!\n");
}

/*OK:
int main(){
    if(false|true)
        printf("Hello, World!\n");
}
*/
function_def{type_spec{"int", }, function_def{direct_declarator{"main", "(", ")", }, compound_stat{"{", stat{"if", "(", inclusive_or_exp{primary_exp{"false", }, "|", "NONE", }, ")", stat{postfix_exp{primary_exp{"printf", }, "(", primary_exp{""Hello, World!\n"", }, ")", }, ";", }, }, "}", }, }, }

No: 	exprLogAnd01.c
/* expected expression after "&&" operator */

int main(){
    if(true&&)
        printf("Hello, World!\n");
}

/*OK:
int main(){
    if(true&&true)
        printf("Hello, World!\n");
}
*/
function_def{type_spec{"int", }, function_def{direct_declarator{"main", "(", ")", }, compound_stat{"{", stat{"if", "(", logical_and_exp{primary_exp{"true", }, "&&", "NONE", }, ")", stat{postfix_exp{primary_exp{"printf", }, "(", primary_exp{""Hello, World!\n"", }, ")", }, ";", }, }, "}", }, }, }

No: 	exprLogOr01.c
/* expected expression after "||" operator */

int main(){
    if(false||)
        printf("Hello, World!\n");
}

/*OK:
int main(){
    if(false||true)
        printf("Hello, World!\n");
}
*/
translation_unit{"NONE", }

No: 	identifier01.c
/* expected identifier */

int main(){
    goto;
    ret:
        return 0;
}

/*OK:
int main(){
    goto ret;
    ret:
        return 0;
}
*/
translation_unit{"NONE", }

No: 	identifier02.c
/* expected identifier */

struct { int a; } x;

int main(){
    printf("%d\n", x.1);
}

/*OK:
struct { int a; } x;

int main(){
    printf("%d\n", x.a);
}
*/
translation_unit{decl{type_spec{struct_or_union{"struct", }, "{", struct_decl{type_spec{"int", }, direct_declarator{"a", }, ";", }, "}", }, direct_declarator{"x", }, ";", }, function_def{type_spec{"int", }, function_def{direct_declarator{"main", "(", ")", }, compound_stat{"{", stat{postfix_exp{primary_exp{"printf", }, "(", primary_exp{""%d\n"", }, ",", postfix_exp{primary_exp{"x", }, ".", "NONE", }, ")", }, ";", }, "}", }, }, }, }

No: 	identifier03.c
/* expected identifier */

struct { int a; } * x;

int main(){
    printf("%d\n", x->1);
}

/*OK:
struct { int a; } x;

int main(){
    printf("%d\n", x->a);
}
*/
translation_unit{decl{type_spec{struct_or_union{"struct", }, "{", struct_decl{type_spec{"int", }, direct_declarator{"a", }, ";", }, "}", }, declarator{pointer{"*", }, direct_declarator{"x", }, }, ";", }, function_def{type_spec{"int", }, function_def{direct_declarator{"main", "(", ")", }, compound_stat{"{", stat{postfix_exp{primary_exp{"printf", }, "(", primary_exp{""%d\n"", }, ",", postfix_exp{primary_exp{"x", }, "->", "NONE", }, ")", }, ";", }, "}", }, }, }, }

No: 	invalidDecl01.c
/* invalid declaration */

;

int x;

/*OK:

int x;

*/
translation_unit{"NONE", }

No: 	invalidExpr01.c
/* invalid expression */
enum {
    a =
};

/*OK:
enum {
    a = 1
};

enum {
    a
};
*/
translation_unit{"NONE", }

No: 	invalidExpr02.c
/* expected case expression */

int main(){
    int a;
    scanf("%d", &a);
    switch(a){
        case :
            printf("it's 1\n");
            break;
        default:
            printf("not 1\n");
            break;
    }
    return 0;
}

/*OK:
int main(){
    int a;
    scanf("%d", &a);
    switch(a){
        case 1:
            printf("it's 1\n");
            break;
        default:
            printf("not 1\n");
            break;
    }
    return 0;
}
*/
translation_unit{"NONE", }

No: 	invalidExpr03.c
/* invalid expression */

int main(){
    int x = 1;
    switch(x){
        case :
            puts("Hello, World");
            break;
    }
}

/*OK:
int main(){
    int x = 1;
    switch(x){
        case 1:
            puts("Hello, World");
            break;
    }
}
*/
translation_unit{"NONE", }

No: 	invalidExpr04.c
/* invalid expression */

int main(){
    if(){
        puts("Hello, World");
    }
}

/*OK:
int main(){
    if(true){
        puts("Hello, World");
    }
}
*/
translation_unit{"NONE", }

No: 	invalidExpr05.c
/* invalid expression */

int main(){
    int x = 1;
    switch(){
        case 1:
        break;
    }
}

/*OK:
int main(){
    int x = 1;
    switch(x){
        default:
        break;
    }
}
*/
translation_unit{"NONE", }

No: 	invalidExpr06.c
/* invalid expression */

int main(){
    while(){
        puts("Hello, World");
        break;
    }
}

/*OK:
int main(){
    while(true){
        puts("Hello, World");
        break;
    }
}
*/
translation_unit{"NONE", }

No: 	invalidExpr07.c
/* invalid expression */

int main(){
    do
        puts("Hello, World");
    while();
}

/*OK:
int main(){
    do
        puts("Hello, World");
    while(false);
}
*/
translation_unit{"NONE", }

No: 	invalidExpr08.c
/* invalid expression */

int main(){
    int x = 1;
    x += ;
}

/*OK:
int main(){
    int x = 1;
    x += 0;
}
*/
function_def{type_spec{"int", }, function_def{direct_declarator{"main", "(", ")", }, compound_stat{"{", decl{type_spec{"int", }, init_declarator{direct_declarator{"x", }, "=", constant{"1", }, }, ";", }, stat{additive_exp{primary_exp{"x", }, "+", "NONE", }, ";", }, "}", }, }, }

No: 	invalidExpr09.c
/* invalid expression */

int main(){
    int x[2] = {0,1};
    printf("%d\n", x[]);
}

/*OK:
int main(){
    int x[2] = {0,1};
    printf("%d\n", x[1]);
}
*/
function_def{type_spec{"int", }, function_def{direct_declarator{"main", "(", ")", }, compound_stat{"{", decl{type_spec{"int", }, init_declarator{direct_declarator{"x", "[", constant{"2", }, "]", }, "=", initializer{"{", constant{"0", }, ",", constant{"1", }, "}", }, }, ";", }, stat{postfix_exp{primary_exp{"printf", }, "(", primary_exp{""%d\n"", }, ",", postfix_exp{primary_exp{"x", }, "[", "NONE", "]", }, ")", }, ";", }, "}", }, }, }

No: 	invalidExpr10.c
/* expected parameter expression */

int f(int a, int b){
    return a+b;
}

int main(){
    int x = f(1,);
}

/*OK:
int f(int a, int b){
    return a+b;
}

int main(){
    int x = f(1,);
}
*/
translation_unit{function_def{type_spec{"int", }, function_def{direct_declarator{"f", "(", param_type_list{param_decl{type_spec{"int", }, direct_declarator{"a", }, }, ",", param_decl{type_spec{"int", }, direct_declarator{"b", }, }, }, ")", }, compound_stat{"{", stat{"return", additive_exp{primary_exp{"a", }, "+", primary_exp{"b", }, }, ";", }, "}", }, }, }, function_def{type_spec{"int", }, function_def{direct_declarator{"main", "(", ")", }, compound_stat{"{", decl{type_spec{"int", }, init_declarator{direct_declarator{"x", }, "=", postfix_exp{primary_exp{"f", }, "(", constant{"1", }, ",", "NONE", ")", }, }, ";", }, "}", }, }, }, }

No: 	invalidExprCond101.c
/* invalid expression after '?' */

int main(){
    int x = true ? : 1;
}

/*OK:
int main(){
    int x = true ? 0 : 1;
}
*/
translation_unit{"NONE", }

No: 	invalidExprCond201.c
/* invalid expression after ':' */

int main(){
    int x = true ? 0 : ;
}

/*OK:
int main(){
    int x = true ? 0 : 1;
}
*/
translation_unit{"NONE", }

No: 	invalidExprInc01.c
/* invalid expression after "++" operator */

int main(){
    int x = 1;
    ++;
}

/*OK:
int main(){
    int x = 1;
    ++x;
}
*/
translation_unit{"NONE", }

No: 	invalidExprUnary01.c
/* invalid expression after unary operator */

int main(){
    int x=1, *y;
    y = &;
}

/*OK:
int main(){
    int x=1, *y;
    y = &x;
}
*/
translation_unit{"NONE", }

No: 	invalidSizeof01.c
/* invalid type_name/expression after "sizeof" */

int main(){
    printf("%d\n", sizeof);
}

/*OK:
int main(){
    printf("%d\n", sizeof int);
}
*/
function_def{type_spec{"int", }, function_def{direct_declarator{"main", "(", ")", }, compound_stat{"{", stat{postfix_exp{primary_exp{"printf", }, "(", primary_exp{""%d\n"", }, ",", "NONE", ")", }, ";", }, "}", }, }, }

No: 	multBrack01.c
/*
expected ';'
expected ')'
expected ')'
*/

int main(){
    int x;
    for(x = 0; x < 10, x++){
        if(x > 1{
            printf("x greater than 0\n";)
        }
    }
}

/*OK:

int main(){
    int x;
    for(x = 0; x < 10; x++){
        if(x > 1){
            printf("x greater than 0\n");
        }
    }
}

*/
translation_unit{"NONE", }

No: 	multEnumeratorBraces01.c
/*
expected enumerator
expected '}'
*/

enum a{ };

int main(){


/*OK:
enum a{ b };

int main(){ }
*/
translation_unit{"NONE", }

No: 	multExpr01.c
/*
invalid expression
expected expression after "||" operator
expected ')'
expected expression after additive operator
*/

int main(){
    int x = ;
    if(x < 3 || ){
        printf(;
    }
    return 0+;
}

/*OK:

int main(){
    int x = 0;
    if(x < 3 || x == 0){
        printf("ok\n");
    }
    return 0;
}
*/
translation_unit{"NONE", }

No: 	multExpr02.c
/*
invalid expression
expected enumerator after ','
invalid type_name/expression after "sizeof"
invalid expression after "--" operator
*/

enum a{
    ok =,
    = 1
};

int i = sizeof;

int f(){
    return --int;
}

/*OK:

enum a{
    ok = 0,
    bad = 1
};

int i = sizeof int;

int f(){
    return --i;
}
*/
translation_unit{"NONE", }

No: 	multExprBraces01.c
/*
invalid expression
expected '}'
*/

int main(){
    int x = 0, y = 1;
    x =/ y;
    while(true){
        x++;
        if(x == 10)
            break;
}

/*OK:

int main(){
    int x = 0, y = 1;
    x /= y;
    while(true){
        x++;
        if(x == 10)
            break;
    }
}
*/
translation_unit{"NONE", }

No: 	multSemicolon01.c
/*
expected ';'
expected ';'
expected ')'
expected '}'
*/

bool f(){ return true }

int main(){
    int x;
    for(x = 0; x < 10, x++){
        if(x || f(){
            printf("x greater than 0\n"));
        }
    }
}

/*OK:

bool f(){ return true; }

int main(){
    int x;
    for(x = 0; x < 10; x++){
        if(x || f()){
            printf("x greater than 0\n");
        }
    }
}
*/
translation_unit{"NONE", }

No: 	multStat01.c
/*
expected "while"
invalid expression
expected '(' after "if"
*/

int main(){
    int x;
    do break;
    x = 1;
    while(){
        x++;
        if 5==x)
            break;
    }
}

/*OK:

int main(){
    int x;
    do break; while(false);
    x = 1;
    while(true){
        x++;
        if(5==x)
            break;
    }
}
*/
translation_unit{"NONE", }

No: 	semicolon01.c
/* expected ';' */
struct point{ int x, y };

/*OK:
struct point{ int x, y; };
*/
translation_unit{"NONE", }

No: 	semicolon02.c
/* expected ';' */

int main(){
    int i;
    for(i = 0; i < 10 i++);
}

/*OK:
int main(){
    int i;
    for(i = 0; i < 10; i++);
}
*/
translation_unit{"NONE", }

No: 	semicolon03.c
/* expected ';' */

int main(){
    a:
        printf("hello, world!\n");
    goto a
}

/*OK:
int main(){
    a:
        printf("hello, world!\n");
    goto a;
}
*/
translation_unit{"NONE", }

No: 	semicolon04.c
/* expected ';' */

int main(){
    return 0
}

/*OK:
int main(){
    return 0;
}
*/
translation_unit{"NONE", }

No: 	semicolon05.c
/* expected ';' */

int main(){
    while(true){
        printf("Hello, World!\n");
        break
    }
    return 0;
}

/*OK:
int main(){
    while(true){
        printf("Hello, World!\n");
        break;
    }
    return 0;
}
*/
translation_unit{"NONE", }

No: 	sqBrack01.c
/* expected ']' */

int main(){
    int x[10;
}

/*OK:

int main(){
    int x[10];
}

*/


function_def{type_spec{"int", }, function_def{direct_declarator{"main", "(", ")", }, compound_stat{"{", decl{type_spec{"int", }, direct_declarator{"x", "[", constant{"10", }, "NONE", }, ";", }, "}", }, }, }

No: 	stat01.c
/* expected statement */

int main(){
    if(true)
}

/*OK:
int main(){
    if(true)
        puts("Hello, World");
}
*/
translation_unit{"NONE", }

No: 	stat02.c
/* expected statement */

int main(){
    if(false);
    else
}

int f () {
	return 42;
}

/*OK:
int main(){
    if(false);
    else
        puts("Hello, World");
}
*/
translation_unit{"NONE", }

No: 	stat03.c
/* invalid statement */

int main(){
    if(true)
        (
}

int f () {

}

/*OK:
int main(){
    if(true)
        puts("Hello, World");
}
*/
translation_unit{"NONE", }

No: 	statCase01.c
/* expected statement after "case" */

int main(){
    int x = 1;
    switch(x){
        case 1:
    }
}

/*OK:
int main(){
    int x = 1;
    switch(x){
        case 1:
        break;
    }
}
*/
translation_unit{"NONE", }

No: 	statDefault01.c
/* expected statement after "default" */

int main(){
    int x = 1;
    switch(x){
        default:
    }
}

/*OK:
int main(){
    int x = 1;
    switch(x){
        default:
        break;
    }
}
*/
translation_unit{"NONE", }

No: 	while01.c
/* expected "while" */

int main(){
    do
        puts("Hello, World");
}

/*OK:
int main(){
    do
        puts("Hello, World");
    while(false);
}
*/
translation_unit{"NONE", }

No: 	zeroDecl01.c
/* expected at least one struct/union declaration */

struct a{
};

/*OK:
struct a{
    int x;
};
*/
translation_unit{"NONE", }

irec: 	60	 ifail: 	0
