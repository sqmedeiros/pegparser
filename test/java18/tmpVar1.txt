Unique Path (UPath)
insideLoop: basicType, primitiveType, referenceType, classType, arrayType, dim, typeParameterModifier, typeBound, additionalBound, typeArguments, wildcardBounds, qualIdent, packageDeclaration, packageModifier, importDeclaration, typeDeclaration, classDeclaration, normalClassDeclaration, classModifier, typeParameters, superclass, superinterfaces, classBody, classBodyDeclaration, classMemberDeclaration, fieldDeclaration, variableInitializer, unannClassType, unannType, fieldModifier, methodDeclaration, methodHeader, formalParameterList, formalParameter, variableModifier, receiverParameter, result, methodModifier, throws, instanceInitializer, staticInitializer, constructorDeclaration, constructorDeclarator, constructorModifier, explicitConstructorInvocation, enumDeclaration, enumConstantList, enumConstant, enumConstantModifier, enumBodyDeclarations, interfaceDeclaration, normalInterfaceDeclaration, interfaceModifier, extendsInterfaces, interfaceMemberDeclaration, constantDeclaration, constantModifier, interfaceMethodDeclaration, interfaceMethodModifier, annotationTypeDeclaration, annotationTypeMemberDeclaration, annotationTypeElementDeclaration, annotationTypeElementModifier, defaultValue, annotation, elementValuePairList, elementValuePair, elementValue, elementValueArrayInitializer, elementValueList, arrayInitializer, variableInitializerList, block, blockStatements, blockStatement, localVariableDeclarationStatement, localVariableDeclaration, statement, statementExpression, switchBlockStatementGroup, switchLabels, switchLabel, basicForStatement, forInit, forUpdate, statementExpressionList, enhancedForStatement, tryStatement, catchClause, finally, expression, primary, primaryBase, primaryRest, parExpression, typeArgumentsOrDiamond, dimExpr, arguments, argumentList, unaryExpression, unaryExpressionNotPlusMinus, castExpression, infixExpression, conditionalExpression, assignmentExpression, assignment, leftHandSide, lambdaExpression, lambdaParameters, 
Uunique
float	 = 	1
while	 = 	2
protected	 = 	5
throws	 = 	1
throw	 = 	1
.	 = 	18
+	 = 	1
,	 = 	17
implements	 = 	1
*	 = 	1
return	 = 	1
transient	 = 	1
try	 = 	1
=	 = 	3
char	 = 	1
;	 = 	28
short	 = 	1
:	 = 	6
stictfp	 = 	1
?	 = 	1
static	 = 	8
byte	 = 	1
new	 = 	5
if	 = 	1
SKIP	 = 	1
volatile	 = 	1
Identifier	 = 	41
extends	 = 	4
long	 = 	1
[	 = 	6
else	 = 	1
int	 = 	1
do	 = 	1
boolean	 = 	1
(	 = 	16
AssignmentOperator	 = 	1
package	 = 	1
instanceof	 = 	1
abstract	 = 	5
import	 = 	1
strictfp	 = 	3
!	 = 	1
}	 = 	9
~	 = 	1
{	 = 	9
native	 = 	1
-	 = 	1
assert	 = 	1
catch	 = 	1
Literal	 = 	1
finally	 = 	1
switch	 = 	1
|	 = 	1
...	 = 	1
class	 = 	4
private	 = 	5
enum	 = 	1
::	 = 	6
++	 = 	4
case	 = 	1
--	 = 	4
public	 = 	8
super	 = 	8
for	 = 	2
@	 = 	2
>	 = 	3
this	 = 	4
->	 = 	1
double	 = 	1
and	 = 	1
break	 = 	1
InfixOperator	 = 	1
final	 = 	5
<	 = 	3
default	 = 	3
query	 = 	1
synchronized	 = 	2
continue	 = 	1
interface	 = 	2
]	 = 	6
void	 = 	2
)	 = 	16
Token 	1	 = 	46
Token 	2	 = 	6
Token 	3	 = 	5
Token 	4	 = 	5
Token 	5	 = 	5
Token 	6	 = 	4
Token 	7	 = 	nil
Token 	8	 = 	3
Token 	9	 = 	2
Token 	10	 = 	nil
Unique tokens (# 45): !, *, +, -, ->, ..., ?, AssignmentOperator, InfixOperator, Literal, and, assert, boolean, break, byte, case, catch, char, continue, do, double, else, enum, finally, float, if, implements, import, instanceof, int, long, native, package, query, return, short, stictfp, switch, throw, throws, transient, try, volatile, |, ~
calcTail
compilation: 	;, __SKIP, __empty, }
basicType: 	boolean, byte, char, double, float, int, long, short
primitiveType: 	boolean, byte, char, double, float, int, long, short
referenceType: 	>, ], __Identifier
classType: 	>, __Identifier
type: 	>, __Identifier, boolean, byte, char, double, float, int, long, short
arrayType: 	]
typeVariable: 	__Identifier
dim: 	]
typeParameter: 	>, __Identifier
typeParameterModifier: 	), __Identifier
typeBound: 	>, __Identifier
additionalBound: 	>, __Identifier
typeArguments: 	>
typeArgumentList: 	>, ?, ], __Identifier
typeArgument: 	>, ?, ], __Identifier
wildcard: 	>, ?, ], __Identifier
wildcardBounds: 	>, ], __Identifier
qualIdent: 	__Identifier
compilationUnit: 	;, __empty, }
packageDeclaration: 	;
packageModifier: 	), __Identifier
importDeclaration: 	;
typeDeclaration: 	;, }
classDeclaration: 	}
normalClassDeclaration: 	}
classModifier: 	), __Identifier, abstract, final, private, protected, public, static, strictfp
typeParameters: 	>
typeParameterList: 	>, __Identifier
superclass: 	>, __Identifier
superinterfaces: 	>, __Identifier
interfaceTypeList: 	>, __Identifier
classBody: 	}
classBodyDeclaration: 	;, }
classMemberDeclaration: 	;, }
fieldDeclaration: 	;
variableDeclaratorList: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
variableDeclarator: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
variableDeclaratorId: 	], __Identifier
variableInitializer: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
unannClassType: 	>, __Identifier
unannType: 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short
fieldModifier: 	), __Identifier, final, private, protected, public, static, transient, volatile
methodDeclaration: 	;, }
methodHeader: 	), >, ], __Identifier
methodDeclarator: 	), ]
formalParameterList: 	], __Identifier, this
formalParameter: 	], __Identifier
variableModifier: 	), __Identifier, final
receiverParameter: 	this
result: 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short, void
methodModifier: 	), __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized
throws: 	>, __Identifier
exceptionTypeList: 	>, __Identifier
exceptionType: 	>, __Identifier
methodBody: 	;, }
instanceInitializer: 	}
staticInitializer: 	}
constructorDeclaration: 	}
constructorDeclarator: 	)
constructorModifier: 	), __Identifier, private, protected, public
constructorBody: 	}
explicitConstructorInvocation: 	;
enumDeclaration: 	}
enumBody: 	}
enumConstantList: 	), __Identifier, }
enumConstant: 	), __Identifier, }
enumConstantModifier: 	), __Identifier
enumBodyDeclarations: 	;, }
interfaceDeclaration: 	}
normalInterfaceDeclaration: 	}
interfaceModifier: 	), __Identifier, abstract, private, protected, public, static, strictfp
extendsInterfaces: 	>, __Identifier
interfaceBody: 	}
interfaceMemberDeclaration: 	;, }
constantDeclaration: 	;
constantModifier: 	), __Identifier, final, public, static
interfaceMethodDeclaration: 	;, }
interfaceMethodModifier: 	), __Identifier, abstract, default, public, static, strictfp
annotationTypeDeclaration: 	}
annotationTypeBody: 	}
annotationTypeMemberDeclaration: 	;, }
annotationTypeElementDeclaration: 	;
annotationTypeElementModifier: 	), __Identifier, abstract, public
defaultValue: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
annotation: 	), __Identifier
normalAnnotation: 	)
elementValuePairList: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
elementValuePair: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
elementValue: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
elementValueArrayInitializer: 	}
elementValueList: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
markerAnnotation: 	__Identifier
singleElementAnnotation: 	)
arrayInitializer: 	}
variableInitializerList: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
block: 	}
blockStatements: 	;, }
blockStatement: 	;, }
localVariableDeclarationStatement: 	;
localVariableDeclaration: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
statement: 	;, }
statementExpression: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
switchBlock: 	}
switchBlockStatementGroup: 	;, }
switchLabels: 	:
switchLabel: 	:
enumConstantName: 	__Identifier
basicForStatement: 	;, }
forInit: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
forUpdate: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
statementExpressionList: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
enhancedForStatement: 	;, }
tryStatement: 	}
catchClause: 	}
catchFormalParameter: 	], __Identifier
catchType: 	>, __Identifier
finally: 	}
resourceSpecification: 	)
resourceList: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
resource: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
expression: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
primary: 	), ], __Identifier, __Literal, class, new, this, }
primaryBase: 	), ], __Identifier, __Literal, class, new, this, }
primaryRest: 	), ], __Identifier, }
parExpression: 	)
classCreator: 	), }
classTypeWithDiamond: 	>, __Identifier
typeArgumentsOrDiamond: 	>
arrayCreator: 	], }
dimExpr: 	]
arguments: 	)
argumentList: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
unaryExpression: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
unaryExpressionNotPlusMinus: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
castExpression: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
infixExpression: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
InfixOperator: 	!=, %, &, &&, *, +, -, /, <, <<, <=, ==, >, >=, >>, >>>, ^, |, ||
conditionalExpression: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
assignmentExpression: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
assignment: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
leftHandSide: 	), ], __Identifier, __Literal, class, new, this, }
AssignmentOperator: 	%=, &=, *=, +=, -=, /=, <<=, =, >>=, >>>=, ^=, |=
lambdaExpression: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
lambdaParameters: 	), __Identifier
inferredFormalParameterList: 	__Identifier
lambdaBody: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
constantExpression: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
Identifier: 	$, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, _, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z
Keywords: 	abstract, assert, boolean, break, byte, case, catch, char, class, const, continue, default, do, double, else, enum, extends, false, final, finally, float, for, goto, if, implements, import, instanceof, int, interface, long, native, new, null, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, transient, true, try, void, volatile, while
Literal: 	__BooleanLiteral, __CharLiteral, __FloatLiteral, __IntegerLiteral, __NullLiteral, __StringLiteral
IntegerLiteral: 	L, __BinaryNumeral, __DecimalNumeral, __HexNumeral, __OctalNumeral, l
DecimalNumeral: 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
HexNumeral: 	__HexDigits
OctalNumeral: 	0, 1, 2, 3, 4, 5, 6, 7
BinaryNumeral: 	0, 1
FloatLiteral: 	__DecimalFloatingPointLiteral, __HexaDecimalFloatingPointLiteral
DecimalFloatingPointLiteral: 	., D, F, __Digits, __Exponent, d, f
Exponent: 	__Digits
HexaDecimalFloatingPointLiteral: 	D, F, __BinaryExponent, d, f
HexSignificand: 	., __HexDigits, __HexNumeral
HexDigits: 	__HexDigit
HexDigit: 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, a, b, c, d, e, f
BinaryExponent: 	__Digits
Digits: 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
BooleanLiteral: 	false, true
CharLiteral: 	'
StringLiteral: 	"
NullLiteral: 	null
COMMENT: 	*/, //, __any
SPACE: 		, 
, , , ,  , __COMMENT
SKIP: 		, 
, , , ,  , __COMMENT, __empty
Global Prefix
compilation: 	
basicType: 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~
primitiveType: 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, extends, instanceof, new, query, return, super, throw, {, }, ~
referenceType: 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, extends, instanceof, query, return, super, throw, {, }, ~
classType: 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, [, __AssignmentOperator, __InfixOperator, and, assert, case, default, do, else, extends, implements, instanceof, new, query, return, super, throw, throws, {, |, }, ~
type: 	new
arrayType: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
typeVariable: 	,, extends, throws
dim: 	), >, ], __Identifier, boolean, byte, char, double, float, int, long, short
typeParameter: 	,, <
typeParameterModifier: 	), ,, <, __Identifier
typeBound: 	__Identifier
additionalBound: 	>, ], __Identifier
typeArguments: 	., ::, __Identifier, new, {
typeArgumentList: 	<
typeArgument: 	,, <
wildcard: 	,, <
wildcardBounds: 	?
qualIdent: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, @, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, import, query, return, static, throw, {, }, ~
compilationUnit: 	__SKIP
packageDeclaration: 	__SKIP
packageModifier: 	), __Identifier, __SKIP
importDeclaration: 	;, __SKIP
typeDeclaration: 	;, __SKIP, }
classDeclaration: 	:, ;, __SKIP, {, }
normalClassDeclaration: 	:, ;, __SKIP, {, }
classModifier: 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }
typeParameters: 	), ;, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }
typeParameterList: 	<
superclass: 	>, __Identifier
superinterfaces: 	>, __Identifier
interfaceTypeList: 	extends, implements
classBody: 	), >, __Identifier
classBodyDeclaration: 	;, {, }
classMemberDeclaration: 	;, {, }
fieldDeclaration: 	;, {, }
variableDeclaratorList: 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short
variableDeclarator: 	,, >, ], __Identifier, boolean, byte, char, double, float, int, long, short
variableDeclaratorId: 	,, ..., >, ], __Identifier, boolean, byte, char, double, float, int, long, short
variableInitializer: 	,, =, {
unannClassType: 	(, ), ,, :, ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, transient, volatile, {, }
unannType: 	(, ), ,, :, ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, transient, volatile, {, }
fieldModifier: 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }
methodDeclaration: 	;, {, }
methodHeader: 	), ;, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }
methodDeclarator: 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short, void
formalParameterList: 	(
formalParameter: 	(, ,
variableModifier: 	(, ), ,, :, ;, __Identifier, final, {, }
receiverParameter: 	(
result: 	), ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }
methodModifier: 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }
throws: 	), ]
exceptionTypeList: 	throws
exceptionType: 	,, throws
methodBody: 	), >, ], __Identifier
instanceInitializer: 	;, {, }
staticInitializer: 	;, {, }
constructorDeclaration: 	;, {, }
constructorDeclarator: 	), ;, __Identifier, private, protected, public, {, }
constructorModifier: 	), ;, __Identifier, private, protected, public, {, }
constructorBody: 	), >, __Identifier
explicitConstructorInvocation: 	{
enumDeclaration: 	:, ;, __SKIP, {, }
enumBody: 	>, __Identifier
enumConstantList: 	{
enumConstant: 	,, {
enumConstantModifier: 	), ,, __Identifier, {
enumBodyDeclarations: 	), ,, __Identifier, {, }
interfaceDeclaration: 	;, __SKIP, {, }
normalInterfaceDeclaration: 	;, __SKIP, {, }
interfaceModifier: 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }
extendsInterfaces: 	>, __Identifier
interfaceBody: 	>, __Identifier
interfaceMemberDeclaration: 	;, {, }
constantDeclaration: 	;, {, }
constantModifier: 	), ;, __Identifier, final, public, static, {, }
interfaceMethodDeclaration: 	;, {, }
interfaceMethodModifier: 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }
annotationTypeDeclaration: 	;, __SKIP, {, }
annotationTypeBody: 	__Identifier
annotationTypeMemberDeclaration: 	;, {, }
annotationTypeElementDeclaration: 	;, {, }
annotationTypeElementModifier: 	), ;, __Identifier, abstract, public, {, }
defaultValue: 	), ]
annotation: 	!, (, ), +, ++, ,, -, --, ->, ., :, ;, <, =, >, [, ], __AssignmentOperator, __Identifier, __InfixOperator, __SKIP, abstract, and, assert, boolean, byte, case, char, default, do, double, else, extends, final, float, implements, instanceof, int, long, native, new, private, protected, public, query, return, short, static, stictfp, strictfp, super, synchronized, throw, throws, transient, volatile, {, |, }, ~
normalAnnotation: 	@
elementValuePairList: 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }
elementValuePair: 	(, ), ++, ,, --, >, ], __Identifier, __Literal, class, new, this, }
elementValue: 	(, ,, =, default, {
elementValueArrayInitializer: 	(, ,, =, default, {
elementValueList: 	{
markerAnnotation: 	@
singleElementAnnotation: 	@
arrayInitializer: 	,, =, ], {
variableInitializerList: 	{
block: 	), ->, :, ;, >, ], __Identifier, do, else, finally, static, try, {, }
blockStatements: 	:, ;, {
blockStatement: 	:, ;, {, }
localVariableDeclarationStatement: 	:, ;, {, }
localVariableDeclaration: 	(, :, ;, {, }
statement: 	), :, ;, do, else, {, }
statementExpression: 	(, ), ,, :, ;, do, else, {, }
switchBlock: 	)
switchBlockStatementGroup: 	;, {, }
switchLabels: 	;, {, }
switchLabel: 	:, ;, {, }
enumConstantName: 	case
basicForStatement: 	), :, ;, do, else, {, }
forInit: 	(
forUpdate: 	;
statementExpressionList: 	(, ;
enhancedForStatement: 	), :, ;, do, else, {, }
tryStatement: 	), :, ;, do, else, {, }
catchClause: 	}
catchFormalParameter: 	(
catchType: 	(, ), __Identifier, final
finally: 	}
resourceSpecification: 	try
resourceList: 	(
resource: 	(, ,
expression: 	(, ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {
primary: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
primaryBase: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
primaryRest: 	), ], __Identifier, __Literal, class, new, this, }
parExpression: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, if, query, return, switch, synchronized, throw, while, {, }, ~
classCreator: 	new
classTypeWithDiamond: 	), >, __Identifier, new
typeArgumentsOrDiamond: 	__Identifier
arrayCreator: 	new
dimExpr: 	]
arguments: 	>, __Identifier, super, this
argumentList: 	(
unaryExpression: 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
unaryExpressionNotPlusMinus: 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
castExpression: 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
infixExpression: 	(, ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, default, query, return, throw, {
InfixOperator: 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
conditionalExpression: 	(, ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, default, query, return, throw, {
assignmentExpression: 	(, ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {
assignment: 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, do, else, query, return, throw, {, }
leftHandSide: 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, do, else, query, return, throw, {, }
AssignmentOperator: 	), ], __Identifier, __Literal, class, new, this, }
lambdaExpression: 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {
lambdaParameters: 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {
inferredFormalParameterList: 	(
lambdaBody: 	->
constantExpression: 	case
Identifier: 	!, (, ), +, ++, ,, -, --, ->, ., ..., :, ::, ;, <, =, >, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, __Literal, abstract, and, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, extends, final, float, implements, import, instanceof, int, interface, long, native, new, package, private, protected, public, query, return, short, static, stictfp, strictfp, super, synchronized, this, throw, throws, transient, void, volatile, {, |, }, ~
Keywords: 	
Literal: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
IntegerLiteral: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
DecimalNumeral: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
HexNumeral: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
OctalNumeral: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
BinaryNumeral: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
FloatLiteral: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
DecimalFloatingPointLiteral: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
Exponent: 	., __Digits
HexaDecimalFloatingPointLiteral: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
HexSignificand: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
HexDigits: 	., 0X, 0x
HexDigit: 	., 0X, 0x, _, __HexDigit
BinaryExponent: 	__HexSignificand
Digits: 	!, (, ), +, ++, ,, -, --, ->, ., :, ;, =, E, P, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, e, else, p, query, return, throw, {, }, ~
BooleanLiteral: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
CharLiteral: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
StringLiteral: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
NullLiteral: 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
COMMENT: 		, 
, , , ,  , __COMMENT
SPACE: 	
SKIP: 	
calcPrefix
statementExpression	 -> 
	(statementExpression, statementExpressionList): 	(, ;
	(statementExpression, statementExpressionList): 	,
	(statementExpression, statement): 	), :, ;, do, else, {, }
__)	 -> 
	(__), lambdaParameters): 	__Identifier
	(__), lambdaParameters): 	(, ], __Identifier, this
	(__), castExpression): 	>, ], __Identifier
	(__), catchClause): 	], __Identifier
	(__), castExpression): 	>, ], __Identifier
	(__), methodDeclarator): 	(, ], __Identifier, this
	(__), basicForStatement): 	), ++, --, ;, >, ], __Identifier, __Literal, class, new, this, }
	(__), castExpression): 	boolean, byte, char, double, float, int, long, short
	(__), parExpression): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__), singleElementAnnotation): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__), resourceSpecification): 	), ++, --, ;, >, ], __Identifier, __Literal, class, new, this, }
	(__), annotationTypeElementDeclaration): 	(
	(__), normalAnnotation): 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__), arguments): 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__), constructorDeclarator): 	(, ], __Identifier, this
	(__), enhancedForStatement): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
interfaceMemberDeclaration	 -> 
	(interfaceMemberDeclaration, interfaceBody): 	;, {, }
typeDeclaration	 -> 
	(typeDeclaration, compilationUnit): 	;, __SKIP, }
forUpdate	 -> 
	(forUpdate, basicForStatement): 	;
lambdaBody	 -> 
	(lambdaBody, lambdaExpression): 	->
variableDeclarator	 -> 
	(variableDeclarator, variableDeclaratorList): 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short
	(variableDeclarator, variableDeclaratorList): 	,
__instanceof	 -> 
	(__instanceof, infixExpression): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
__strictfp	 -> 
	(__strictfp, interfaceMethodModifier): 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }
	(__strictfp, classModifier): 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }
	(__strictfp, interfaceModifier): 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }
methodDeclaration	 -> 
	(methodDeclaration, classMemberDeclaration): 	;, {, }
methodDeclarator	 -> 
	(methodDeclarator, methodHeader): 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short, void
	(methodDeclarator, methodHeader): 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short, void
classBody	 -> 
	(classBody, enumConstant): 	), __Identifier
	(classBody, normalClassDeclaration): 	>, __Identifier
	(classBody, classCreator): 	)
enumBodyDeclarations	 -> 
	(enumBodyDeclarations, enumBody): 	), ,, __Identifier, {, }
wildcardBounds	 -> 
	(wildcardBounds, wildcard): 	?
additionalBound	 -> 
	(additionalBound, castExpression): 	>, ], __Identifier
	(additionalBound, typeBound): 	>, __Identifier
	(additionalBound, castExpression): 	>, ], __Identifier
__boolean	 -> 
	(__boolean, basicType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~
parExpression	 -> 
	(parExpression, statement): 	while
	(parExpression, statement): 	synchronized
	(parExpression, primaryBase): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
	(parExpression, statement): 	while
	(parExpression, statement): 	if
	(parExpression, statement): 	switch
annotationTypeDeclaration	 -> 
	(annotationTypeDeclaration, interfaceDeclaration): 	;, __SKIP, {, }
finally	 -> 
	(finally, tryStatement): 	}
	(finally, tryStatement): 	}
leftHandSide	 -> 
	(leftHandSide, assignment): 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, do, else, query, return, throw, {, }
fieldDeclaration	 -> 
	(fieldDeclaration, classMemberDeclaration): 	;, {, }
__<	 -> 
	(__<, typeArgumentsOrDiamond): 	__Identifier
	(__<, typeArguments): 	., ::, __Identifier, new, {
	(__<, typeParameters): 	), ;, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }
__synchronized	 -> 
	(__synchronized, methodModifier): 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }
	(__synchronized, statement): 	), :, ;, do, else, {, }
__@	 -> 
	(__@, annotationTypeDeclaration): 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }
	(__@, annotation): 	!, (, ), +, ++, ,, -, --, ->, ., :, ;, <, =, >, [, ], __AssignmentOperator, __Identifier, __InfixOperator, __SKIP, abstract, and, assert, boolean, byte, case, char, default, do, double, else, extends, final, float, implements, instanceof, int, long, native, new, private, protected, public, query, return, short, static, stictfp, strictfp, super, synchronized, throw, throws, transient, volatile, {, |, }, ~
statementExpressionList	 -> 
	(statementExpressionList, forInit): 	(
	(statementExpressionList, forUpdate): 	;
referenceType	 -> 
	(referenceType, infixExpression): 	instanceof
	(referenceType, castExpression): 	(
	(referenceType, primaryBase): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
	(referenceType, typeArgument): 	,, <
	(referenceType, castExpression): 	(
	(referenceType, wildcardBounds): 	super
	(referenceType, wildcardBounds): 	extends
enumConstant	 -> 
	(enumConstant, enumConstantList): 	{
	(enumConstant, enumConstantList): 	,
__native	 -> 
	(__native, methodModifier): 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }
annotationTypeElementModifier	 -> 
	(annotationTypeElementModifier, annotationTypeElementDeclaration): 	), ;, __Identifier, abstract, public, {, }
__protected	 -> 
	(__protected, classModifier): 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }
	(__protected, fieldModifier): 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }
	(__protected, constructorModifier): 	), ;, __Identifier, private, protected, public, {, }
	(__protected, methodModifier): 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }
	(__protected, interfaceModifier): 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }
interfaceDeclaration	 -> 
	(interfaceDeclaration, classMemberDeclaration): 	;, {, }
	(interfaceDeclaration, typeDeclaration): 	;, __SKIP, }
	(interfaceDeclaration, annotationTypeMemberDeclaration): 	;, {, }
	(interfaceDeclaration, interfaceMemberDeclaration): 	;, {, }
resourceSpecification	 -> 
	(resourceSpecification, tryStatement): 	try
SKIP	 -> 
	(SKIP, compilation): 	
__case	 -> 
	(__case, switchLabel): 	:, ;, {, }
Identifier	 -> 
	(Identifier, primaryBase): 	::, >
	(Identifier, qualIdent): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, @, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, import, query, return, static, throw, {, }, ~
	(Identifier, primaryBase): 	.
	(Identifier, typeVariable): 	), ,, __Identifier, extends, throws
	(Identifier, statement): 	continue
	(Identifier, normalClassDeclaration): 	class
	(Identifier, variableDeclaratorId): 	,, ..., >, ], __Identifier, boolean, byte, char, double, float, int, long, short
	(Identifier, classType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, [, __AssignmentOperator, __Identifier, __InfixOperator, and, assert, case, default, do, else, extends, implements, instanceof, new, query, return, super, throw, throws, {, |, }, ~
	(Identifier, primaryBase): 	::, >
	(Identifier, annotationTypeDeclaration): 	interface
	(Identifier, methodDeclarator): 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short, void
	(Identifier, statement): 	break
	(Identifier, statement): 	), :, ;, do, else, {, }
	(Identifier, typeParameter): 	), ,, <, __Identifier
	(Identifier, unannClassType): 	(, ), ,, :, ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, transient, volatile, {, }
	(Identifier, packageDeclaration): 	.
	(Identifier, primaryBase): 	::, >
	(Identifier, elementValuePair): 	(, ), ++, ,, --, >, ], __Identifier, __Literal, class, new, this, }
	(Identifier, annotationTypeElementDeclaration): 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short
	(Identifier, inferredFormalParameterList): 	,
	(Identifier, packageDeclaration): 	package
	(Identifier, constructorDeclarator): 	), ;, >, __Identifier, private, protected, public, {, }
	(Identifier, inferredFormalParameterList): 	(
	(Identifier, lambdaParameters): 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {
	(Identifier, primaryRest): 	., >
	(Identifier, unannClassType): 	), ., __Identifier
	(Identifier, classTypeWithDiamond): 	), >, __Identifier, new
	(Identifier, classTypeWithDiamond): 	), ., __Identifier
	(Identifier, enumConstantName): 	case
	(Identifier, primaryRest): 	::, >
	(Identifier, primaryBase): 	., >
	(Identifier, primaryBase): 	.
	(Identifier, primaryRest): 	.
	(Identifier, receiverParameter): 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short
	(Identifier, enumDeclaration): 	enum
	(Identifier, classType): 	), ., __Identifier
	(Identifier, primaryBase): 	., >
	(Identifier, primaryBase): 	>
	(Identifier, enumConstant): 	), ,, __Identifier, {
	(Identifier, qualIdent): 	.
	(Identifier, normalInterfaceDeclaration): 	interface
__long	 -> 
	(__long, basicType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~
__break	 -> 
	(__break, statement): 	), :, ;, do, else, {, }
constantModifier	 -> 
	(constantModifier, constantDeclaration): 	), ;, __Identifier, final, public, static, {, }
type	 -> 
	(type, arrayCreator): 	new
	(type, arrayCreator): 	new
methodBody	 -> 
	(methodBody, methodDeclaration): 	), >, ], __Identifier
	(methodBody, interfaceMethodDeclaration): 	), >, ], __Identifier
__char	 -> 
	(__char, basicType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~
expression	 -> 
	(expression, primaryBase): 	[
	(expression, conditionalExpression): 	:
	(expression, statement): 	:
	(expression, statement): 	throw
	(expression, dimExpr): 	[
	(expression, resource): 	=
	(expression, basicForStatement): 	;
	(expression, conditionalExpression): 	query
	(expression, statement): 	assert
	(expression, statement): 	return
	(expression, enhancedForStatement): 	:
	(expression, argumentList): 	(
	(expression, assignment): 	__AssignmentOperator
	(expression, constantExpression): 	case
	(expression, lambdaBody): 	->
	(expression, argumentList): 	,
	(expression, parExpression): 	(
	(expression, variableInitializer): 	,, =, {
	(expression, primaryRest): 	[
receiverParameter	 -> 
	(receiverParameter, formalParameterList): 	(
singleElementAnnotation	 -> 
	(singleElementAnnotation, annotation): 	@
inferredFormalParameterList	 -> 
	(inferredFormalParameterList, lambdaParameters): 	(
importDeclaration	 -> 
	(importDeclaration, compilationUnit): 	;, __SKIP
formalParameterList	 -> 
	(formalParameterList, constructorDeclarator): 	(
	(formalParameterList, methodDeclarator): 	(
	(formalParameterList, lambdaParameters): 	(
lambdaParameters	 -> 
	(lambdaParameters, lambdaExpression): 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {
fieldModifier	 -> 
	(fieldModifier, fieldDeclaration): 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }
AssignmentOperator	 -> 
	(AssignmentOperator, assignment): 	), ], __Identifier, __Literal, class, new, this, }
constructorDeclarator	 -> 
	(constructorDeclarator, constructorDeclaration): 	), ;, __Identifier, private, protected, public, {, }
__new	 -> 
	(__new, primaryBase): 	.
	(__new, primaryBase): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
	(__new, primaryBase): 	::, >
	(__new, primaryBase): 	::
	(__new, primaryRest): 	.
infixExpression	 -> 
	(infixExpression, conditionalExpression): 	(, ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, default, query, return, throw, {
__transient	 -> 
	(__transient, fieldModifier): 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }
castExpression	 -> 
	(castExpression, unaryExpressionNotPlusMinus): 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
typeArgumentList	 -> 
	(typeArgumentList, typeArguments): 	<
enumConstantList	 -> 
	(enumConstantList, enumBody): 	{
__!	 -> 
	(__!, unaryExpressionNotPlusMinus): 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
__~	 -> 
	(__~, unaryExpressionNotPlusMinus): 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
__private	 -> 
	(__private, constructorModifier): 	), ;, __Identifier, private, protected, public, {, }
	(__private, classModifier): 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }
	(__private, methodModifier): 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }
	(__private, fieldModifier): 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }
	(__private, interfaceModifier): 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }
annotationTypeBody	 -> 
	(annotationTypeBody, annotationTypeDeclaration): 	__Identifier
unaryExpression	 -> 
	(unaryExpression, unaryExpression): 	+
	(unaryExpression, unaryExpressionNotPlusMinus): 	!
	(unaryExpression, unaryExpression): 	-
	(unaryExpression, infixExpression): 	__InfixOperator
	(unaryExpression, unaryExpressionNotPlusMinus): 	~
	(unaryExpression, infixExpression): 	(, ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, default, query, return, throw, {
	(unaryExpression, castExpression): 	)
__+	 -> 
	(__+, unaryExpression): 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
argumentList	 -> 
	(argumentList, arguments): 	(
markerAnnotation	 -> 
	(markerAnnotation, annotation): 	@
typeArgument	 -> 
	(typeArgument, typeArgumentList): 	<
	(typeArgument, typeArgumentList): 	,
dimExpr	 -> 
	(dimExpr, arrayCreator): 	]
packageModifier	 -> 
	(packageModifier, packageDeclaration): 	), __Identifier, __SKIP
primitiveType	 -> 
	(primitiveType, type): 	new
	(primitiveType, castExpression): 	(
	(primitiveType, arrayType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
	(primitiveType, referenceType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, extends, instanceof, query, return, super, throw, {, }, ~
catchFormalParameter	 -> 
	(catchFormalParameter, catchClause): 	(
classTypeWithDiamond	 -> 
	(classTypeWithDiamond, classCreator): 	), >, __Identifier, new
__enum	 -> 
	(__enum, enumDeclaration): 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }
__and	 -> 
	(__and, additionalBound): 	>, ], __Identifier
basicForStatement	 -> 
	(basicForStatement, statement): 	), :, ;, do, else, {, }
arrayType	 -> 
	(arrayType, primaryBase): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
unannType	 -> 
	(unannType, resource): 	(, ), ,, __Identifier, final
	(unannType, formalParameter): 	(, ), ,, __Identifier, final
	(unannType, result): 	), ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }
	(unannType, fieldDeclaration): 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }
	(unannType, receiverParameter): 	(, ), __Identifier, final
	(unannType, formalParameter): 	(, ), ,, __Identifier, final
	(unannType, annotationTypeElementDeclaration): 	), ;, __Identifier, abstract, public, {, }
	(unannType, enhancedForStatement): 	(, ), __Identifier, final
	(unannType, localVariableDeclaration): 	(, ), :, ;, __Identifier, final, {, }
	(unannType, constantDeclaration): 	), ;, __Identifier, final, public, static, {, }
arrayCreator	 -> 
	(arrayCreator, primaryBase): 	new
enumDeclaration	 -> 
	(enumDeclaration, classDeclaration): 	:, ;, __SKIP, {, }
__query	 -> 
	(__query, conditionalExpression): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
__::	 -> 
	(__::, primaryBase): 	__Identifier
	(__::, primaryBase): 	>, ], __Identifier
	(__::, primaryRest): 	), ], __Identifier, __Literal, class, new, this, }
	(__::, primaryBase): 	]
	(__::, primaryBase): 	super
	(__::, primaryBase): 	super
primary	 -> 
	(primary, leftHandSide): 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, do, else, query, return, throw, {, }
	(primary, statementExpression): 	(, ), ,, :, ;, do, else, {, }
	(primary, unaryExpressionNotPlusMinus): 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
	(primary, explicitConstructorInvocation): 	{
	(primary, unaryExpression): 	++, --
	(primary, statementExpression): 	++, --
	(primary, statementExpression): 	(, ), ,, :, ;, do, else, {, }
__for	 -> 
	(__for, basicForStatement): 	), :, ;, do, else, {, }
	(__for, enhancedForStatement): 	), :, ;, do, else, {, }
statement	 -> 
	(statement, basicForStatement): 	)
	(statement, statement): 	)
	(statement, enhancedForStatement): 	)
	(statement, statement): 	:
	(statement, blockStatement): 	:, ;, {, }
	(statement, statement): 	)
	(statement, statement): 	else
	(statement, statement): 	do
primaryRest	 -> 
	(primaryRest, primary): 	), ], __Identifier, __Literal, class, new, this, }
resourceList	 -> 
	(resourceList, resourceSpecification): 	(
classBodyDeclaration	 -> 
	(classBodyDeclaration, classBody): 	;, {, }
	(classBodyDeclaration, enumBodyDeclarations): 	;, }
__this	 -> 
	(__this, explicitConstructorInvocation): 	>, {
	(__this, primaryBase): 	.
	(__this, receiverParameter): 	., >, ], __Identifier, boolean, byte, char, double, float, int, long, short
	(__this, primaryBase): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
__default	 -> 
	(__default, interfaceMethodModifier): 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }
	(__default, defaultValue): 	), ]
	(__default, switchLabel): 	:, ;, {, }
__(	 -> 
	(__(, singleElementAnnotation): 	__Identifier
	(__(, catchClause): 	catch
	(__(, basicForStatement): 	for
	(__(, lambdaParameters): 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {
	(__(, annotationTypeElementDeclaration): 	__Identifier
	(__(, parExpression): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, if, query, return, switch, synchronized, throw, while, {, }, ~
	(__(, lambdaParameters): 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {
	(__(, constructorDeclarator): 	__Identifier
	(__(, castExpression): 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
	(__(, methodDeclarator): 	__Identifier
	(__(, arguments): 	>, __Identifier, super, this
	(__(, castExpression): 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
	(__(, resourceSpecification): 	try
	(__(, castExpression): 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
	(__(, normalAnnotation): 	__Identifier
	(__(, enhancedForStatement): 	for
lambdaExpression	 -> 
	(lambdaExpression, expression): 	(, ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {
	(lambdaExpression, castExpression): 	)
explicitConstructorInvocation	 -> 
	(explicitConstructorInvocation, constructorBody): 	{
defaultValue	 -> 
	(defaultValue, annotationTypeElementDeclaration): 	), ]
constructorBody	 -> 
	(constructorBody, constructorDeclaration): 	), >, __Identifier
__catch	 -> 
	(__catch, catchClause): 	}
typeParameter	 -> 
	(typeParameter, typeParameterList): 	<
	(typeParameter, typeParameterList): 	,
classMemberDeclaration	 -> 
	(classMemberDeclaration, classBodyDeclaration): 	;, {, }
__package	 -> 
	(__package, packageDeclaration): 	), __Identifier, __SKIP
primaryBase	 -> 
	(primaryBase, primary): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
__finally	 -> 
	(__finally, finally): 	}
__|	 -> 
	(__|, catchType): 	>, __Identifier
__final	 -> 
	(__final, constantModifier): 	), ;, __Identifier, final, public, static, {, }
	(__final, classModifier): 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }
	(__final, methodModifier): 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }
	(__final, variableModifier): 	(, ), ,, :, ;, __Identifier, final, {, }
	(__final, fieldModifier): 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }
packageDeclaration	 -> 
	(packageDeclaration, compilationUnit): 	__SKIP
__>	 -> 
	(__>, typeArguments): 	>, ?, ], __Identifier
	(__>, typeParameters): 	>, __Identifier
	(__>, typeArgumentsOrDiamond): 	<
variableModifier	 -> 
	(variableModifier, formalParameter): 	(, ), ,, __Identifier, final
	(variableModifier, localVariableDeclaration): 	(, ), :, ;, __Identifier, final, {, }
	(variableModifier, catchFormalParameter): 	(, ), __Identifier, final
	(variableModifier, resource): 	(, ), ,, __Identifier, final
	(variableModifier, receiverParameter): 	(, ), __Identifier, final
	(variableModifier, enhancedForStatement): 	(, ), __Identifier, final
	(variableModifier, formalParameter): 	(, ), ,, __Identifier, final
typeArgumentsOrDiamond	 -> 
	(typeArgumentsOrDiamond, classTypeWithDiamond): 	__Identifier
	(typeArgumentsOrDiamond, classTypeWithDiamond): 	__Identifier
superclass	 -> 
	(superclass, normalClassDeclaration): 	>, __Identifier
resource	 -> 
	(resource, resourceList): 	(
	(resource, resourceList): 	,
instanceInitializer	 -> 
	(instanceInitializer, classBodyDeclaration): 	;, {, }
constantDeclaration	 -> 
	(constantDeclaration, interfaceMemberDeclaration): 	;, {, }
	(constantDeclaration, annotationTypeMemberDeclaration): 	;, {, }
variableDeclaratorId	 -> 
	(variableDeclaratorId, enhancedForStatement): 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short
	(variableDeclaratorId, variableDeclarator): 	,, >, ], __Identifier, boolean, byte, char, double, float, int, long, short
	(variableDeclaratorId, formalParameter): 	...
	(variableDeclaratorId, resource): 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short
	(variableDeclaratorId, catchFormalParameter): 	>, __Identifier
	(variableDeclaratorId, formalParameter): 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short
__:	 -> 
	(__:, statement): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__:, enhancedForStatement): 	], __Identifier
	(__:, statement): 	__Identifier
	(__:, switchLabel): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__:, conditionalExpression): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__:, switchLabel): 	default
catchType	 -> 
	(catchType, catchFormalParameter): 	(, ), __Identifier, final
__volatile	 -> 
	(__volatile, fieldModifier): 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }
__throws	 -> 
	(__throws, throws): 	), ]
staticInitializer	 -> 
	(staticInitializer, classBodyDeclaration): 	;, {, }
Literal	 -> 
	(Literal, primaryBase): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
__class	 -> 
	(__class, primaryBase): 	.
	(__class, primaryBase): 	.
	(__class, primaryBase): 	.
	(__class, normalClassDeclaration): 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }
variableInitializer	 -> 
	(variableInitializer, variableInitializerList): 	{
	(variableInitializer, variableDeclarator): 	=
	(variableInitializer, variableInitializerList): 	,
elementValuePair	 -> 
	(elementValuePair, elementValuePairList): 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(elementValuePair, elementValuePairList): 	,
superinterfaces	 -> 
	(superinterfaces, normalClassDeclaration): 	>, __Identifier
	(superinterfaces, enumDeclaration): 	__Identifier
qualIdent	 -> 
	(qualIdent, leftHandSide): 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, do, else, query, return, throw, {, }
	(qualIdent, unaryExpression): 	++, --
	(qualIdent, markerAnnotation): 	@
	(qualIdent, statementExpression): 	(, ), ,, :, ;, do, else, {, }
	(qualIdent, normalAnnotation): 	@
	(qualIdent, singleElementAnnotation): 	@
	(qualIdent, primaryBase): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
	(qualIdent, unaryExpressionNotPlusMinus): 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
	(qualIdent, importDeclaration): 	import, static
	(qualIdent, statementExpression): 	++, --
	(qualIdent, explicitConstructorInvocation): 	{
blockStatements	 -> 
	(blockStatements, block): 	{
	(blockStatements, switchBlockStatementGroup): 	:
	(blockStatements, constructorBody): 	;, {
constantExpression	 -> 
	(constantExpression, switchLabel): 	case
switchLabels	 -> 
	(switchLabels, switchBlockStatementGroup): 	;, {, }
__}	 -> 
	(__}, interfaceBody): 	;, {, }
	(__}, block): 	;, {, }
	(__}, arrayInitializer): 	), ++, ,, --, >, ], __Identifier, __Literal, class, new, this, {, }
	(__}, classBody): 	;, {, }
	(__}, elementValueArrayInitializer): 	), ++, ,, --, >, ], __Identifier, __Literal, class, new, this, {, }
	(__}, switchBlock): 	:, ;, {, }
	(__}, constructorBody): 	;, {, }
	(__}, annotationTypeBody): 	;, {, }
	(__}, enumBody): 	), ,, ;, __Identifier, {, }
switchBlockStatementGroup	 -> 
	(switchBlockStatementGroup, switchBlock): 	;, {, }
__?	 -> 
	(__?, wildcard): 	), ,, <, __Identifier
__*	 -> 
	(__*, importDeclaration): 	.
__void	 -> 
	(__void, result): 	), ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }
	(__void, primaryBase): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
formalParameter	 -> 
	(formalParameter, formalParameterList): 	(
	(formalParameter, formalParameterList): 	,
interfaceModifier	 -> 
	(interfaceModifier, normalInterfaceDeclaration): 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }
	(interfaceModifier, annotationTypeDeclaration): 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }
__.	 -> 
	(__., primaryBase): 	void
	(__., importDeclaration): 	__Identifier
	(__., primaryBase): 	], __Identifier
	(__., explicitConstructorInvocation): 	__Identifier
	(__., receiverParameter): 	__Identifier
	(__., qualIdent): 	__Identifier
	(__., classTypeWithDiamond): 	>, __Identifier
	(__., primaryRest): 	), ], __Identifier, __Literal, class, new, this, }
	(__., unannClassType): 	>, __Identifier
	(__., primaryBase): 	super
	(__., classType): 	>, __Identifier
	(__., primaryBase): 	super
	(__., primaryBase): 	], boolean, byte, char, double, float, int, long, short
	(__., primaryBase): 	super
	(__., explicitConstructorInvocation): 	), ], __Identifier, __Literal, class, new, this, }
	(__., packageDeclaration): 	__Identifier
	(__., primaryBase): 	__Identifier
	(__., primaryBase): 	super
assignment	 -> 
	(assignment, statementExpression): 	(, ), ,, :, ;, do, else, {, }
	(assignment, assignmentExpression): 	(, ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {
catchClause	 -> 
	(catchClause, tryStatement): 	}
	(catchClause, tryStatement): 	}
	(catchClause, tryStatement): 	}
__assert	 -> 
	(__assert, statement): 	), :, ;, do, else, {, }
__byte	 -> 
	(__byte, basicType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~
annotationTypeMemberDeclaration	 -> 
	(annotationTypeMemberDeclaration, annotationTypeBody): 	;, {, }
__public	 -> 
	(__public, constructorModifier): 	), ;, __Identifier, private, protected, public, {, }
	(__public, constantModifier): 	), ;, __Identifier, final, public, static, {, }
	(__public, annotationTypeElementModifier): 	), ;, __Identifier, abstract, public, {, }
	(__public, methodModifier): 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }
	(__public, interfaceMethodModifier): 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }
	(__public, classModifier): 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }
	(__public, fieldModifier): 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }
	(__public, interfaceModifier): 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }
constructorModifier	 -> 
	(constructorModifier, constructorDeclaration): 	), ;, __Identifier, private, protected, public, {, }
__return	 -> 
	(__return, statement): 	), :, ;, do, else, {, }
switchBlock	 -> 
	(switchBlock, statement): 	)
interfaceTypeList	 -> 
	(interfaceTypeList, superinterfaces): 	implements
	(interfaceTypeList, extendsInterfaces): 	extends
__switch	 -> 
	(__switch, statement): 	), :, ;, do, else, {, }
tryStatement	 -> 
	(tryStatement, statement): 	), :, ;, do, else, {, }
result	 -> 
	(result, methodHeader): 	), ;, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }
	(result, methodHeader): 	), >, __Identifier
typeParameters	 -> 
	(typeParameters, normalInterfaceDeclaration): 	__Identifier
	(typeParameters, normalClassDeclaration): 	__Identifier
	(typeParameters, methodHeader): 	), ;, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }
	(typeParameters, constructorDeclarator): 	), ;, __Identifier, private, protected, public, {, }
localVariableDeclarationStatement	 -> 
	(localVariableDeclarationStatement, blockStatement): 	:, ;, {, }
__while	 -> 
	(__while, statement): 	), :, ;, do, else, {, }
	(__while, statement): 	;, }
blockStatement	 -> 
	(blockStatement, blockStatements): 	:, ;, {
	(blockStatement, blockStatements): 	;, }
__continue	 -> 
	(__continue, statement): 	), :, ;, do, else, {, }
__else	 -> 
	(__else, statement): 	;, }
interfaceMethodModifier	 -> 
	(interfaceMethodModifier, interfaceMethodDeclaration): 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }
__if	 -> 
	(__if, statement): 	), :, ;, do, else, {, }
elementValue	 -> 
	(elementValue, defaultValue): 	default
	(elementValue, elementValuePair): 	=
	(elementValue, elementValueList): 	,
	(elementValue, elementValueList): 	{
	(elementValue, singleElementAnnotation): 	(
localVariableDeclaration	 -> 
	(localVariableDeclaration, localVariableDeclarationStatement): 	:, ;, {, }
	(localVariableDeclaration, forInit): 	(
variableInitializerList	 -> 
	(variableInitializerList, arrayInitializer): 	{
__interface	 -> 
	(__interface, normalInterfaceDeclaration): 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }
	(__interface, annotationTypeDeclaration): 	@
elementValueList	 -> 
	(elementValueList, elementValueArrayInitializer): 	{
elementValueArrayInitializer	 -> 
	(elementValueArrayInitializer, elementValue): 	(, ,, =, default, {
__do	 -> 
	(__do, statement): 	), :, ;, do, else, {, }
classModifier	 -> 
	(classModifier, normalClassDeclaration): 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }
	(classModifier, enumDeclaration): 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }
enumConstantName	 -> 
	(enumConstantName, switchLabel): 	case
extendsInterfaces	 -> 
	(extendsInterfaces, normalInterfaceDeclaration): 	>, __Identifier
elementValuePairList	 -> 
	(elementValuePairList, normalAnnotation): 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }
normalAnnotation	 -> 
	(normalAnnotation, annotation): 	@
__...	 -> 
	(__..., formalParameter): 	), >, ], __Identifier, boolean, byte, char, double, float, int, long, short
exceptionTypeList	 -> 
	(exceptionTypeList, throws): 	throws
annotationTypeElementDeclaration	 -> 
	(annotationTypeElementDeclaration, annotationTypeMemberDeclaration): 	;, {, }
enhancedForStatement	 -> 
	(enhancedForStatement, statement): 	), :, ;, do, else, {, }
__[	 -> 
	(__[, primaryBase): 	], __Identifier
	(__[, dim): 	), >, ], __Identifier, boolean, byte, char, double, float, int, long, short
	(__[, dimExpr): 	), ], __Identifier
	(__[, primaryBase): 	__Identifier
	(__[, primaryRest): 	), ], __Identifier, __Literal, class, new, this, }
	(__[, primaryBase): 	], boolean, byte, char, double, float, int, long, short
__-	 -> 
	(__-, unaryExpression): 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
interfaceMethodDeclaration	 -> 
	(interfaceMethodDeclaration, interfaceMemberDeclaration): 	;, {, }
__float	 -> 
	(__float, basicType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~
compilation	 -> 
interfaceBody	 -> 
	(interfaceBody, normalInterfaceDeclaration): 	>, __Identifier
__{	 -> 
	(__{, constructorBody): 	), >, __Identifier
	(__{, annotationTypeBody): 	__Identifier
	(__{, switchBlock): 	)
	(__{, block): 	), ->, :, ;, >, ], __Identifier, do, else, finally, static, try, {, }
	(__{, interfaceBody): 	>, __Identifier
	(__{, elementValueArrayInitializer): 	(, ,, =, default, {
	(__{, classBody): 	), >, __Identifier
	(__{, enumBody): 	>, __Identifier
	(__{, arrayInitializer): 	,, =, ], {
arrayInitializer	 -> 
	(arrayInitializer, variableInitializer): 	,, =, {
	(arrayInitializer, arrayCreator): 	]
__stictfp	 -> 
	(__stictfp, methodModifier): 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }
__++	 -> 
	(__++, unaryExpressionNotPlusMinus): 	), ], __Identifier, __Literal, class, new, this, }
	(__++, statementExpression): 	), ], __Identifier, __Literal, class, new, this, }
	(__++, statementExpression): 	(, ), ,, :, ;, do, else, {, }
	(__++, unaryExpression): 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
conditionalExpression	 -> 
	(conditionalExpression, elementValue): 	(, ,, =, default, {
	(conditionalExpression, assignmentExpression): 	(, ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {
classType	 -> 
	(classType, interfaceTypeList): 	extends, implements
	(classType, superclass): 	extends
	(classType, interfaceTypeList): 	,
	(classType, referenceType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, extends, instanceof, query, return, super, throw, {, }, ~
	(classType, typeBound): 	extends
	(classType, arrayType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
	(classType, catchType): 	|
	(classType, additionalBound): 	and
	(classType, exceptionType): 	,, throws
	(classType, type): 	new
__try	 -> 
	(__try, tryStatement): 	), :, ;, do, else, {, }
__->	 -> 
	(__->, lambdaExpression): 	), __Identifier
methodModifier	 -> 
	(methodModifier, methodDeclaration): 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }
typeArguments	 -> 
	(typeArguments, explicitConstructorInvocation): 	.
	(typeArguments, primaryBase): 	::
	(typeArguments, classType): 	__Identifier
	(typeArguments, primaryRest): 	::
	(typeArguments, primaryBase): 	::
	(typeArguments, primaryBase): 	::
	(typeArguments, explicitConstructorInvocation): 	{
	(typeArguments, unannClassType): 	__Identifier
	(typeArguments, primaryBase): 	.
	(typeArguments, primaryBase): 	::
	(typeArguments, explicitConstructorInvocation): 	.
	(typeArguments, explicitConstructorInvocation): 	{
	(typeArguments, typeArgumentsOrDiamond): 	__Identifier
	(typeArguments, classCreator): 	new
	(typeArguments, unannClassType): 	__Identifier
	(typeArguments, primaryBase): 	.
	(typeArguments, primaryRest): 	.
	(typeArguments, primaryBase): 	.
	(typeArguments, classType): 	__Identifier
__=	 -> 
	(__=, elementValuePair): 	__Identifier
	(__=, resource): 	], __Identifier
	(__=, variableDeclarator): 	], __Identifier
__super	 -> 
	(__super, wildcardBounds): 	?
	(__super, primaryBase): 	.
	(__super, primaryBase): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
	(__super, primaryBase): 	.
	(__super, primaryBase): 	.
	(__super, explicitConstructorInvocation): 	>, {
	(__super, explicitConstructorInvocation): 	., >
	(__super, explicitConstructorInvocation): 	., >
variableDeclaratorList	 -> 
	(variableDeclaratorList, constantDeclaration): 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short
	(variableDeclaratorList, fieldDeclaration): 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short
	(variableDeclaratorList, localVariableDeclaration): 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short
__extends	 -> 
	(__extends, typeBound): 	__Identifier
	(__extends, wildcardBounds): 	?
	(__extends, extendsInterfaces): 	>, __Identifier
	(__extends, superclass): 	>, __Identifier
basicType	 -> 
	(basicType, unannType): 	(, ), ,, :, ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, transient, volatile, {, }
	(basicType, primaryBase): 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~
	(basicType, primitiveType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, [, __AssignmentOperator, __Identifier, __InfixOperator, assert, case, default, do, else, extends, instanceof, new, query, return, super, throw, {, }, ~
typeParameterModifier	 -> 
	(typeParameterModifier, typeParameter): 	), ,, <, __Identifier
classDeclaration	 -> 
	(classDeclaration, blockStatement): 	:, ;, {, }
	(classDeclaration, interfaceMemberDeclaration): 	;, {, }
	(classDeclaration, annotationTypeMemberDeclaration): 	;, {, }
	(classDeclaration, typeDeclaration): 	;, __SKIP, }
	(classDeclaration, classMemberDeclaration): 	;, {, }
enumBody	 -> 
	(enumBody, enumDeclaration): 	>, __Identifier
switchLabel	 -> 
	(switchLabel, switchBlock): 	:, ;, {, }
	(switchLabel, switchLabels): 	;, {, }
	(switchLabel, switchLabels): 	:
arguments	 -> 
	(arguments, classCreator): 	>, __Identifier
	(arguments, explicitConstructorInvocation): 	super
	(arguments, explicitConstructorInvocation): 	super
	(arguments, primaryBase): 	__Identifier
	(arguments, primaryBase): 	__Identifier
	(arguments, primaryBase): 	__Identifier
	(arguments, enumConstant): 	__Identifier
	(arguments, explicitConstructorInvocation): 	this
	(arguments, explicitConstructorInvocation): 	super
	(arguments, primaryRest): 	__Identifier
	(arguments, primaryBase): 	__Identifier
	(arguments, primaryBase): 	__Identifier
typeParameterList	 -> 
	(typeParameterList, typeParameters): 	<
classCreator	 -> 
	(classCreator, primaryBase): 	new
	(classCreator, primaryBase): 	new
	(classCreator, primaryRest): 	new
annotation	 -> 
	(annotation, fieldModifier): 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }
	(annotation, classModifier): 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }
	(annotation, interfaceModifier): 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }
	(annotation, methodModifier): 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }
	(annotation, unannClassType): 	), ., __Identifier
	(annotation, classTypeWithDiamond): 	), ., __Identifier
	(annotation, typeParameterModifier): 	), ,, <, __Identifier
	(annotation, classTypeWithDiamond): 	), >, __Identifier, new
	(annotation, dimExpr): 	), ], __Identifier
	(annotation, classCreator): 	), >, __Identifier, new
	(annotation, formalParameter): 	), >, ], __Identifier, boolean, byte, char, double, float, int, long, short
	(annotation, annotationTypeElementModifier): 	), ;, __Identifier, abstract, public, {, }
	(annotation, interfaceMethodModifier): 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }
	(annotation, classType): 	), ., __Identifier
	(annotation, packageModifier): 	), __Identifier, __SKIP
	(annotation, constantModifier): 	), ;, __Identifier, final, public, static, {, }
	(annotation, variableModifier): 	(, ), ,, :, ;, __Identifier, final, {, }
	(annotation, enumConstantModifier): 	), ,, __Identifier, {
	(annotation, classType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, [, __AssignmentOperator, __Identifier, __InfixOperator, and, assert, case, default, do, else, extends, implements, instanceof, new, query, return, super, throw, throws, {, |, }, ~
	(annotation, constructorModifier): 	), ;, __Identifier, private, protected, public, {, }
	(annotation, wildcard): 	), ,, <, __Identifier
	(annotation, typeVariable): 	), ,, __Identifier, extends, throws
	(annotation, elementValue): 	(, ,, =, default, {
	(annotation, dim): 	), >, ], __Identifier, boolean, byte, char, double, float, int, long, short
	(annotation, primitiveType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, [, __AssignmentOperator, __Identifier, __InfixOperator, assert, case, default, do, else, extends, instanceof, new, query, return, super, throw, {, }, ~
	(annotation, methodHeader): 	), >, __Identifier
__import	 -> 
	(__import, importDeclaration): 	;, __SKIP
__throw	 -> 
	(__throw, statement): 	), :, ;, do, else, {, }
enumConstantModifier	 -> 
	(enumConstantModifier, enumConstant): 	), ,, __Identifier, {
dim	 -> 
	(dim, arrayCreator): 	]
	(dim, variableDeclaratorId): 	], __Identifier
	(dim, arrayType): 	]
	(dim, referenceType): 	]
	(dim, methodDeclarator): 	), ]
	(dim, unannType): 	], boolean, byte, char, double, float, int, long, short
	(dim, arrayCreator): 	]
	(dim, unannType): 	>, ], __Identifier
	(dim, annotationTypeElementDeclaration): 	), ]
	(dim, arrayType): 	]
	(dim, referenceType): 	>, ], __Identifier
block	 -> 
	(block, statement): 	), :, ;, do, else, {, }
	(block, statement): 	)
	(block, tryStatement): 	)
	(block, lambdaBody): 	->
	(block, instanceInitializer): 	;, {, }
	(block, tryStatement): 	try
	(block, staticInitializer): 	static
	(block, finally): 	finally
	(block, methodBody): 	), >, ], __Identifier
	(block, catchClause): 	)
__;	 -> 
	(__;, statement): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__;, statement): 	), :, ;, do, else, {, }
	(__;, explicitConstructorInvocation): 	)
	(__;, statement): 	), ++, --, >, ], __Identifier, __Literal, class, new, return, this, }
	(__;, explicitConstructorInvocation): 	)
	(__;, fieldDeclaration): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__;, importDeclaration): 	;, __SKIP
	(__;, resourceSpecification): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__;, interfaceMemberDeclaration): 	;, {, }
	(__;, methodBody): 	), >, ], __Identifier
	(__;, statement): 	)
	(__;, statement): 	__Identifier, continue
	(__;, statement): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__;, annotationTypeElementDeclaration): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__;, statement): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__;, statement): 	__Identifier, break
	(__;, classMemberDeclaration): 	;, {, }
	(__;, basicForStatement): 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__;, explicitConstructorInvocation): 	)
	(__;, importDeclaration): 	*, __Identifier
	(__;, localVariableDeclarationStatement): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__;, packageDeclaration): 	__Identifier
	(__;, enumBodyDeclarations): 	), ,, __Identifier, {, }
	(__;, typeDeclaration): 	;, __SKIP, }
	(__;, explicitConstructorInvocation): 	)
	(__;, constantDeclaration): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__;, basicForStatement): 	), ++, --, ;, >, ], __Identifier, __Literal, class, new, this, }
	(__;, annotationTypeMemberDeclaration): 	;, {, }
exceptionType	 -> 
	(exceptionType, exceptionTypeList): 	throws
	(exceptionType, exceptionTypeList): 	,
normalInterfaceDeclaration	 -> 
	(normalInterfaceDeclaration, interfaceDeclaration): 	;, __SKIP, {, }
assignmentExpression	 -> 
	(assignmentExpression, expression): 	(, ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {
forInit	 -> 
	(forInit, basicForStatement): 	(
compilationUnit	 -> 
	(compilationUnit, compilation): 	__SKIP
__--	 -> 
	(__--, statementExpression): 	), ], __Identifier, __Literal, class, new, this, }
	(__--, statementExpression): 	(, ), ,, :, ;, do, else, {, }
	(__--, unaryExpressionNotPlusMinus): 	), ], __Identifier, __Literal, class, new, this, }
	(__--, unaryExpression): 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
__,	 -> 
	(__,, exceptionTypeList): 	>, __Identifier
	(__,, enumBody): 	), __Identifier, {, }
	(__,, typeArgumentList): 	>, ?, ], __Identifier
	(__,, interfaceTypeList): 	>, __Identifier
	(__,, resourceList): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__,, arrayInitializer): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, {, }
	(__,, variableInitializerList): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__,, argumentList): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__,, elementValuePairList): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__,, formalParameterList): 	], __Identifier, this
	(__,, variableDeclaratorList): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__,, statementExpressionList): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__,, typeParameterList): 	>, __Identifier
	(__,, inferredFormalParameterList): 	__Identifier
	(__,, elementValueList): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__,, enumConstantList): 	), __Identifier, }
	(__,, elementValueArrayInitializer): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, {, }
normalClassDeclaration	 -> 
	(normalClassDeclaration, classDeclaration): 	:, ;, __SKIP, {, }
throws	 -> 
	(throws, methodHeader): 	), ]
	(throws, methodHeader): 	), ]
	(throws, constructorDeclaration): 	)
__short	 -> 
	(__short, basicType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~
methodHeader	 -> 
	(methodHeader, methodDeclaration): 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }
	(methodHeader, interfaceMethodDeclaration): 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }
unannClassType	 -> 
	(unannClassType, unannType): 	(, ), ,, :, ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, transient, volatile, {, }
	(unannClassType, catchType): 	(, ), __Identifier, final
__int	 -> 
	(__int, basicType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~
InfixOperator	 -> 
	(InfixOperator, infixExpression): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
constructorDeclaration	 -> 
	(constructorDeclaration, classBodyDeclaration): 	;, {, }
__]	 -> 
	(__], primaryBase): 	[
	(__], dim): 	[
	(__], primaryBase): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__], primaryRest): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__], dimExpr): 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }
	(__], primaryBase): 	[
__static	 -> 
	(__static, classModifier): 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }
	(__static, importDeclaration): 	import
	(__static, methodModifier): 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }
	(__static, interfaceMethodModifier): 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }
	(__static, staticInitializer): 	;, {, }
	(__static, constantModifier): 	), ;, __Identifier, final, public, static, {, }
	(__static, fieldModifier): 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }
	(__static, interfaceModifier): 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }
__double	 -> 
	(__double, basicType): 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~
__implements	 -> 
	(__implements, superinterfaces): 	>, __Identifier
typeBound	 -> 
	(typeBound, typeParameter): 	__Identifier
__abstract	 -> 
	(__abstract, interfaceModifier): 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }
	(__abstract, methodModifier): 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }
	(__abstract, interfaceMethodModifier): 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }
	(__abstract, classModifier): 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }
	(__abstract, annotationTypeElementModifier): 	), ;, __Identifier, abstract, public, {, }
unaryExpressionNotPlusMinus	 -> 
	(unaryExpressionNotPlusMinus, unaryExpression): 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~
	(unaryExpressionNotPlusMinus, castExpression): 	)
wildcard	 -> 
	(wildcard, typeArgument): 	,, <
typeVariable	 -> 
	(typeVariable, typeBound): 	extends
	(typeVariable, exceptionType): 	,, throws
SKIP	 pref := 		 flw := 	$, ;, @, abstract, class, enum, final, import, interface, package, private, protected, public, static, strictfp
true33	SKIP
foi true22	SKIP	compilationUnit	nil
symPrefUniVar	compilationUnit	compilation	true
passou um
passou três	compilationUnit	compilation
__byte	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	byte
__short	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	short
__int	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	int
__long	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	long
__char	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	char
__float	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	float
__double	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	double
__boolean	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	boolean
symPrefUniVar	annotation	primitiveType	false
symPrefUniVar	basicType	primitiveType	false
symPrefUniVar	primitiveType	referenceType	false
symPrefUniVar	dim	referenceType	false
symPrefUniVar	classType	referenceType	false
symPrefUniVar	dim	referenceType	false
symPrefUniVar	annotation	classType	false
Identifier	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, [, __AssignmentOperator, __Identifier, __InfixOperator, and, assert, case, default, do, else, extends, implements, instanceof, new, query, return, super, throw, throws, {, |, }, ~	 flw := 	), ,, ., :, ::, ;, <, >, @, [, ], __Identifier, __InfixOperator, and, implements, instanceof, query, {, |, }
symPrefUniVar	typeArguments	classType	false
__.	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	annotation	classType	false
Identifier	 pref := 	), ., __Identifier	 flw := 	), ,, ., :, ::, ;, <, >, @, [, ], __Identifier, __InfixOperator, and, implements, instanceof, query, {, |, }
symPrefUniVar	typeArguments	classType	false
symPrefUniVar	primitiveType	type	true
passou um
passou três	primitiveType	type
symPrefUniVar	classType	type	true
passou um
symPrefUniVar	primitiveType	arrayType	false
symPrefUniVar	dim	arrayType	false
symPrefUniVar	classType	arrayType	false
symPrefUniVar	dim	arrayType	false
symPrefUniVar	annotation	typeVariable	false
Identifier	 pref := 	), ,, __Identifier, extends, throws	 flw := 	,, ;, >, {
symPrefUniVar	annotation	dim	false
__[	 pref := 	), >, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	]
__]	 pref := 	[	 flw := 	), ++, ,, --, ., ..., :, ::, ;, =, >, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, and, default, instanceof, query, this, throws, {, }
symPrefUniVar	typeParameterModifier	typeParameter	true
passou um
Identifier	 pref := 	), ,, <, __Identifier	 flw := 	,, >, extends
symPrefUniVar	typeBound	typeParameter	true
passou um
symPrefUniVar	annotation	typeParameterModifier	false
__extends	 pref := 	__Identifier	 flw := 	@, __Identifier
symPrefUniVar	classType	typeBound	false
symPrefUniVar	additionalBound	typeBound	false
symPrefUniVar	typeVariable	typeBound	true
passou um
__and	 pref := 	>, ], __Identifier	 flw := 	@, __Identifier
true33	and
foi true22	and	classType	nil
symPrefUniVar	classType	additionalBound	true
passou um
passou três	classType	additionalBound
__<	 pref := 	., ::, __Identifier, new, {	 flw := 	?, @, __Identifier, boolean, byte, char, double, float, int, long, short
symPrefUniVar	typeArgumentList	typeArguments	true
passou um
__>	 pref := 	>, ?, ], __Identifier	 flw := 	(, ), ,, ., ..., :, ::, ;, >, @, [, ], __Identifier, __InfixOperator, and, implements, instanceof, new, query, super, this, {, |, }
symPrefUniVar	typeArgument	typeArgumentList	true
passou um
__,	 pref := 	>, ?, ], __Identifier	 flw := 	?, @, __Identifier, boolean, byte, char, double, float, int, long, short
symPrefUniVar	typeArgument	typeArgumentList	true
passou um
symPrefUniVar	referenceType	typeArgument	false
symPrefUniVar	wildcard	typeArgument	true
passou um
passou três	wildcard	typeArgument
symPrefUniVar	annotation	wildcard	false
__?	 pref := 	), ,, <, __Identifier	 flw := 	,, >, extends, super
true33	?
foi true22	?	table: 0x55f3dd481550	nil
symPrefUniVar	wildcardBounds	wildcard	true
passou um
passou três	wildcardBounds	wildcard
__extends	 pref := 	?	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
true33	extends
foi true22	extends	referenceType	nil
symPrefUniVar	referenceType	wildcardBounds	true
passou um
__super	 pref := 	?	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
true33	super
foi true22	super	referenceType	nil
symPrefUniVar	referenceType	wildcardBounds	true
passou um
passou três	referenceType	wildcardBounds
Identifier	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, @, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, import, query, return, static, throw, {, }, ~	 flw := 	(, ), ++, ,, --, ., ..., :, ::, ;, <, ?, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, abstract, boolean, byte, char, class, default, double, enum, final, float, instanceof, int, interface, long, native, package, private, protected, public, query, short, static, stictfp, strictfp, synchronized, transient, void, volatile, }
__.	 pref := 	__Identifier	 flw := 	__Identifier
Identifier	 pref := 	.	 flw := 	(, ), ++, ,, --, ., ..., :, ::, ;, <, ?, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, abstract, boolean, byte, char, class, default, double, enum, final, float, instanceof, int, interface, long, native, package, private, protected, public, query, short, static, stictfp, strictfp, synchronized, transient, void, volatile, }
symPrefUniVar	packageDeclaration	compilationUnit	true
passou um
symPrefUniVar	importDeclaration	compilationUnit	true
passou um
symPrefUniVar	typeDeclaration	compilationUnit	true
passou um
symPrefUniVar	packageModifier	packageDeclaration	true
passou um
__package	 pref := 	), __Identifier, __SKIP	 flw := 	__Identifier
true33	package
foi true22	package	Identifier	nil
Identifier	 pref := 	package	 flw := 	., ;
true33	Identifier
foi true22	Identifier	table: 0x55f3dd4817c0	true
__.	 pref := 	__Identifier	 flw := 	__Identifier
Identifier	 pref := 	.	 flw := 	., ;
__;	 pref := 	__Identifier	 flw := 	$, ;, @, abstract, class, enum, final, import, interface, private, protected, public, static, strictfp
symPrefUniVar	annotation	packageModifier	false
__import	 pref := 	;, __SKIP	 flw := 	__Identifier, static
true33	import
foi true22	import	table: 0x55f3dd45e340	nil
__static	 pref := 	import	 flw := 	__Identifier
true33	static
symPrefUniVar	qualIdent	importDeclaration	true
passou um
__.	 pref := 	__Identifier	 flw := 	*
UniqueFlw	__.	rule = 	importDeclaration	pref = 	__Identifier	flw = 	*	nInt = 	11	nEq = 	5	pflw = 	table: 0x55f3dd465280
__*	 pref := 	.	 flw := 	;
true33	*
foi true22	*	;	nil
__;	 pref := 	*, __Identifier	 flw := 	$, ;, @, abstract, class, enum, final, import, interface, private, protected, public, static, strictfp
__;	 pref := 	;, __SKIP	 flw := 	$, ;, @, abstract, class, enum, final, import, interface, private, protected, public, static, strictfp
symPrefUniVar	classDeclaration	typeDeclaration	false
symPrefUniVar	interfaceDeclaration	typeDeclaration	false
__;	 pref := 	;, __SKIP, }	 flw := 	$, ;, @, abstract, class, enum, final, interface, private, protected, public, static, strictfp
symPrefUniVar	normalClassDeclaration	classDeclaration	true
passou um
symPrefUniVar	enumDeclaration	classDeclaration	true
passou um
symPrefUniVar	classModifier	normalClassDeclaration	false
__class	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	__Identifier
true33	class
foi true22	class	Identifier	nil
Identifier	 pref := 	class	 flw := 	<, extends, implements, {
symPrefUniVar	typeParameters	normalClassDeclaration	false
symPrefUniVar	superclass	normalClassDeclaration	true
passou um
symPrefUniVar	superinterfaces	normalClassDeclaration	false
symPrefUniVar	classBody	normalClassDeclaration	false
symPrefUniVar	annotation	classModifier	false
__public	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__protected	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__private	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__abstract	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__static	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__final	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__strictfp	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__<	 pref := 	), ;, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }	 flw := 	@, __Identifier
symPrefUniVar	typeParameterList	typeParameters	true
passou um
__>	 pref := 	>, __Identifier	 flw := 	@, __Identifier, boolean, byte, char, double, extends, float, implements, int, long, short, void, {
symPrefUniVar	typeParameter	typeParameterList	true
passou um
__,	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	typeParameter	typeParameterList	true
passou um
__extends	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	classType	superclass	false
__implements	 pref := 	>, __Identifier	 flw := 	@, __Identifier
true33	implements
foi true22	implements	interfaceTypeList	nil
symPrefUniVar	interfaceTypeList	superinterfaces	true
passou um
passou três	interfaceTypeList	superinterfaces
symPrefUniVar	classType	interfaceTypeList	false
__,	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	classType	interfaceTypeList	false
__{	 pref := 	), >, __Identifier	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	classBodyDeclaration	classBody	false
__}	 pref := 	;, {, }	 flw := 	$, (, ), ++, ,, --, ., :, ::, ;, <, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, instanceof, int, interface, long, native, new, private, protected, public, query, return, short, static, stictfp, strictfp, super, switch, synchronized, this, throw, transient, try, void, volatile, while, {, }
symPrefUniVar	classMemberDeclaration	classBodyDeclaration	true
passou um
symPrefUniVar	instanceInitializer	classBodyDeclaration	true
passou um
symPrefUniVar	staticInitializer	classBodyDeclaration	true
passou um
symPrefUniVar	constructorDeclaration	classBodyDeclaration	true
passou um
symPrefUniVar	fieldDeclaration	classMemberDeclaration	true
passou um
symPrefUniVar	methodDeclaration	classMemberDeclaration	true
passou um
symPrefUniVar	classDeclaration	classMemberDeclaration	false
symPrefUniVar	interfaceDeclaration	classMemberDeclaration	false
__;	 pref := 	;, {, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	fieldModifier	fieldDeclaration	true
passou um
symPrefUniVar	unannType	fieldDeclaration	false
symPrefUniVar	variableDeclaratorList	fieldDeclaration	false
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	variableDeclarator	variableDeclaratorList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	__Identifier
symPrefUniVar	variableDeclarator	variableDeclaratorList	true
passou um
symPrefUniVar	variableDeclaratorId	variableDeclarator	false
__=	 pref := 	], __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
Subset	__=	rule = 	variableDeclarator	total = 	3
symPrefUniVar	variableInitializer	variableDeclarator	true
passou um
Identifier	 pref := 	,, ..., >, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	), ,, :, ;, =, @, [
symPrefUniVar	dim	variableDeclaratorId	false
symPrefUniVar	expression	variableInitializer	false
symPrefUniVar	arrayInitializer	variableInitializer	true
passou um
Identifier	 pref := 	(, ), ,, :, ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, transient, volatile, {, }	 flw := 	., ..., <, @, [, __Identifier, this, |
symPrefUniVar	typeArguments	unannClassType	false
__.	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	annotation	unannClassType	false
Identifier	 pref := 	), ., __Identifier	 flw := 	., ..., <, @, [, __Identifier, this, |
symPrefUniVar	typeArguments	unannClassType	false
symPrefUniVar	basicType	unannType	false
symPrefUniVar	dim	unannType	false
symPrefUniVar	unannClassType	unannType	false
symPrefUniVar	dim	unannType	false
symPrefUniVar	annotation	fieldModifier	false
__public	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__protected	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__private	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__static	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__final	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__transient	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
true33	transient
__volatile	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
true33	volatile
symPrefUniVar	methodModifier	methodDeclaration	true
passou um
symPrefUniVar	methodHeader	methodDeclaration	false
symPrefUniVar	methodBody	methodDeclaration	false
symPrefUniVar	result	methodHeader	false
symPrefUniVar	methodDeclarator	methodHeader	false
symPrefUniVar	throws	methodHeader	false
symPrefUniVar	typeParameters	methodHeader	false
symPrefUniVar	annotation	methodHeader	false
symPrefUniVar	result	methodHeader	true
passou um
symPrefUniVar	methodDeclarator	methodHeader	true
passou um
symPrefUniVar	throws	methodHeader	false
Identifier	 pref := 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short, void	 flw := 	(
__(	 pref := 	__Identifier	 flw := 	), @, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	formalParameterList	methodDeclarator	false
__)	 pref := 	(, ], __Identifier, this	 flw := 	;, @, [, throws, {
symPrefUniVar	dim	methodDeclarator	false
symPrefUniVar	receiverParameter	formalParameterList	true
passou um
symPrefUniVar	formalParameter	formalParameterList	true
passou um
__,	 pref := 	], __Identifier, this	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	formalParameter	formalParameterList	true
passou um
symPrefUniVar	variableModifier	formalParameter	false
symPrefUniVar	unannType	formalParameter	false
symPrefUniVar	variableDeclaratorId	formalParameter	false
symPrefUniVar	variableModifier	formalParameter	false
symPrefUniVar	unannType	formalParameter	false
symPrefUniVar	annotation	formalParameter	false
__...	 pref := 	), >, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	__Identifier
true33	...
foi true22	...	variableDeclaratorId	nil
symPrefUniVar	variableDeclaratorId	formalParameter	true
passou um
passou três	variableDeclaratorId	formalParameter
UniqueFlwVar	variableDeclaratorId	rule = 	formalParameter	pref = 	...	flw = 	), ,	rep = 	nil
symPrefUniVar	annotation	variableModifier	false
__final	 pref := 	(, ), ,, :, ;, __Identifier, final, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	variableModifier	receiverParameter	false
symPrefUniVar	unannType	receiverParameter	false
Identifier	 pref := 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	.
__.	 pref := 	__Identifier	 flw := 	this
__this	 pref := 	., >, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	), ,
symPrefUniVar	unannType	result	false
__void	 pref := 	), ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }	 flw := 	__Identifier
UniqueFlw	__void	rule = 	result	pref = 	), ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }	flw = 	__Identifier	nInt = 	1	nEq = 	0	pflw = 	nil
symPrefUniVar	annotation	methodModifier	false
__public	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__protected	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__private	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__abstract	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__static	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__final	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__synchronized	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
UniqueFlw	__synchronized	rule = 	methodModifier	pref = 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	flw = 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void	nInt = 	1	nEq = 	0	pflw = 	nil
__native	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
true33	native
__stictfp	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
true33	stictfp
__throws	 pref := 	), ]	 flw := 	@, __Identifier
true33	throws
foi true22	throws	exceptionTypeList	nil
symPrefUniVar	exceptionTypeList	throws	true
passou um
passou três	exceptionTypeList	throws
symPrefUniVar	exceptionType	exceptionTypeList	true
passou um
passou três	exceptionType	exceptionTypeList
__,	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	exceptionType	exceptionTypeList	true
passou um
symPrefUniVar	classType	exceptionType	false
symPrefUniVar	typeVariable	exceptionType	true
passou um
symPrefUniVar	block	methodBody	false
__;	 pref := 	), >, ], __Identifier	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	block	instanceInitializer	false
__static	 pref := 	;, {, }	 flw := 	{
symPrefUniVar	block	staticInitializer	true
passou um
passou três	block	staticInitializer
symPrefUniVar	constructorModifier	constructorDeclaration	true
passou um
symPrefUniVar	constructorDeclarator	constructorDeclaration	true
passou um
symPrefUniVar	throws	constructorDeclaration	false
symPrefUniVar	constructorBody	constructorDeclaration	true
passou um
symPrefUniVar	typeParameters	constructorDeclarator	false
Identifier	 pref := 	), ;, >, __Identifier, private, protected, public, {, }	 flw := 	(
__(	 pref := 	__Identifier	 flw := 	), @, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	formalParameterList	constructorDeclarator	false
__)	 pref := 	(, ], __Identifier, this	 flw := 	throws, {
symPrefUniVar	annotation	constructorModifier	false
__public	 pref := 	), ;, __Identifier, private, protected, public, {, }	 flw := 	<, @, __Identifier, private, protected, public
__protected	 pref := 	), ;, __Identifier, private, protected, public, {, }	 flw := 	<, @, __Identifier, private, protected, public
__private	 pref := 	), ;, __Identifier, private, protected, public, {, }	 flw := 	<, @, __Identifier, private, protected, public
__{	 pref := 	), >, __Identifier	 flw := 	(, ++, --, ;, <, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	explicitConstructorInvocation	constructorBody	true
passou um
symPrefUniVar	blockStatements	constructorBody	false
__}	 pref := 	;, {, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	typeArguments	explicitConstructorInvocation	false
__this	 pref := 	>, {	 flw := 	(
symPrefUniVar	arguments	explicitConstructorInvocation	true
passou um
passou três	arguments	explicitConstructorInvocation
UniqueFlwVar	arguments	rule = 	explicitConstructorInvocation	pref = 	this	flw = 	;	rep = 	nil
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	typeArguments	explicitConstructorInvocation	true
passou um
__super	 pref := 	>, {	 flw := 	(
symPrefUniVar	arguments	explicitConstructorInvocation	false
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	primary	explicitConstructorInvocation	false
__.	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	<, super
symPrefUniVar	typeArguments	explicitConstructorInvocation	false
__super	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	explicitConstructorInvocation	false
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	qualIdent	explicitConstructorInvocation	false
__.	 pref := 	__Identifier	 flw := 	<, super
symPrefUniVar	typeArguments	explicitConstructorInvocation	false
__super	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	explicitConstructorInvocation	true
passou um
passou três	arguments	explicitConstructorInvocation
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	classModifier	enumDeclaration	false
__enum	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	__Identifier
true33	enum
foi true22	enum	Identifier	nil
Identifier	 pref := 	enum	 flw := 	implements, {
true33	Identifier
foi true22	Identifier	table: 0x55f3dd4dabd0	true
symPrefUniVar	superinterfaces	enumDeclaration	false
symPrefUniVar	enumBody	enumDeclaration	true
passou um
__{	 pref := 	>, __Identifier	 flw := 	,, ;, @, __Identifier, }
symPrefUniVar	enumConstantList	enumBody	true
passou um
__,	 pref := 	), __Identifier, {, }	 flw := 	;, }
symPrefUniVar	enumBodyDeclarations	enumBody	true
passou um
__}	 pref := 	), ,, ;, __Identifier, {, }	 flw := 	$, (, ++, --, ;, <, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, int, interface, long, native, new, private, protected, public, return, short, static, stictfp, strictfp, super, switch, synchronized, this, throw, transient, try, void, volatile, while, {, }
symPrefUniVar	enumConstant	enumConstantList	true
passou um
__,	 pref := 	), __Identifier, }	 flw := 	@, __Identifier
symPrefUniVar	enumConstant	enumConstantList	true
passou um
symPrefUniVar	enumConstantModifier	enumConstant	true
passou um
Identifier	 pref := 	), ,, __Identifier, {	 flw := 	(, ,, ;, {, }
symPrefUniVar	arguments	enumConstant	false
symPrefUniVar	classBody	enumConstant	false
symPrefUniVar	annotation	enumConstantModifier	false
__;	 pref := 	), ,, __Identifier, {, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	classBodyDeclaration	enumBodyDeclarations	false
symPrefUniVar	normalInterfaceDeclaration	interfaceDeclaration	true
passou um
symPrefUniVar	annotationTypeDeclaration	interfaceDeclaration	true
passou um
symPrefUniVar	interfaceModifier	normalInterfaceDeclaration	false
__interface	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	__Identifier
true33	interface
foi true22	interface	Identifier	nil
Identifier	 pref := 	interface	 flw := 	<, extends, {
symPrefUniVar	typeParameters	normalInterfaceDeclaration	false
symPrefUniVar	extendsInterfaces	normalInterfaceDeclaration	true
passou um
symPrefUniVar	interfaceBody	normalInterfaceDeclaration	true
passou um
symPrefUniVar	annotation	interfaceModifier	false
__public	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__protected	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__private	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__abstract	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__static	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__strictfp	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__extends	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	interfaceTypeList	extendsInterfaces	true
passou um
__{	 pref := 	>, __Identifier	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, void, }
symPrefUniVar	interfaceMemberDeclaration	interfaceBody	true
passou um
__}	 pref := 	;, {, }	 flw := 	$, ;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	constantDeclaration	interfaceMemberDeclaration	false
symPrefUniVar	interfaceMethodDeclaration	interfaceMemberDeclaration	true
passou um
symPrefUniVar	classDeclaration	interfaceMemberDeclaration	false
symPrefUniVar	interfaceDeclaration	interfaceMemberDeclaration	false
__;	 pref := 	;, {, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, void, }
symPrefUniVar	constantModifier	constantDeclaration	true
passou um
symPrefUniVar	unannType	constantDeclaration	false
symPrefUniVar	variableDeclaratorList	constantDeclaration	false
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, void, }
symPrefUniVar	annotation	constantModifier	false
__public	 pref := 	), ;, __Identifier, final, public, static, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, public, short, static
__static	 pref := 	), ;, __Identifier, final, public, static, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, public, short, static
__final	 pref := 	), ;, __Identifier, final, public, static, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, public, short, static
symPrefUniVar	interfaceMethodModifier	interfaceMethodDeclaration	true
passou um
symPrefUniVar	methodHeader	interfaceMethodDeclaration	false
symPrefUniVar	methodBody	interfaceMethodDeclaration	false
symPrefUniVar	annotation	interfaceMethodModifier	false
__public	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
__abstract	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
__default	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
__static	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
__strictfp	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
symPrefUniVar	interfaceModifier	annotationTypeDeclaration	false
__@	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	interface
__interface	 pref := 	@	 flw := 	__Identifier
true33	interface
foi true22	interface	Identifier	true
Identifier	 pref := 	interface	 flw := 	{
symPrefUniVar	annotationTypeBody	annotationTypeDeclaration	true
passou um
__{	 pref := 	__Identifier	 flw := 	;, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, }
symPrefUniVar	annotationTypeMemberDeclaration	annotationTypeBody	true
passou um
__}	 pref := 	;, {, }	 flw := 	$, ;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	annotationTypeElementDeclaration	annotationTypeMemberDeclaration	true
passou um
symPrefUniVar	constantDeclaration	annotationTypeMemberDeclaration	false
symPrefUniVar	classDeclaration	annotationTypeMemberDeclaration	false
symPrefUniVar	interfaceDeclaration	annotationTypeMemberDeclaration	false
__;	 pref := 	;, {, }	 flw := 	;, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, }
symPrefUniVar	annotationTypeElementModifier	annotationTypeElementDeclaration	true
passou um
symPrefUniVar	unannType	annotationTypeElementDeclaration	false
Identifier	 pref := 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	(
__(	 pref := 	__Identifier	 flw := 	)
__)	 pref := 	(	 flw := 	;, @, [, default
symPrefUniVar	dim	annotationTypeElementDeclaration	false
symPrefUniVar	defaultValue	annotationTypeElementDeclaration	true
passou um
UniqueFlwVar	defaultValue	rule = 	annotationTypeElementDeclaration	pref = 	), ]	flw = 	;	rep = 	true
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	;, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, }
symPrefUniVar	annotation	annotationTypeElementModifier	false
__public	 pref := 	), ;, __Identifier, abstract, public, {, }	 flw := 	@, __Identifier, abstract, boolean, byte, char, double, float, int, long, public, short
__abstract	 pref := 	), ;, __Identifier, abstract, public, {, }	 flw := 	@, __Identifier, abstract, boolean, byte, char, double, float, int, long, public, short
__default	 pref := 	), ]	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	elementValue	defaultValue	true
passou um
__@	 pref := 	!, (, ), +, ++, ,, -, --, ->, ., :, ;, <, =, >, [, ], __AssignmentOperator, __Identifier, __InfixOperator, __SKIP, abstract, and, assert, boolean, byte, case, char, default, do, double, else, extends, final, float, implements, instanceof, int, long, native, new, private, protected, public, query, return, short, static, stictfp, strictfp, super, synchronized, throw, throws, transient, volatile, {, |, }, ~	 flw := 	__Identifier
Subset	__@	rule = 	annotation	total = 	2
symPrefUniVar	normalAnnotation	annotation	true
passou um
passou três	normalAnnotation	annotation
symPrefUniVar	singleElementAnnotation	annotation	true
passou um
passou três	singleElementAnnotation	annotation
symPrefUniVar	markerAnnotation	annotation	true
passou um
passou três	markerAnnotation	annotation
symPrefUniVar	qualIdent	normalAnnotation	false
__(	 pref := 	__Identifier	 flw := 	), __Identifier
symPrefUniVar	elementValuePairList	normalAnnotation	true
passou um
__)	 pref := 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, ..., ;, <, ?, @, [, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, package, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, }
symPrefUniVar	elementValuePair	elementValuePairList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	__Identifier
symPrefUniVar	elementValuePair	elementValuePairList	true
passou um
Identifier	 pref := 	(, ), ++, ,, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	=
__=	 pref := 	__Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	elementValue	elementValuePair	true
passou um
symPrefUniVar	conditionalExpression	elementValue	false
symPrefUniVar	elementValueArrayInitializer	elementValue	true
passou um
symPrefUniVar	annotation	elementValue	false
__{	 pref := 	(, ,, =, default, {	 flw := 	!, (, +, ++, ,, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, }, ~
symPrefUniVar	elementValueList	elementValueArrayInitializer	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, {, }	 flw := 	}
__}	 pref := 	), ++, ,, --, >, ], __Identifier, __Literal, class, new, this, {, }	 flw := 	), ,, ;, __Identifier, }
symPrefUniVar	elementValue	elementValueList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	elementValue	elementValueList	true
passou um
symPrefUniVar	qualIdent	markerAnnotation	false
symPrefUniVar	qualIdent	singleElementAnnotation	false
__(	 pref := 	__Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	elementValue	singleElementAnnotation	true
passou um
__)	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, ..., ;, <, ?, @, [, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, package, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, }
__{	 pref := 	,, =, ], {	 flw := 	!, (, +, ++, ,, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, }, ~
symPrefUniVar	variableInitializerList	arrayInitializer	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, {, }	 flw := 	}
__}	 pref := 	), ++, ,, --, >, ], __Identifier, __Literal, class, new, this, {, }	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
symPrefUniVar	variableInitializer	variableInitializerList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	variableInitializer	variableInitializerList	true
passou um
__{	 pref := 	), ->, :, ;, >, ], __Identifier, do, else, finally, static, try, {, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	blockStatements	block	false
__}	 pref := 	;, {, }	 flw := 	(, ), ++, ,, --, :, ;, <, @, ], __Identifier, __InfixOperator, __Literal, abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, final, finally, float, for, if, instanceof, int, interface, long, native, new, private, protected, public, query, return, short, static, stictfp, strictfp, super, switch, synchronized, this, throw, transient, try, void, volatile, while, {, }
symPrefUniVar	blockStatement	blockStatements	false
symPrefUniVar	blockStatement	blockStatements	true
passou um
symPrefUniVar	localVariableDeclarationStatement	blockStatement	true
passou um
symPrefUniVar	classDeclaration	blockStatement	false
symPrefUniVar	statement	blockStatement	false
symPrefUniVar	localVariableDeclaration	localVariableDeclarationStatement	true
passou um
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	variableModifier	localVariableDeclaration	false
symPrefUniVar	unannType	localVariableDeclaration	false
symPrefUniVar	variableDeclaratorList	localVariableDeclaration	false
symPrefUniVar	block	statement	false
__if	 pref := 	), :, ;, do, else, {, }	 flw := 	(
true33	if
foi true22	if	parExpression	nil
symPrefUniVar	parExpression	statement	true
passou um
passou três	parExpression	statement
UniqueFlwVar	parExpression	rule = 	statement	pref = 	if	flw = 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {	rep = 	nil
symPrefUniVar	statement	statement	false
__else	 pref := 	;, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
true33	else
symPrefUniVar	statement	statement	true
passou um
passou três	statement	statement
symPrefUniVar	basicForStatement	statement	true
passou um
symPrefUniVar	enhancedForStatement	statement	true
passou um
__while	 pref := 	), :, ;, do, else, {, }	 flw := 	(
Subset	__while	rule = 	statement	total = 	2
symPrefUniVar	parExpression	statement	false
symPrefUniVar	statement	statement	false
__do	 pref := 	), :, ;, do, else, {, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
true33	do
foi true22	do	statement	nil
symPrefUniVar	statement	statement	true
passou um
passou três	statement	statement
__while	 pref := 	;, }	 flw := 	(
true33	while
symPrefUniVar	parExpression	statement	true
passou um
passou três	parExpression	statement
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	tryStatement	statement	true
passou um
passou três	tryStatement	statement
__switch	 pref := 	), :, ;, do, else, {, }	 flw := 	(
true33	switch
foi true22	switch	parExpression	nil
symPrefUniVar	parExpression	statement	true
passou um
passou três	parExpression	statement
UniqueFlwVar	parExpression	rule = 	statement	pref = 	switch	flw = 	{	rep = 	nil
symPrefUniVar	switchBlock	statement	true
passou um
__synchronized	 pref := 	), :, ;, do, else, {, }	 flw := 	(
symPrefUniVar	parExpression	statement	true
passou um
passou três	parExpression	statement
UniqueFlwVar	parExpression	rule = 	statement	pref = 	synchronized	flw = 	{	rep = 	nil
symPrefUniVar	block	statement	false
__return	 pref := 	), :, ;, do, else, {, }	 flw := 	!, (, +, ++, -, --, ;, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	return
foi true22	return	table: 0x55f3dd51f180	nil
symPrefUniVar	expression	statement	true
passou um
passou três	expression	statement
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, return, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__throw	 pref := 	), :, ;, do, else, {, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	throw
foi true22	throw	expression	nil
symPrefUniVar	expression	statement	true
passou um
passou três	expression	statement
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__break	 pref := 	), :, ;, do, else, {, }	 flw := 	;, __Identifier
true33	break
foi true22	break	table: 0x55f3dd51fd10	nil
Identifier	 pref := 	break	 flw := 	;
true33	Identifier
__;	 pref := 	__Identifier, break	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__continue	 pref := 	), :, ;, do, else, {, }	 flw := 	;, __Identifier
true33	continue
foi true22	continue	table: 0x55f3dd4bcbb0	nil
Identifier	 pref := 	continue	 flw := 	;
true33	Identifier
__;	 pref := 	__Identifier, continue	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__assert	 pref := 	), :, ;, do, else, {, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	assert
foi true22	assert	expression	nil
symPrefUniVar	expression	statement	true
passou um
passou três	expression	statement
__:	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	statement	false
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__;	 pref := 	), :, ;, do, else, {, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	statementExpression	statement	false
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
Identifier	 pref := 	), :, ;, do, else, {, }	 flw := 	:
__:	 pref := 	__Identifier	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
symPrefUniVar	statement	statement	false
symPrefUniVar	assignment	statementExpression	false
__++	 pref := 	(, ), ,, :, ;, do, else, {, }	 flw := 	(, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
__--	 pref := 	(, ), ,, :, ;, do, else, {, }	 flw := 	(, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
symPrefUniVar	primary	statementExpression	false
symPrefUniVar	qualIdent	statementExpression	false
symPrefUniVar	primary	statementExpression	false
symPrefUniVar	qualIdent	statementExpression	false
__++	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, ;
__--	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, ;
symPrefUniVar	primary	statementExpression	false
__{	 pref := 	)	 flw := 	case, default, }
symPrefUniVar	switchBlockStatementGroup	switchBlock	true
passou um
symPrefUniVar	switchLabel	switchBlock	false
__}	 pref := 	:, ;, {, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	switchLabels	switchBlockStatementGroup	true
passou um
symPrefUniVar	blockStatements	switchBlockStatementGroup	true
passou um
symPrefUniVar	switchLabel	switchLabels	false
symPrefUniVar	switchLabel	switchLabels	false
__case	 pref := 	:, ;, {, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	case
foi true22	case	table: 0x55f3dd528bd0	nil
symPrefUniVar	constantExpression	switchLabel	true
passou um
symPrefUniVar	enumConstantName	switchLabel	true
passou um
__:	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__default	 pref := 	:, ;, {, }	 flw := 	:
__:	 pref := 	default	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
true33	:
Identifier	 pref := 	case	 flw := 	:
__for	 pref := 	), :, ;, do, else, {, }	 flw := 	(
Subset	__for	rule = 	basicForStatement	total = 	2
__(	 pref := 	for	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, boolean, byte, char, double, final, float, int, long, new, short, super, this, void
symPrefUniVar	forInit	basicForStatement	true
passou um
__;	 pref := 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, ;, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	basicForStatement	true
passou um
__;	 pref := 	), ++, --, ;, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ), ++, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
symPrefUniVar	forUpdate	basicForStatement	true
passou um
__)	 pref := 	), ++, --, ;, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
symPrefUniVar	statement	basicForStatement	false
symPrefUniVar	localVariableDeclaration	forInit	true
passou um
symPrefUniVar	statementExpressionList	forInit	true
passou um
symPrefUniVar	statementExpressionList	forUpdate	true
passou um
symPrefUniVar	statementExpression	statementExpressionList	false
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
symPrefUniVar	statementExpression	statementExpressionList	true
passou um
__for	 pref := 	), :, ;, do, else, {, }	 flw := 	(
Subset	__for	rule = 	enhancedForStatement	total = 	2
__(	 pref := 	for	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	variableModifier	enhancedForStatement	false
symPrefUniVar	unannType	enhancedForStatement	false
symPrefUniVar	variableDeclaratorId	enhancedForStatement	false
__:	 pref := 	], __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	enhancedForStatement	false
__)	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
symPrefUniVar	statement	enhancedForStatement	false
__try	 pref := 	), :, ;, do, else, {, }	 flw := 	(, {
true33	try
foi true22	try	table: 0x55f3dd52e4a0	nil
symPrefUniVar	block	tryStatement	true
passou um
passou três	block	tryStatement
UniqueFlwVar	block	rule = 	tryStatement	pref = 	try	flw = 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, final, finally, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }	rep = 	nil
symPrefUniVar	catchClause	tryStatement	false
symPrefUniVar	finally	tryStatement	false
symPrefUniVar	catchClause	tryStatement	false
symPrefUniVar	resourceSpecification	tryStatement	true
passou um
passou três	resourceSpecification	tryStatement
UniqueFlwVar	resourceSpecification	rule = 	tryStatement	pref = 	try	flw = 	{	rep = 	nil
symPrefUniVar	block	tryStatement	false
symPrefUniVar	catchClause	tryStatement	true
passou um
passou três	catchClause	tryStatement
symPrefUniVar	finally	tryStatement	true
passou um
passou três	finally	tryStatement
__catch	 pref := 	}	 flw := 	(
true33	catch
foi true22	catch	(	nil
__(	 pref := 	catch	 flw := 	@, __Identifier, final
true33	(
foi true22	(	catchFormalParameter	true
symPrefUniVar	catchFormalParameter	catchClause	true
passou um
__)	 pref := 	], __Identifier	 flw := 	{
symPrefUniVar	block	catchClause	false
symPrefUniVar	variableModifier	catchFormalParameter	false
symPrefUniVar	catchType	catchFormalParameter	true
passou um
symPrefUniVar	variableDeclaratorId	catchFormalParameter	false
symPrefUniVar	unannClassType	catchType	false
__|	 pref := 	>, __Identifier	 flw := 	@, __Identifier
true33	|
symPrefUniVar	classType	catchType	true
passou um
passou três	classType	catchType
__finally	 pref := 	}	 flw := 	{
true33	finally
foi true22	finally	block	nil
symPrefUniVar	block	finally	true
passou um
passou três	block	finally
__(	 pref := 	try	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
true33	(
foi true22	(	resourceList	nil
symPrefUniVar	resourceList	resourceSpecification	true
passou um
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	)
__)	 pref := 	), ++, --, ;, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	{
symPrefUniVar	resource	resourceList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	resource	resourceList	true
passou um
symPrefUniVar	variableModifier	resource	false
symPrefUniVar	unannType	resource	false
symPrefUniVar	variableDeclaratorId	resource	false
__=	 pref := 	], __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
Subset	__=	rule = 	resource	total = 	3
symPrefUniVar	expression	resource	false
symPrefUniVar	lambdaExpression	expression	true
passou um
symPrefUniVar	assignmentExpression	expression	true
passou um
symPrefUniVar	primaryBase	primary	true
passou um
symPrefUniVar	primaryRest	primary	true
passou um
__this	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
UniqueFlw	__this	rule = 	primaryBase	pref = 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	flw = 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }	nInt = 	1	nEq = 	0	pflw = 	nil
Literal	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
true33	Literal
symPrefUniVar	parExpression	primaryBase	true
passou um
__super	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	., ::
__.	 pref := 	super	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	primaryBase	false
__.	 pref := 	super	 flw := 	__Identifier
Identifier	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__::	 pref := 	super	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	::, >	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__new	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	<, @, __Identifier, boolean, byte, char, double, float, int, long, short
true33	new
foi true22	new	table: 0x55f3dd535940	nil
symPrefUniVar	classCreator	primaryBase	false
symPrefUniVar	arrayCreator	primaryBase	true
passou um
symPrefUniVar	qualIdent	primaryBase	false
__[	 pref := 	__Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	primaryBase	false
__]	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
symPrefUniVar	arguments	primaryBase	false
__.	 pref := 	__Identifier	 flw := 	<, new, super, this
__this	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__new	 pref := 	.	 flw := 	<, @, __Identifier
symPrefUniVar	classCreator	primaryBase	false
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	>	 flw := 	(
symPrefUniVar	arguments	primaryBase	false
__super	 pref := 	.	 flw := 	.
__.	 pref := 	super	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	primaryBase	false
__super	 pref := 	.	 flw := 	.
__.	 pref := 	super	 flw := 	__Identifier
true33	.
Identifier	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__super	 pref := 	.	 flw := 	::
__::	 pref := 	super	 flw := 	<, __Identifier
true33	::
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	::, >	 flw := 	(
symPrefUniVar	arguments	primaryBase	false
__[	 pref := 	], __Identifier	 flw := 	]
__]	 pref := 	[	 flw := 	., [
__.	 pref := 	], __Identifier	 flw := 	class
__class	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__::	 pref := 	__Identifier	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	::, >	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__void	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	.
__.	 pref := 	void	 flw := 	class
true33	.
foi true22	.	class	true
__class	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
symPrefUniVar	basicType	primaryBase	false
__[	 pref := 	], boolean, byte, char, double, float, int, long, short	 flw := 	]
__]	 pref := 	[	 flw := 	., [
__.	 pref := 	], boolean, byte, char, double, float, int, long, short	 flw := 	class
__class	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
true33	class
symPrefUniVar	referenceType	primaryBase	false
__::	 pref := 	>, ], __Identifier	 flw := 	<, new
symPrefUniVar	typeArguments	primaryBase	false
UniqueFlwVar	typeArguments	rule = 	primaryBase	pref = 	::	flw = 	new	rep = 	true
__new	 pref := 	::, >	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
symPrefUniVar	arrayType	primaryBase	true
passou um
__::	 pref := 	]	 flw := 	new
__new	 pref := 	::	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
true33	new
__.	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	<, __Identifier, new
symPrefUniVar	typeArguments	primaryRest	false
Identifier	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	primaryRest	false
Identifier	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__new	 pref := 	.	 flw := 	<, @, __Identifier
symPrefUniVar	classCreator	primaryRest	false
__[	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	primaryRest	false
__]	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__::	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryRest	false
Identifier	 pref := 	::, >	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__(	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, if, query, return, switch, synchronized, throw, while, {, }, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	parExpression	false
__)	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ), ++, ,, --, ., :, ::, ;, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, instanceof, int, long, new, query, return, short, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	typeArguments	classCreator	true
passou um
passou três	typeArguments	classCreator
symPrefUniVar	annotation	classCreator	false
symPrefUniVar	classTypeWithDiamond	classCreator	true
passou um
symPrefUniVar	arguments	classCreator	false
symPrefUniVar	classBody	classCreator	false
symPrefUniVar	annotation	classTypeWithDiamond	false
Identifier	 pref := 	), >, __Identifier, new	 flw := 	(, ., <
symPrefUniVar	typeArgumentsOrDiamond	classTypeWithDiamond	false
__.	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	annotation	classTypeWithDiamond	false
Identifier	 pref := 	), ., __Identifier	 flw := 	(, ., <
symPrefUniVar	typeArgumentsOrDiamond	classTypeWithDiamond	true
passou um
symPrefUniVar	typeArguments	typeArgumentsOrDiamond	false
__<	 pref := 	__Identifier	 flw := 	>
__>	 pref := 	<	 flw := 	(, .
true33	>
foi true22	>	table: 0x55f3dd541540	true
symPrefUniVar	type	arrayCreator	false
symPrefUniVar	dimExpr	arrayCreator	true
passou um
symPrefUniVar	dim	arrayCreator	false
symPrefUniVar	type	arrayCreator	true
passou um
symPrefUniVar	dim	arrayCreator	false
symPrefUniVar	arrayInitializer	arrayCreator	true
passou um
symPrefUniVar	annotation	dimExpr	false
__[	 pref := 	), ], __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	dimExpr	false
__]	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ++, ,, --, ., :, ::, ;, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__(	 pref := 	>, __Identifier, super, this	 flw := 	!, (, ), +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	argumentList	arguments	true
passou um
__)	 pref := 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, {, }
symPrefUniVar	expression	argumentList	false
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	argumentList	false
__++	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	(, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
__--	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	(, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
symPrefUniVar	primary	unaryExpression	false
symPrefUniVar	qualIdent	unaryExpression	false
__+	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	+
foi true22	+	table: 0x55f3dd546690	nil
symPrefUniVar	unaryExpression	unaryExpression	true
passou um
passou três	unaryExpression	unaryExpression
__-	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	-
foi true22	-	table: 0x55f3dd546d70	nil
symPrefUniVar	unaryExpression	unaryExpression	true
passou um
passou três	unaryExpression	unaryExpression
symPrefUniVar	unaryExpressionNotPlusMinus	unaryExpression	false
__~	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	~
foi true22	~	unaryExpression	nil
symPrefUniVar	unaryExpression	unaryExpressionNotPlusMinus	true
passou um
passou três	unaryExpression	unaryExpressionNotPlusMinus
__!	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	!
foi true22	!	table: 0x55f3dd547cb0	nil
symPrefUniVar	unaryExpression	unaryExpressionNotPlusMinus	true
passou um
passou três	unaryExpression	unaryExpressionNotPlusMinus
symPrefUniVar	castExpression	unaryExpressionNotPlusMinus	true
passou um
symPrefUniVar	primary	unaryExpressionNotPlusMinus	false
symPrefUniVar	qualIdent	unaryExpressionNotPlusMinus	false
__++	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, :, ;, ], __Identifier, __InfixOperator, instanceof, query, }
__--	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, :, ;, ], __Identifier, __InfixOperator, instanceof, query, }
__(	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	@, boolean, byte, char, double, float, int, long, short
symPrefUniVar	primitiveType	castExpression	false
__)	 pref := 	boolean, byte, char, double, float, int, long, short	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	)
foi true22	)	unaryExpression	nil
symPrefUniVar	unaryExpression	castExpression	true
passou um
__(	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
symPrefUniVar	referenceType	castExpression	false
symPrefUniVar	additionalBound	castExpression	false
__)	 pref := 	>, ], __Identifier	 flw := 	(, __Identifier
symPrefUniVar	lambdaExpression	castExpression	true
passou um
__(	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
symPrefUniVar	referenceType	castExpression	false
symPrefUniVar	additionalBound	castExpression	false
__)	 pref := 	>, ], __Identifier	 flw := 	!, (, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	unaryExpressionNotPlusMinus	castExpression	false
symPrefUniVar	unaryExpression	infixExpression	true
passou um
InfixOperator	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	InfixOperator
symPrefUniVar	unaryExpression	infixExpression	true
passou um
passou três	unaryExpression	infixExpression
__instanceof	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
true33	instanceof
symPrefUniVar	referenceType	infixExpression	true
passou um
passou três	referenceType	infixExpression
symPrefUniVar	infixExpression	conditionalExpression	true
passou um
__query	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	query
symPrefUniVar	expression	conditionalExpression	true
passou um
passou três	expression	conditionalExpression
__:	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	conditionalExpression	false
symPrefUniVar	assignment	assignmentExpression	false
symPrefUniVar	conditionalExpression	assignmentExpression	false
symPrefUniVar	leftHandSide	assignment	true
passou um
AssignmentOperator	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	AssignmentOperator
foi true22	AssignmentOperator	expression	nil
symPrefUniVar	expression	assignment	true
passou um
passou três	expression	assignment
symPrefUniVar	primary	leftHandSide	false
symPrefUniVar	qualIdent	leftHandSide	false
symPrefUniVar	lambdaParameters	lambdaExpression	true
passou um
UniqueFlwVar	lambdaParameters	rule = 	lambdaExpression	pref = 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	flw = 	->	rep = 	nil
__->	 pref := 	), __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
true33	->
foi true22	->	lambdaBody	true
symPrefUniVar	lambdaBody	lambdaExpression	true
passou um
passou três	lambdaBody	lambdaExpression
Identifier	 pref := 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	 flw := 	->
UniqueFlw	Identifier	rule = 	lambdaParameters	pref = 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	flw = 	->	nInt = 	17	nEq = 	3	pflw = 	nil
__(	 pref := 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	 flw := 	), @, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	formalParameterList	lambdaParameters	false
__)	 pref := 	(, ], __Identifier, this	 flw := 	->
__(	 pref := 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	 flw := 	__Identifier
symPrefUniVar	inferredFormalParameterList	lambdaParameters	true
passou um
__)	 pref := 	__Identifier	 flw := 	->
Identifier	 pref := 	(	 flw := 	), ,
__,	 pref := 	__Identifier	 flw := 	__Identifier
Identifier	 pref := 	,	 flw := 	), ,
symPrefUniVar	expression	lambdaBody	true
passou um
passou três	expression	lambdaBody
symPrefUniVar	block	lambdaBody	true
passou um
passou três	block	lambdaBody
symPrefUniVar	expression	constantExpression	true
passou um
unique var 	compilationUnit
Unique usage	compilationUnit
unique var 	classType
unique var 	wildcardBounds
Unique usage	wildcardBounds
unique var 	referenceType
unique var 	referenceType
unique var 	typeDeclaration
Unique usage	typeDeclaration
unique var 	qualIdent
unique var 	interfaceDeclaration
unique var 	typeParameters
unique var 	superclass
Unique usage	superclass
unique var 	superinterfaces
unique var 	classBody
unique var 	classType
unique var 	interfaceTypeList
unique var 	variableDeclaratorId
unique var 	exceptionTypeList
Unique usage	exceptionTypeList
unique var 	exceptionType
unique var 	exceptionType
Unique usage	exceptionType
unique var 	typeVariable
unique var 	superinterfaces
Unique usage	superinterfaces
unique var 	enumBody
Unique usage	enumBody
unique var 	enumConstantList
Unique usage	enumConstantList
unique var 	enumBodyDeclarations
Unique usage	enumBodyDeclarations
unique var 	enumConstant
unique var 	classBodyDeclaration
unique var 	typeParameters
unique var 	extendsInterfaces
Unique usage	extendsInterfaces
unique var 	interfaceBody
Unique usage	interfaceBody
unique var 	interfaceTypeList
Unique usage	interfaceTypeList
unique var 	interfaceMemberDeclaration
Unique usage	interfaceMemberDeclaration
unique var 	interfaceDeclaration
unique var 	annotationTypeBody
Unique usage	annotationTypeBody
unique var 	annotationTypeMemberDeclaration
Unique usage	annotationTypeMemberDeclaration
unique var 	interfaceDeclaration
setUnique	if	nil	true
unique var 	parExpression
unique var 	statement
unique var 	statement
unique var 	statement
unique var 	parExpression
unique var 	parExpression
unique var 	switchBlock
Unique usage	switchBlock
unique var 	block
unique var 	expression
unique var 	expression
unique var 	expression
unique var 	expression
unique var 	switchLabel
unique var 	enumConstantName
Unique usage	enumConstantName
unique var 	block
unique var 	catchClause
unique var 	resourceSpecification
Unique usage	resourceSpecification
unique var 	block
unique var 	catchClause
unique var 	finally
unique var 	catchFormalParameter
Unique usage	catchFormalParameter
unique var 	block
unique var 	variableModifier
unique var 	catchType
Unique usage	catchType
unique var 	variableDeclaratorId
unique var 	unannClassType
unique var 	classType
unique var 	block
unique var 	resourceList
Unique usage	resourceList
unique var 	resource
unique var 	resource
Unique usage	resource
unique var 	variableModifier
unique var 	unannType
unique var 	variableDeclaratorId
unique var 	expression
unique var 	arrayCreator
Unique usage	arrayCreator
unique var 	typeArguments
unique var 	arguments
unique var 	type
unique var 	dim
unique var 	arrayInitializer
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	referenceType
unique var 	expression
unique var 	expression
unique var 	expression
unique var 	lambdaBody
Unique usage	lambdaBody
unique var 	expression
unique var 	block
SKIP	 pref := 		 flw := 	$, ;, @, abstract, class, enum, final, import, interface, package, private, protected, public, static, strictfp
true33	SKIP
foi true22	SKIP	compilationUnit	true
symPrefUniVar	compilationUnit	compilation	true
passou um
passou três	compilationUnit	compilation
__byte	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	byte
__short	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	short
__int	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	int
__long	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	long
__char	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	char
__float	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	float
__double	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	double
__boolean	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	boolean
symPrefUniVar	annotation	primitiveType	false
symPrefUniVar	basicType	primitiveType	false
symPrefUniVar	primitiveType	referenceType	false
symPrefUniVar	dim	referenceType	false
symPrefUniVar	classType	referenceType	false
symPrefUniVar	dim	referenceType	false
symPrefUniVar	annotation	classType	false
Identifier	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, [, __AssignmentOperator, __Identifier, __InfixOperator, and, assert, case, default, do, else, extends, implements, instanceof, new, query, return, super, throw, throws, {, |, }, ~	 flw := 	), ,, ., :, ::, ;, <, >, @, [, ], __Identifier, __InfixOperator, and, implements, instanceof, query, {, |, }
symPrefUniVar	typeArguments	classType	false
__.	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	annotation	classType	false
Identifier	 pref := 	), ., __Identifier	 flw := 	), ,, ., :, ::, ;, <, >, @, [, ], __Identifier, __InfixOperator, and, implements, instanceof, query, {, |, }
symPrefUniVar	typeArguments	classType	false
symPrefUniVar	primitiveType	type	true
passou um
passou três	primitiveType	type
symPrefUniVar	classType	type	true
passou um
symPrefUniVar	primitiveType	arrayType	false
symPrefUniVar	dim	arrayType	false
symPrefUniVar	classType	arrayType	false
symPrefUniVar	dim	arrayType	false
symPrefUniVar	annotation	typeVariable	false
Identifier	 pref := 	), ,, __Identifier, extends, throws	 flw := 	,, ;, >, {
symPrefUniVar	annotation	dim	false
__[	 pref := 	), >, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	]
__]	 pref := 	[	 flw := 	), ++, ,, --, ., ..., :, ::, ;, =, >, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, and, default, instanceof, query, this, throws, {, }
symPrefUniVar	typeParameterModifier	typeParameter	true
passou um
Identifier	 pref := 	), ,, <, __Identifier	 flw := 	,, >, extends
symPrefUniVar	typeBound	typeParameter	true
passou um
symPrefUniVar	annotation	typeParameterModifier	false
__extends	 pref := 	__Identifier	 flw := 	@, __Identifier
symPrefUniVar	classType	typeBound	false
symPrefUniVar	additionalBound	typeBound	false
symPrefUniVar	typeVariable	typeBound	true
passou um
__and	 pref := 	>, ], __Identifier	 flw := 	@, __Identifier
true33	and
foi true22	and	classType	true
symPrefUniVar	classType	additionalBound	true
passou um
passou três	classType	additionalBound
__<	 pref := 	., ::, __Identifier, new, {	 flw := 	?, @, __Identifier, boolean, byte, char, double, float, int, long, short
symPrefUniVar	typeArgumentList	typeArguments	true
passou um
__>	 pref := 	>, ?, ], __Identifier	 flw := 	(, ), ,, ., ..., :, ::, ;, >, @, [, ], __Identifier, __InfixOperator, and, implements, instanceof, new, query, super, this, {, |, }
symPrefUniVar	typeArgument	typeArgumentList	true
passou um
__,	 pref := 	>, ?, ], __Identifier	 flw := 	?, @, __Identifier, boolean, byte, char, double, float, int, long, short
symPrefUniVar	typeArgument	typeArgumentList	true
passou um
symPrefUniVar	referenceType	typeArgument	false
symPrefUniVar	wildcard	typeArgument	true
passou um
passou três	wildcard	typeArgument
symPrefUniVar	annotation	wildcard	false
__?	 pref := 	), ,, <, __Identifier	 flw := 	,, >, extends, super
true33	?
foi true22	?	table: 0x55f3dd481550	true
symPrefUniVar	wildcardBounds	wildcard	true
passou um
passou três	wildcardBounds	wildcard
__extends	 pref := 	?	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
true33	extends
foi true22	extends	referenceType	true
symPrefUniVar	referenceType	wildcardBounds	true
passou um
__super	 pref := 	?	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
true33	super
foi true22	super	referenceType	true
symPrefUniVar	referenceType	wildcardBounds	true
passou um
passou três	referenceType	wildcardBounds
Identifier	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, @, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, import, query, return, static, throw, {, }, ~	 flw := 	(, ), ++, ,, --, ., ..., :, ::, ;, <, ?, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, abstract, boolean, byte, char, class, default, double, enum, final, float, instanceof, int, interface, long, native, package, private, protected, public, query, short, static, stictfp, strictfp, synchronized, transient, void, volatile, }
__.	 pref := 	__Identifier	 flw := 	__Identifier
Identifier	 pref := 	.	 flw := 	(, ), ++, ,, --, ., ..., :, ::, ;, <, ?, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, abstract, boolean, byte, char, class, default, double, enum, final, float, instanceof, int, interface, long, native, package, private, protected, public, query, short, static, stictfp, strictfp, synchronized, transient, void, volatile, }
symPrefUniVar	packageDeclaration	compilationUnit	true
passou um
symPrefUniVar	importDeclaration	compilationUnit	true
passou um
symPrefUniVar	typeDeclaration	compilationUnit	true
passou um
symPrefUniVar	packageModifier	packageDeclaration	true
passou um
__package	 pref := 	), __Identifier, __SKIP	 flw := 	__Identifier
true33	package
foi true22	package	Identifier	true
Identifier	 pref := 	package	 flw := 	., ;
true33	Identifier
foi true22	Identifier	table: 0x55f3dd4817c0	true
__.	 pref := 	__Identifier	 flw := 	__Identifier
Identifier	 pref := 	.	 flw := 	., ;
__;	 pref := 	__Identifier	 flw := 	$, ;, @, abstract, class, enum, final, import, interface, private, protected, public, static, strictfp
symPrefUniVar	annotation	packageModifier	false
__import	 pref := 	;, __SKIP	 flw := 	__Identifier, static
true33	import
foi true22	import	table: 0x55f3dd45e340	true
__static	 pref := 	import	 flw := 	__Identifier
true33	static
symPrefUniVar	qualIdent	importDeclaration	true
passou um
__.	 pref := 	__Identifier	 flw := 	*
UniqueFlw	__.	rule = 	importDeclaration	pref = 	__Identifier	flw = 	*	nInt = 	11	nEq = 	5	pflw = 	table: 0x55f3dd465280
__*	 pref := 	.	 flw := 	;
true33	*
foi true22	*	;	true
__;	 pref := 	*, __Identifier	 flw := 	$, ;, @, abstract, class, enum, final, import, interface, private, protected, public, static, strictfp
__;	 pref := 	;, __SKIP	 flw := 	$, ;, @, abstract, class, enum, final, import, interface, private, protected, public, static, strictfp
symPrefUniVar	classDeclaration	typeDeclaration	false
symPrefUniVar	interfaceDeclaration	typeDeclaration	false
__;	 pref := 	;, __SKIP, }	 flw := 	$, ;, @, abstract, class, enum, final, interface, private, protected, public, static, strictfp
symPrefUniVar	normalClassDeclaration	classDeclaration	true
passou um
symPrefUniVar	enumDeclaration	classDeclaration	true
passou um
symPrefUniVar	classModifier	normalClassDeclaration	false
__class	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	__Identifier
true33	class
foi true22	class	Identifier	true
Identifier	 pref := 	class	 flw := 	<, extends, implements, {
symPrefUniVar	typeParameters	normalClassDeclaration	false
symPrefUniVar	superclass	normalClassDeclaration	true
passou um
symPrefUniVar	superinterfaces	normalClassDeclaration	false
symPrefUniVar	classBody	normalClassDeclaration	false
symPrefUniVar	annotation	classModifier	false
__public	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__protected	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__private	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__abstract	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__static	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__final	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__strictfp	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__<	 pref := 	), ;, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }	 flw := 	@, __Identifier
symPrefUniVar	typeParameterList	typeParameters	true
passou um
__>	 pref := 	>, __Identifier	 flw := 	@, __Identifier, boolean, byte, char, double, extends, float, implements, int, long, short, void, {
symPrefUniVar	typeParameter	typeParameterList	true
passou um
__,	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	typeParameter	typeParameterList	true
passou um
__extends	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	classType	superclass	false
__implements	 pref := 	>, __Identifier	 flw := 	@, __Identifier
true33	implements
foi true22	implements	interfaceTypeList	true
symPrefUniVar	interfaceTypeList	superinterfaces	true
passou um
passou três	interfaceTypeList	superinterfaces
symPrefUniVar	classType	interfaceTypeList	false
__,	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	classType	interfaceTypeList	false
__{	 pref := 	), >, __Identifier	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	classBodyDeclaration	classBody	false
__}	 pref := 	;, {, }	 flw := 	$, (, ), ++, ,, --, ., :, ::, ;, <, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, instanceof, int, interface, long, native, new, private, protected, public, query, return, short, static, stictfp, strictfp, super, switch, synchronized, this, throw, transient, try, void, volatile, while, {, }
symPrefUniVar	classMemberDeclaration	classBodyDeclaration	true
passou um
symPrefUniVar	instanceInitializer	classBodyDeclaration	true
passou um
symPrefUniVar	staticInitializer	classBodyDeclaration	true
passou um
symPrefUniVar	constructorDeclaration	classBodyDeclaration	true
passou um
symPrefUniVar	fieldDeclaration	classMemberDeclaration	true
passou um
symPrefUniVar	methodDeclaration	classMemberDeclaration	true
passou um
symPrefUniVar	classDeclaration	classMemberDeclaration	false
symPrefUniVar	interfaceDeclaration	classMemberDeclaration	false
__;	 pref := 	;, {, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	fieldModifier	fieldDeclaration	true
passou um
symPrefUniVar	unannType	fieldDeclaration	false
symPrefUniVar	variableDeclaratorList	fieldDeclaration	false
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	variableDeclarator	variableDeclaratorList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	__Identifier
symPrefUniVar	variableDeclarator	variableDeclaratorList	true
passou um
symPrefUniVar	variableDeclaratorId	variableDeclarator	false
__=	 pref := 	], __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
Subset	__=	rule = 	variableDeclarator	total = 	3
symPrefUniVar	variableInitializer	variableDeclarator	true
passou um
Identifier	 pref := 	,, ..., >, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	), ,, :, ;, =, @, [
symPrefUniVar	dim	variableDeclaratorId	false
symPrefUniVar	expression	variableInitializer	false
symPrefUniVar	arrayInitializer	variableInitializer	true
passou um
Identifier	 pref := 	(, ), ,, :, ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, transient, volatile, {, }	 flw := 	., ..., <, @, [, __Identifier, this, |
symPrefUniVar	typeArguments	unannClassType	false
__.	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	annotation	unannClassType	false
Identifier	 pref := 	), ., __Identifier	 flw := 	., ..., <, @, [, __Identifier, this, |
symPrefUniVar	typeArguments	unannClassType	false
symPrefUniVar	basicType	unannType	false
symPrefUniVar	dim	unannType	false
symPrefUniVar	unannClassType	unannType	false
symPrefUniVar	dim	unannType	false
symPrefUniVar	annotation	fieldModifier	false
__public	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__protected	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__private	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__static	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__final	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__transient	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
true33	transient
__volatile	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
true33	volatile
symPrefUniVar	methodModifier	methodDeclaration	true
passou um
symPrefUniVar	methodHeader	methodDeclaration	false
symPrefUniVar	methodBody	methodDeclaration	false
symPrefUniVar	result	methodHeader	false
symPrefUniVar	methodDeclarator	methodHeader	false
symPrefUniVar	throws	methodHeader	false
symPrefUniVar	typeParameters	methodHeader	false
symPrefUniVar	annotation	methodHeader	false
symPrefUniVar	result	methodHeader	true
passou um
symPrefUniVar	methodDeclarator	methodHeader	true
passou um
symPrefUniVar	throws	methodHeader	false
Identifier	 pref := 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short, void	 flw := 	(
__(	 pref := 	__Identifier	 flw := 	), @, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	formalParameterList	methodDeclarator	false
__)	 pref := 	(, ], __Identifier, this	 flw := 	;, @, [, throws, {
symPrefUniVar	dim	methodDeclarator	false
symPrefUniVar	receiverParameter	formalParameterList	true
passou um
symPrefUniVar	formalParameter	formalParameterList	true
passou um
__,	 pref := 	], __Identifier, this	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	formalParameter	formalParameterList	true
passou um
symPrefUniVar	variableModifier	formalParameter	false
symPrefUniVar	unannType	formalParameter	false
symPrefUniVar	variableDeclaratorId	formalParameter	false
symPrefUniVar	variableModifier	formalParameter	false
symPrefUniVar	unannType	formalParameter	false
symPrefUniVar	annotation	formalParameter	false
__...	 pref := 	), >, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	__Identifier
true33	...
foi true22	...	variableDeclaratorId	true
symPrefUniVar	variableDeclaratorId	formalParameter	true
passou um
passou três	variableDeclaratorId	formalParameter
UniqueFlwVar	variableDeclaratorId	rule = 	formalParameter	pref = 	...	flw = 	), ,	rep = 	nil
symPrefUniVar	annotation	variableModifier	false
__final	 pref := 	(, ), ,, :, ;, __Identifier, final, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	variableModifier	receiverParameter	false
symPrefUniVar	unannType	receiverParameter	false
Identifier	 pref := 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	.
__.	 pref := 	__Identifier	 flw := 	this
__this	 pref := 	., >, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	), ,
symPrefUniVar	unannType	result	false
__void	 pref := 	), ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }	 flw := 	__Identifier
UniqueFlw	__void	rule = 	result	pref = 	), ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }	flw = 	__Identifier	nInt = 	1	nEq = 	0	pflw = 	nil
symPrefUniVar	annotation	methodModifier	false
__public	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__protected	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__private	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__abstract	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__static	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__final	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__synchronized	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
UniqueFlw	__synchronized	rule = 	methodModifier	pref = 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	flw = 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void	nInt = 	1	nEq = 	0	pflw = 	nil
__native	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
true33	native
__stictfp	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
true33	stictfp
__throws	 pref := 	), ]	 flw := 	@, __Identifier
true33	throws
foi true22	throws	exceptionTypeList	true
symPrefUniVar	exceptionTypeList	throws	true
passou um
passou três	exceptionTypeList	throws
symPrefUniVar	exceptionType	exceptionTypeList	true
passou um
passou três	exceptionType	exceptionTypeList
__,	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	exceptionType	exceptionTypeList	true
passou um
symPrefUniVar	classType	exceptionType	false
symPrefUniVar	typeVariable	exceptionType	true
passou um
symPrefUniVar	block	methodBody	false
__;	 pref := 	), >, ], __Identifier	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	block	instanceInitializer	false
__static	 pref := 	;, {, }	 flw := 	{
symPrefUniVar	block	staticInitializer	true
passou um
passou três	block	staticInitializer
symPrefUniVar	constructorModifier	constructorDeclaration	true
passou um
symPrefUniVar	constructorDeclarator	constructorDeclaration	true
passou um
symPrefUniVar	throws	constructorDeclaration	false
symPrefUniVar	constructorBody	constructorDeclaration	true
passou um
symPrefUniVar	typeParameters	constructorDeclarator	false
Identifier	 pref := 	), ;, >, __Identifier, private, protected, public, {, }	 flw := 	(
__(	 pref := 	__Identifier	 flw := 	), @, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	formalParameterList	constructorDeclarator	false
__)	 pref := 	(, ], __Identifier, this	 flw := 	throws, {
symPrefUniVar	annotation	constructorModifier	false
__public	 pref := 	), ;, __Identifier, private, protected, public, {, }	 flw := 	<, @, __Identifier, private, protected, public
__protected	 pref := 	), ;, __Identifier, private, protected, public, {, }	 flw := 	<, @, __Identifier, private, protected, public
__private	 pref := 	), ;, __Identifier, private, protected, public, {, }	 flw := 	<, @, __Identifier, private, protected, public
__{	 pref := 	), >, __Identifier	 flw := 	(, ++, --, ;, <, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	explicitConstructorInvocation	constructorBody	true
passou um
symPrefUniVar	blockStatements	constructorBody	false
__}	 pref := 	;, {, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	typeArguments	explicitConstructorInvocation	false
__this	 pref := 	>, {	 flw := 	(
symPrefUniVar	arguments	explicitConstructorInvocation	true
passou um
passou três	arguments	explicitConstructorInvocation
UniqueFlwVar	arguments	rule = 	explicitConstructorInvocation	pref = 	this	flw = 	;	rep = 	nil
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	typeArguments	explicitConstructorInvocation	true
passou um
__super	 pref := 	>, {	 flw := 	(
symPrefUniVar	arguments	explicitConstructorInvocation	false
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	primary	explicitConstructorInvocation	false
__.	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	<, super
symPrefUniVar	typeArguments	explicitConstructorInvocation	false
__super	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	explicitConstructorInvocation	false
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	qualIdent	explicitConstructorInvocation	false
__.	 pref := 	__Identifier	 flw := 	<, super
symPrefUniVar	typeArguments	explicitConstructorInvocation	false
__super	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	explicitConstructorInvocation	true
passou um
passou três	arguments	explicitConstructorInvocation
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	classModifier	enumDeclaration	false
__enum	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	__Identifier
true33	enum
foi true22	enum	Identifier	true
Identifier	 pref := 	enum	 flw := 	implements, {
true33	Identifier
foi true22	Identifier	table: 0x55f3dd4dabd0	true
symPrefUniVar	superinterfaces	enumDeclaration	false
symPrefUniVar	enumBody	enumDeclaration	true
passou um
__{	 pref := 	>, __Identifier	 flw := 	,, ;, @, __Identifier, }
symPrefUniVar	enumConstantList	enumBody	true
passou um
__,	 pref := 	), __Identifier, {, }	 flw := 	;, }
symPrefUniVar	enumBodyDeclarations	enumBody	true
passou um
__}	 pref := 	), ,, ;, __Identifier, {, }	 flw := 	$, (, ++, --, ;, <, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, int, interface, long, native, new, private, protected, public, return, short, static, stictfp, strictfp, super, switch, synchronized, this, throw, transient, try, void, volatile, while, {, }
symPrefUniVar	enumConstant	enumConstantList	true
passou um
__,	 pref := 	), __Identifier, }	 flw := 	@, __Identifier
symPrefUniVar	enumConstant	enumConstantList	true
passou um
symPrefUniVar	enumConstantModifier	enumConstant	true
passou um
Identifier	 pref := 	), ,, __Identifier, {	 flw := 	(, ,, ;, {, }
symPrefUniVar	arguments	enumConstant	false
symPrefUniVar	classBody	enumConstant	false
symPrefUniVar	annotation	enumConstantModifier	false
__;	 pref := 	), ,, __Identifier, {, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	classBodyDeclaration	enumBodyDeclarations	false
symPrefUniVar	normalInterfaceDeclaration	interfaceDeclaration	true
passou um
symPrefUniVar	annotationTypeDeclaration	interfaceDeclaration	true
passou um
symPrefUniVar	interfaceModifier	normalInterfaceDeclaration	false
__interface	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	__Identifier
true33	interface
foi true22	interface	Identifier	true
Identifier	 pref := 	interface	 flw := 	<, extends, {
symPrefUniVar	typeParameters	normalInterfaceDeclaration	false
symPrefUniVar	extendsInterfaces	normalInterfaceDeclaration	true
passou um
symPrefUniVar	interfaceBody	normalInterfaceDeclaration	true
passou um
symPrefUniVar	annotation	interfaceModifier	false
__public	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__protected	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__private	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__abstract	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__static	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__strictfp	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__extends	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	interfaceTypeList	extendsInterfaces	true
passou um
__{	 pref := 	>, __Identifier	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, void, }
symPrefUniVar	interfaceMemberDeclaration	interfaceBody	true
passou um
__}	 pref := 	;, {, }	 flw := 	$, ;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	constantDeclaration	interfaceMemberDeclaration	false
symPrefUniVar	interfaceMethodDeclaration	interfaceMemberDeclaration	true
passou um
symPrefUniVar	classDeclaration	interfaceMemberDeclaration	false
symPrefUniVar	interfaceDeclaration	interfaceMemberDeclaration	false
__;	 pref := 	;, {, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, void, }
symPrefUniVar	constantModifier	constantDeclaration	true
passou um
symPrefUniVar	unannType	constantDeclaration	false
symPrefUniVar	variableDeclaratorList	constantDeclaration	false
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, void, }
symPrefUniVar	annotation	constantModifier	false
__public	 pref := 	), ;, __Identifier, final, public, static, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, public, short, static
__static	 pref := 	), ;, __Identifier, final, public, static, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, public, short, static
__final	 pref := 	), ;, __Identifier, final, public, static, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, public, short, static
symPrefUniVar	interfaceMethodModifier	interfaceMethodDeclaration	true
passou um
symPrefUniVar	methodHeader	interfaceMethodDeclaration	false
symPrefUniVar	methodBody	interfaceMethodDeclaration	false
symPrefUniVar	annotation	interfaceMethodModifier	false
__public	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
__abstract	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
__default	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
__static	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
__strictfp	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
symPrefUniVar	interfaceModifier	annotationTypeDeclaration	false
__@	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	interface
__interface	 pref := 	@	 flw := 	__Identifier
true33	interface
foi true22	interface	Identifier	true
Identifier	 pref := 	interface	 flw := 	{
symPrefUniVar	annotationTypeBody	annotationTypeDeclaration	true
passou um
__{	 pref := 	__Identifier	 flw := 	;, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, }
symPrefUniVar	annotationTypeMemberDeclaration	annotationTypeBody	true
passou um
__}	 pref := 	;, {, }	 flw := 	$, ;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	annotationTypeElementDeclaration	annotationTypeMemberDeclaration	true
passou um
symPrefUniVar	constantDeclaration	annotationTypeMemberDeclaration	false
symPrefUniVar	classDeclaration	annotationTypeMemberDeclaration	false
symPrefUniVar	interfaceDeclaration	annotationTypeMemberDeclaration	false
__;	 pref := 	;, {, }	 flw := 	;, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, }
symPrefUniVar	annotationTypeElementModifier	annotationTypeElementDeclaration	true
passou um
symPrefUniVar	unannType	annotationTypeElementDeclaration	false
Identifier	 pref := 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	(
__(	 pref := 	__Identifier	 flw := 	)
__)	 pref := 	(	 flw := 	;, @, [, default
symPrefUniVar	dim	annotationTypeElementDeclaration	false
symPrefUniVar	defaultValue	annotationTypeElementDeclaration	true
passou um
UniqueFlwVar	defaultValue	rule = 	annotationTypeElementDeclaration	pref = 	), ]	flw = 	;	rep = 	true
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	;, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, }
symPrefUniVar	annotation	annotationTypeElementModifier	false
__public	 pref := 	), ;, __Identifier, abstract, public, {, }	 flw := 	@, __Identifier, abstract, boolean, byte, char, double, float, int, long, public, short
__abstract	 pref := 	), ;, __Identifier, abstract, public, {, }	 flw := 	@, __Identifier, abstract, boolean, byte, char, double, float, int, long, public, short
__default	 pref := 	), ]	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	elementValue	defaultValue	true
passou um
__@	 pref := 	!, (, ), +, ++, ,, -, --, ->, ., :, ;, <, =, >, [, ], __AssignmentOperator, __Identifier, __InfixOperator, __SKIP, abstract, and, assert, boolean, byte, case, char, default, do, double, else, extends, final, float, implements, instanceof, int, long, native, new, private, protected, public, query, return, short, static, stictfp, strictfp, super, synchronized, throw, throws, transient, volatile, {, |, }, ~	 flw := 	__Identifier
Subset	__@	rule = 	annotation	total = 	2
symPrefUniVar	normalAnnotation	annotation	true
passou um
passou três	normalAnnotation	annotation
symPrefUniVar	singleElementAnnotation	annotation	true
passou um
passou três	singleElementAnnotation	annotation
symPrefUniVar	markerAnnotation	annotation	true
passou um
passou três	markerAnnotation	annotation
symPrefUniVar	qualIdent	normalAnnotation	false
__(	 pref := 	__Identifier	 flw := 	), __Identifier
symPrefUniVar	elementValuePairList	normalAnnotation	true
passou um
__)	 pref := 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, ..., ;, <, ?, @, [, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, package, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, }
symPrefUniVar	elementValuePair	elementValuePairList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	__Identifier
symPrefUniVar	elementValuePair	elementValuePairList	true
passou um
Identifier	 pref := 	(, ), ++, ,, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	=
__=	 pref := 	__Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	elementValue	elementValuePair	true
passou um
symPrefUniVar	conditionalExpression	elementValue	false
symPrefUniVar	elementValueArrayInitializer	elementValue	true
passou um
symPrefUniVar	annotation	elementValue	false
__{	 pref := 	(, ,, =, default, {	 flw := 	!, (, +, ++, ,, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, }, ~
symPrefUniVar	elementValueList	elementValueArrayInitializer	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, {, }	 flw := 	}
__}	 pref := 	), ++, ,, --, >, ], __Identifier, __Literal, class, new, this, {, }	 flw := 	), ,, ;, __Identifier, }
symPrefUniVar	elementValue	elementValueList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	elementValue	elementValueList	true
passou um
symPrefUniVar	qualIdent	markerAnnotation	false
symPrefUniVar	qualIdent	singleElementAnnotation	false
__(	 pref := 	__Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	elementValue	singleElementAnnotation	true
passou um
__)	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, ..., ;, <, ?, @, [, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, package, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, }
__{	 pref := 	,, =, ], {	 flw := 	!, (, +, ++, ,, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, }, ~
symPrefUniVar	variableInitializerList	arrayInitializer	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, {, }	 flw := 	}
__}	 pref := 	), ++, ,, --, >, ], __Identifier, __Literal, class, new, this, {, }	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
symPrefUniVar	variableInitializer	variableInitializerList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	variableInitializer	variableInitializerList	true
passou um
__{	 pref := 	), ->, :, ;, >, ], __Identifier, do, else, finally, static, try, {, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	blockStatements	block	false
__}	 pref := 	;, {, }	 flw := 	(, ), ++, ,, --, :, ;, <, @, ], __Identifier, __InfixOperator, __Literal, abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, final, finally, float, for, if, instanceof, int, interface, long, native, new, private, protected, public, query, return, short, static, stictfp, strictfp, super, switch, synchronized, this, throw, transient, try, void, volatile, while, {, }
symPrefUniVar	blockStatement	blockStatements	false
symPrefUniVar	blockStatement	blockStatements	true
passou um
symPrefUniVar	localVariableDeclarationStatement	blockStatement	true
passou um
symPrefUniVar	classDeclaration	blockStatement	false
symPrefUniVar	statement	blockStatement	false
symPrefUniVar	localVariableDeclaration	localVariableDeclarationStatement	true
passou um
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	variableModifier	localVariableDeclaration	false
symPrefUniVar	unannType	localVariableDeclaration	false
symPrefUniVar	variableDeclaratorList	localVariableDeclaration	false
symPrefUniVar	block	statement	false
__if	 pref := 	), :, ;, do, else, {, }	 flw := 	(
true33	if
foi true22	if	parExpression	true
symPrefUniVar	parExpression	statement	true
passou um
passou três	parExpression	statement
UniqueFlwVar	parExpression	rule = 	statement	pref = 	if	flw = 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {	rep = 	nil
symPrefUniVar	statement	statement	false
__else	 pref := 	;, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
true33	else
symPrefUniVar	statement	statement	true
passou um
passou três	statement	statement
symPrefUniVar	basicForStatement	statement	true
passou um
symPrefUniVar	enhancedForStatement	statement	true
passou um
__while	 pref := 	), :, ;, do, else, {, }	 flw := 	(
Subset	__while	rule = 	statement	total = 	2
symPrefUniVar	parExpression	statement	false
symPrefUniVar	statement	statement	false
__do	 pref := 	), :, ;, do, else, {, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
true33	do
foi true22	do	statement	true
symPrefUniVar	statement	statement	true
passou um
passou três	statement	statement
__while	 pref := 	;, }	 flw := 	(
true33	while
symPrefUniVar	parExpression	statement	true
passou um
passou três	parExpression	statement
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	tryStatement	statement	true
passou um
passou três	tryStatement	statement
__switch	 pref := 	), :, ;, do, else, {, }	 flw := 	(
true33	switch
foi true22	switch	parExpression	true
symPrefUniVar	parExpression	statement	true
passou um
passou três	parExpression	statement
UniqueFlwVar	parExpression	rule = 	statement	pref = 	switch	flw = 	{	rep = 	nil
symPrefUniVar	switchBlock	statement	true
passou um
__synchronized	 pref := 	), :, ;, do, else, {, }	 flw := 	(
symPrefUniVar	parExpression	statement	true
passou um
passou três	parExpression	statement
UniqueFlwVar	parExpression	rule = 	statement	pref = 	synchronized	flw = 	{	rep = 	nil
symPrefUniVar	block	statement	false
__return	 pref := 	), :, ;, do, else, {, }	 flw := 	!, (, +, ++, -, --, ;, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	return
foi true22	return	table: 0x55f3dd51f180	true
symPrefUniVar	expression	statement	true
passou um
passou três	expression	statement
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, return, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__throw	 pref := 	), :, ;, do, else, {, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	throw
foi true22	throw	expression	true
symPrefUniVar	expression	statement	true
passou um
passou três	expression	statement
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__break	 pref := 	), :, ;, do, else, {, }	 flw := 	;, __Identifier
true33	break
foi true22	break	table: 0x55f3dd51fd10	true
Identifier	 pref := 	break	 flw := 	;
true33	Identifier
__;	 pref := 	__Identifier, break	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__continue	 pref := 	), :, ;, do, else, {, }	 flw := 	;, __Identifier
true33	continue
foi true22	continue	table: 0x55f3dd4bcbb0	true
Identifier	 pref := 	continue	 flw := 	;
true33	Identifier
__;	 pref := 	__Identifier, continue	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__assert	 pref := 	), :, ;, do, else, {, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	assert
foi true22	assert	expression	true
symPrefUniVar	expression	statement	true
passou um
passou três	expression	statement
__:	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	statement	false
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__;	 pref := 	), :, ;, do, else, {, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	statementExpression	statement	false
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
Identifier	 pref := 	), :, ;, do, else, {, }	 flw := 	:
__:	 pref := 	__Identifier	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
symPrefUniVar	statement	statement	false
symPrefUniVar	assignment	statementExpression	false
__++	 pref := 	(, ), ,, :, ;, do, else, {, }	 flw := 	(, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
__--	 pref := 	(, ), ,, :, ;, do, else, {, }	 flw := 	(, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
symPrefUniVar	primary	statementExpression	false
symPrefUniVar	qualIdent	statementExpression	false
symPrefUniVar	primary	statementExpression	false
symPrefUniVar	qualIdent	statementExpression	false
__++	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, ;
__--	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, ;
symPrefUniVar	primary	statementExpression	false
__{	 pref := 	)	 flw := 	case, default, }
symPrefUniVar	switchBlockStatementGroup	switchBlock	true
passou um
symPrefUniVar	switchLabel	switchBlock	false
__}	 pref := 	:, ;, {, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	switchLabels	switchBlockStatementGroup	true
passou um
symPrefUniVar	blockStatements	switchBlockStatementGroup	true
passou um
symPrefUniVar	switchLabel	switchLabels	false
symPrefUniVar	switchLabel	switchLabels	false
__case	 pref := 	:, ;, {, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	case
foi true22	case	table: 0x55f3dd528bd0	true
symPrefUniVar	constantExpression	switchLabel	true
passou um
symPrefUniVar	enumConstantName	switchLabel	true
passou um
__:	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__default	 pref := 	:, ;, {, }	 flw := 	:
__:	 pref := 	default	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
true33	:
Identifier	 pref := 	case	 flw := 	:
__for	 pref := 	), :, ;, do, else, {, }	 flw := 	(
Subset	__for	rule = 	basicForStatement	total = 	2
__(	 pref := 	for	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, boolean, byte, char, double, final, float, int, long, new, short, super, this, void
symPrefUniVar	forInit	basicForStatement	true
passou um
__;	 pref := 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, ;, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	basicForStatement	true
passou um
__;	 pref := 	), ++, --, ;, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ), ++, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
symPrefUniVar	forUpdate	basicForStatement	true
passou um
__)	 pref := 	), ++, --, ;, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
symPrefUniVar	statement	basicForStatement	false
symPrefUniVar	localVariableDeclaration	forInit	true
passou um
symPrefUniVar	statementExpressionList	forInit	true
passou um
symPrefUniVar	statementExpressionList	forUpdate	true
passou um
symPrefUniVar	statementExpression	statementExpressionList	false
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
symPrefUniVar	statementExpression	statementExpressionList	true
passou um
__for	 pref := 	), :, ;, do, else, {, }	 flw := 	(
Subset	__for	rule = 	enhancedForStatement	total = 	2
__(	 pref := 	for	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	variableModifier	enhancedForStatement	false
symPrefUniVar	unannType	enhancedForStatement	false
symPrefUniVar	variableDeclaratorId	enhancedForStatement	false
__:	 pref := 	], __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	enhancedForStatement	false
__)	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
symPrefUniVar	statement	enhancedForStatement	false
__try	 pref := 	), :, ;, do, else, {, }	 flw := 	(, {
true33	try
foi true22	try	table: 0x55f3dd52e4a0	true
symPrefUniVar	block	tryStatement	true
passou um
passou três	block	tryStatement
UniqueFlwVar	block	rule = 	tryStatement	pref = 	try	flw = 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, final, finally, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }	rep = 	nil
symPrefUniVar	catchClause	tryStatement	false
symPrefUniVar	finally	tryStatement	false
symPrefUniVar	catchClause	tryStatement	false
symPrefUniVar	resourceSpecification	tryStatement	true
passou um
passou três	resourceSpecification	tryStatement
UniqueFlwVar	resourceSpecification	rule = 	tryStatement	pref = 	try	flw = 	{	rep = 	nil
symPrefUniVar	block	tryStatement	false
symPrefUniVar	catchClause	tryStatement	true
passou um
passou três	catchClause	tryStatement
symPrefUniVar	finally	tryStatement	true
passou um
passou três	finally	tryStatement
__catch	 pref := 	}	 flw := 	(
true33	catch
foi true22	catch	(	true
__(	 pref := 	catch	 flw := 	@, __Identifier, final
true33	(
foi true22	(	catchFormalParameter	true
symPrefUniVar	catchFormalParameter	catchClause	true
passou um
__)	 pref := 	], __Identifier	 flw := 	{
symPrefUniVar	block	catchClause	false
symPrefUniVar	variableModifier	catchFormalParameter	false
symPrefUniVar	catchType	catchFormalParameter	true
passou um
symPrefUniVar	variableDeclaratorId	catchFormalParameter	false
symPrefUniVar	unannClassType	catchType	false
__|	 pref := 	>, __Identifier	 flw := 	@, __Identifier
true33	|
symPrefUniVar	classType	catchType	true
passou um
passou três	classType	catchType
__finally	 pref := 	}	 flw := 	{
true33	finally
foi true22	finally	block	true
symPrefUniVar	block	finally	true
passou um
passou três	block	finally
__(	 pref := 	try	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
true33	(
foi true22	(	resourceList	true
symPrefUniVar	resourceList	resourceSpecification	true
passou um
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	)
__)	 pref := 	), ++, --, ;, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	{
symPrefUniVar	resource	resourceList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	resource	resourceList	true
passou um
symPrefUniVar	variableModifier	resource	false
symPrefUniVar	unannType	resource	false
symPrefUniVar	variableDeclaratorId	resource	false
__=	 pref := 	], __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
Subset	__=	rule = 	resource	total = 	3
symPrefUniVar	expression	resource	false
symPrefUniVar	lambdaExpression	expression	true
passou um
symPrefUniVar	assignmentExpression	expression	true
passou um
symPrefUniVar	primaryBase	primary	true
passou um
symPrefUniVar	primaryRest	primary	true
passou um
__this	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
UniqueFlw	__this	rule = 	primaryBase	pref = 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	flw = 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }	nInt = 	1	nEq = 	0	pflw = 	nil
Literal	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
true33	Literal
symPrefUniVar	parExpression	primaryBase	true
passou um
__super	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	., ::
__.	 pref := 	super	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	primaryBase	false
__.	 pref := 	super	 flw := 	__Identifier
Identifier	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__::	 pref := 	super	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	::, >	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__new	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	<, @, __Identifier, boolean, byte, char, double, float, int, long, short
true33	new
foi true22	new	table: 0x55f3dd535940	true
symPrefUniVar	classCreator	primaryBase	false
symPrefUniVar	arrayCreator	primaryBase	true
passou um
symPrefUniVar	qualIdent	primaryBase	false
__[	 pref := 	__Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	primaryBase	false
__]	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
symPrefUniVar	arguments	primaryBase	false
__.	 pref := 	__Identifier	 flw := 	<, new, super, this
__this	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__new	 pref := 	.	 flw := 	<, @, __Identifier
symPrefUniVar	classCreator	primaryBase	false
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	>	 flw := 	(
symPrefUniVar	arguments	primaryBase	false
__super	 pref := 	.	 flw := 	.
__.	 pref := 	super	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	primaryBase	false
__super	 pref := 	.	 flw := 	.
__.	 pref := 	super	 flw := 	__Identifier
true33	.
Identifier	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__super	 pref := 	.	 flw := 	::
__::	 pref := 	super	 flw := 	<, __Identifier
true33	::
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	::, >	 flw := 	(
symPrefUniVar	arguments	primaryBase	false
__[	 pref := 	], __Identifier	 flw := 	]
__]	 pref := 	[	 flw := 	., [
__.	 pref := 	], __Identifier	 flw := 	class
__class	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__::	 pref := 	__Identifier	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	::, >	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__void	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	.
__.	 pref := 	void	 flw := 	class
true33	.
foi true22	.	class	true
__class	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
symPrefUniVar	basicType	primaryBase	false
__[	 pref := 	], boolean, byte, char, double, float, int, long, short	 flw := 	]
__]	 pref := 	[	 flw := 	., [
__.	 pref := 	], boolean, byte, char, double, float, int, long, short	 flw := 	class
__class	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
true33	class
symPrefUniVar	referenceType	primaryBase	false
__::	 pref := 	>, ], __Identifier	 flw := 	<, new
symPrefUniVar	typeArguments	primaryBase	false
UniqueFlwVar	typeArguments	rule = 	primaryBase	pref = 	::	flw = 	new	rep = 	true
__new	 pref := 	::, >	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
symPrefUniVar	arrayType	primaryBase	true
passou um
__::	 pref := 	]	 flw := 	new
__new	 pref := 	::	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
true33	new
__.	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	<, __Identifier, new
symPrefUniVar	typeArguments	primaryRest	false
Identifier	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	primaryRest	false
Identifier	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__new	 pref := 	.	 flw := 	<, @, __Identifier
symPrefUniVar	classCreator	primaryRest	false
__[	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	primaryRest	false
__]	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__::	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryRest	false
Identifier	 pref := 	::, >	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__(	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, if, query, return, switch, synchronized, throw, while, {, }, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	parExpression	false
__)	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ), ++, ,, --, ., :, ::, ;, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, instanceof, int, long, new, query, return, short, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	typeArguments	classCreator	true
passou um
passou três	typeArguments	classCreator
symPrefUniVar	annotation	classCreator	false
symPrefUniVar	classTypeWithDiamond	classCreator	true
passou um
symPrefUniVar	arguments	classCreator	false
symPrefUniVar	classBody	classCreator	false
symPrefUniVar	annotation	classTypeWithDiamond	false
Identifier	 pref := 	), >, __Identifier, new	 flw := 	(, ., <
symPrefUniVar	typeArgumentsOrDiamond	classTypeWithDiamond	false
__.	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	annotation	classTypeWithDiamond	false
Identifier	 pref := 	), ., __Identifier	 flw := 	(, ., <
symPrefUniVar	typeArgumentsOrDiamond	classTypeWithDiamond	true
passou um
symPrefUniVar	typeArguments	typeArgumentsOrDiamond	false
__<	 pref := 	__Identifier	 flw := 	>
__>	 pref := 	<	 flw := 	(, .
true33	>
foi true22	>	table: 0x55f3dd541540	true
symPrefUniVar	type	arrayCreator	false
symPrefUniVar	dimExpr	arrayCreator	true
passou um
symPrefUniVar	dim	arrayCreator	false
symPrefUniVar	type	arrayCreator	true
passou um
symPrefUniVar	dim	arrayCreator	false
symPrefUniVar	arrayInitializer	arrayCreator	true
passou um
symPrefUniVar	annotation	dimExpr	false
__[	 pref := 	), ], __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	dimExpr	false
__]	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ++, ,, --, ., :, ::, ;, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__(	 pref := 	>, __Identifier, super, this	 flw := 	!, (, ), +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	argumentList	arguments	true
passou um
__)	 pref := 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, {, }
symPrefUniVar	expression	argumentList	false
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	argumentList	false
__++	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	(, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
__--	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	(, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
symPrefUniVar	primary	unaryExpression	false
symPrefUniVar	qualIdent	unaryExpression	false
__+	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	+
foi true22	+	table: 0x55f3dd546690	true
symPrefUniVar	unaryExpression	unaryExpression	true
passou um
passou três	unaryExpression	unaryExpression
__-	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	-
foi true22	-	table: 0x55f3dd546d70	true
symPrefUniVar	unaryExpression	unaryExpression	true
passou um
passou três	unaryExpression	unaryExpression
symPrefUniVar	unaryExpressionNotPlusMinus	unaryExpression	false
__~	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	~
foi true22	~	unaryExpression	true
symPrefUniVar	unaryExpression	unaryExpressionNotPlusMinus	true
passou um
passou três	unaryExpression	unaryExpressionNotPlusMinus
__!	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	!
foi true22	!	table: 0x55f3dd547cb0	true
symPrefUniVar	unaryExpression	unaryExpressionNotPlusMinus	true
passou um
passou três	unaryExpression	unaryExpressionNotPlusMinus
symPrefUniVar	castExpression	unaryExpressionNotPlusMinus	true
passou um
symPrefUniVar	primary	unaryExpressionNotPlusMinus	false
symPrefUniVar	qualIdent	unaryExpressionNotPlusMinus	false
__++	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, :, ;, ], __Identifier, __InfixOperator, instanceof, query, }
__--	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, :, ;, ], __Identifier, __InfixOperator, instanceof, query, }
__(	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	@, boolean, byte, char, double, float, int, long, short
symPrefUniVar	primitiveType	castExpression	false
__)	 pref := 	boolean, byte, char, double, float, int, long, short	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	)
foi true22	)	unaryExpression	true
symPrefUniVar	unaryExpression	castExpression	true
passou um
__(	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
symPrefUniVar	referenceType	castExpression	false
symPrefUniVar	additionalBound	castExpression	false
__)	 pref := 	>, ], __Identifier	 flw := 	(, __Identifier
symPrefUniVar	lambdaExpression	castExpression	true
passou um
__(	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
symPrefUniVar	referenceType	castExpression	false
symPrefUniVar	additionalBound	castExpression	false
__)	 pref := 	>, ], __Identifier	 flw := 	!, (, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	unaryExpressionNotPlusMinus	castExpression	false
symPrefUniVar	unaryExpression	infixExpression	true
passou um
InfixOperator	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	InfixOperator
symPrefUniVar	unaryExpression	infixExpression	true
passou um
passou três	unaryExpression	infixExpression
__instanceof	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
true33	instanceof
symPrefUniVar	referenceType	infixExpression	true
passou um
passou três	referenceType	infixExpression
symPrefUniVar	infixExpression	conditionalExpression	true
passou um
__query	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	query
symPrefUniVar	expression	conditionalExpression	true
passou um
passou três	expression	conditionalExpression
__:	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	conditionalExpression	false
symPrefUniVar	assignment	assignmentExpression	false
symPrefUniVar	conditionalExpression	assignmentExpression	false
symPrefUniVar	leftHandSide	assignment	true
passou um
AssignmentOperator	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	AssignmentOperator
foi true22	AssignmentOperator	expression	true
symPrefUniVar	expression	assignment	true
passou um
passou três	expression	assignment
symPrefUniVar	primary	leftHandSide	false
symPrefUniVar	qualIdent	leftHandSide	false
symPrefUniVar	lambdaParameters	lambdaExpression	true
passou um
UniqueFlwVar	lambdaParameters	rule = 	lambdaExpression	pref = 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	flw = 	->	rep = 	nil
__->	 pref := 	), __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
true33	->
foi true22	->	lambdaBody	true
symPrefUniVar	lambdaBody	lambdaExpression	true
passou um
passou três	lambdaBody	lambdaExpression
Identifier	 pref := 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	 flw := 	->
UniqueFlw	Identifier	rule = 	lambdaParameters	pref = 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	flw = 	->	nInt = 	17	nEq = 	3	pflw = 	nil
__(	 pref := 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	 flw := 	), @, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	formalParameterList	lambdaParameters	false
__)	 pref := 	(, ], __Identifier, this	 flw := 	->
__(	 pref := 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	 flw := 	__Identifier
symPrefUniVar	inferredFormalParameterList	lambdaParameters	true
passou um
__)	 pref := 	__Identifier	 flw := 	->
Identifier	 pref := 	(	 flw := 	), ,
__,	 pref := 	__Identifier	 flw := 	__Identifier
Identifier	 pref := 	,	 flw := 	), ,
symPrefUniVar	expression	lambdaBody	true
passou um
passou três	expression	lambdaBody
symPrefUniVar	block	lambdaBody	true
passou um
passou três	block	lambdaBody
symPrefUniVar	expression	constantExpression	true
passou um
unique var 	compilationUnit
Unique usage	compilationUnit
unique var 	classType
unique var2 	wildcard
unique var 	wildcardBounds
Unique usage	wildcardBounds
unique var 	referenceType
unique var 	referenceType
unique var2 	packageDeclaration
unique var 	typeDeclaration
Unique usage	typeDeclaration
unique var 	qualIdent
unique var 	interfaceDeclaration
unique var2 	normalClassDeclaration
unique var2 	enumDeclaration
unique var 	typeParameters
unique var 	superclass
Unique usage	superclass
unique var 	superinterfaces
Unique usage	superinterfaces
unique var 	classBody
unique var 	classType
unique var 	interfaceTypeList
Unique usage	interfaceTypeList
unique var 	classType
unique var 	classType
unique var2 	staticInitializer
unique var 	variableDeclaratorId
unique var 	exceptionTypeList
Unique usage	exceptionTypeList
unique var 	exceptionType
Unique usage	exceptionType
unique var 	exceptionType
Unique usage	exceptionType
unique var 	typeVariable
unique var 	superinterfaces
Unique usage	superinterfaces
unique var 	enumBody
Unique usage	enumBody
unique var 	enumConstantList
Unique usage	enumConstantList
unique var 	enumBodyDeclarations
Unique usage	enumBodyDeclarations
unique var 	enumConstant
unique var 	classBodyDeclaration
unique var2 	normalInterfaceDeclaration
unique var2 	annotationTypeDeclaration
unique var 	typeParameters
unique var 	extendsInterfaces
Unique usage	extendsInterfaces
unique var 	interfaceBody
Unique usage	interfaceBody
unique var 	interfaceTypeList
Unique usage	interfaceTypeList
unique var 	interfaceMemberDeclaration
Unique usage	interfaceMemberDeclaration
unique var 	interfaceDeclaration
unique var 	annotationTypeBody
Unique usage	annotationTypeBody
unique var 	annotationTypeMemberDeclaration
Unique usage	annotationTypeMemberDeclaration
unique var 	interfaceDeclaration
setUnique	if	nil	true
unique var 	parExpression
unique var 	statement
unique var 	statement
unique var 	statement
unique var 	parExpression
unique var2 	tryStatement
unique var 	parExpression
unique var 	switchBlock
Unique usage	switchBlock
unique var 	block
unique var 	expression
unique var 	expression
unique var 	expression
unique var 	expression
unique var 	switchLabel
unique var 	enumConstantName
Unique usage	enumConstantName
unique var 	block
unique var 	catchClause
unique var 	resourceSpecification
Unique usage	resourceSpecification
unique var 	block
unique var 	catchClause
unique var 	finally
unique var 	catchFormalParameter
Unique usage	catchFormalParameter
unique var 	block
unique var 	variableModifier
unique var 	catchType
Unique usage	catchType
unique var 	variableDeclaratorId
unique var 	unannClassType
unique var 	classType
unique var 	block
unique var 	resourceList
Unique usage	resourceList
unique var 	resource
Unique usage	resource
unique var 	resource
Unique usage	resource
unique var 	variableModifier
unique var 	unannType
unique var 	variableDeclaratorId
unique var 	expression
unique var 	arrayCreator
Unique usage	arrayCreator
unique var 	typeArguments
unique var 	arguments
unique var 	type
unique var 	dim
unique var 	arrayInitializer
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	referenceType
unique var 	expression
unique var 	expression
unique var 	expression
unique var 	lambdaBody
Unique usage	lambdaBody
unique var 	expression
unique var 	block
SKIP	 pref := 		 flw := 	$, ;, @, abstract, class, enum, final, import, interface, package, private, protected, public, static, strictfp
true33	SKIP
foi true22	SKIP	compilationUnit	true
symPrefUniVar	compilationUnit	compilation	true
passou um
passou três	compilationUnit	compilation
__byte	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	byte
__short	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	short
__int	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	int
__long	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	long
__char	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	char
__float	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	float
__double	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	double
__boolean	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, >, [, __AssignmentOperator, __Identifier, __InfixOperator, abstract, assert, case, default, do, else, extends, final, instanceof, native, new, private, protected, public, query, return, static, stictfp, strictfp, super, synchronized, throw, transient, volatile, {, }, ~	 flw := 	), ., ..., @, [, __Identifier, this
true33	boolean
symPrefUniVar	annotation	primitiveType	false
symPrefUniVar	basicType	primitiveType	false
symPrefUniVar	primitiveType	referenceType	false
symPrefUniVar	dim	referenceType	false
symPrefUniVar	classType	referenceType	false
symPrefUniVar	dim	referenceType	false
symPrefUniVar	annotation	classType	false
Identifier	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, <, =, [, __AssignmentOperator, __Identifier, __InfixOperator, and, assert, case, default, do, else, extends, implements, instanceof, new, query, return, super, throw, throws, {, |, }, ~	 flw := 	), ,, ., :, ::, ;, <, >, @, [, ], __Identifier, __InfixOperator, and, implements, instanceof, query, {, |, }
symPrefUniVar	typeArguments	classType	false
__.	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	annotation	classType	false
Identifier	 pref := 	), ., __Identifier	 flw := 	), ,, ., :, ::, ;, <, >, @, [, ], __Identifier, __InfixOperator, and, implements, instanceof, query, {, |, }
symPrefUniVar	typeArguments	classType	false
symPrefUniVar	primitiveType	type	true
passou um
passou três	primitiveType	type
symPrefUniVar	classType	type	true
passou um
symPrefUniVar	primitiveType	arrayType	false
symPrefUniVar	dim	arrayType	false
symPrefUniVar	classType	arrayType	false
symPrefUniVar	dim	arrayType	false
symPrefUniVar	annotation	typeVariable	false
Identifier	 pref := 	), ,, __Identifier, extends, throws	 flw := 	,, ;, >, {
symPrefUniVar	annotation	dim	false
__[	 pref := 	), >, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	]
__]	 pref := 	[	 flw := 	), ++, ,, --, ., ..., :, ::, ;, =, >, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, and, default, instanceof, query, this, throws, {, }
symPrefUniVar	typeParameterModifier	typeParameter	true
passou um
Identifier	 pref := 	), ,, <, __Identifier	 flw := 	,, >, extends
symPrefUniVar	typeBound	typeParameter	true
passou um
symPrefUniVar	annotation	typeParameterModifier	false
__extends	 pref := 	__Identifier	 flw := 	@, __Identifier
symPrefUniVar	classType	typeBound	false
symPrefUniVar	additionalBound	typeBound	false
symPrefUniVar	typeVariable	typeBound	true
passou um
__and	 pref := 	>, ], __Identifier	 flw := 	@, __Identifier
true33	and
foi true22	and	classType	true
symPrefUniVar	classType	additionalBound	true
passou um
passou três	classType	additionalBound
__<	 pref := 	., ::, __Identifier, new, {	 flw := 	?, @, __Identifier, boolean, byte, char, double, float, int, long, short
symPrefUniVar	typeArgumentList	typeArguments	true
passou um
__>	 pref := 	>, ?, ], __Identifier	 flw := 	(, ), ,, ., ..., :, ::, ;, >, @, [, ], __Identifier, __InfixOperator, and, implements, instanceof, new, query, super, this, {, |, }
symPrefUniVar	typeArgument	typeArgumentList	true
passou um
__,	 pref := 	>, ?, ], __Identifier	 flw := 	?, @, __Identifier, boolean, byte, char, double, float, int, long, short
symPrefUniVar	typeArgument	typeArgumentList	true
passou um
symPrefUniVar	referenceType	typeArgument	false
symPrefUniVar	wildcard	typeArgument	true
passou um
passou três	wildcard	typeArgument
symPrefUniVar	annotation	wildcard	false
__?	 pref := 	), ,, <, __Identifier	 flw := 	,, >, extends, super
true33	?
foi true22	?	table: 0x55f3dd481550	true
symPrefUniVar	wildcardBounds	wildcard	true
passou um
passou três	wildcardBounds	wildcard
__extends	 pref := 	?	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
true33	extends
foi true22	extends	referenceType	true
symPrefUniVar	referenceType	wildcardBounds	true
passou um
__super	 pref := 	?	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
true33	super
foi true22	super	referenceType	true
symPrefUniVar	referenceType	wildcardBounds	true
passou um
passou três	referenceType	wildcardBounds
Identifier	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, @, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, import, query, return, static, throw, {, }, ~	 flw := 	(, ), ++, ,, --, ., ..., :, ::, ;, <, ?, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, abstract, boolean, byte, char, class, default, double, enum, final, float, instanceof, int, interface, long, native, package, private, protected, public, query, short, static, stictfp, strictfp, synchronized, transient, void, volatile, }
__.	 pref := 	__Identifier	 flw := 	__Identifier
Identifier	 pref := 	.	 flw := 	(, ), ++, ,, --, ., ..., :, ::, ;, <, ?, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, abstract, boolean, byte, char, class, default, double, enum, final, float, instanceof, int, interface, long, native, package, private, protected, public, query, short, static, stictfp, strictfp, synchronized, transient, void, volatile, }
symPrefUniVar	packageDeclaration	compilationUnit	true
passou um
symPrefUniVar	importDeclaration	compilationUnit	true
passou um
symPrefUniVar	typeDeclaration	compilationUnit	true
passou um
symPrefUniVar	packageModifier	packageDeclaration	true
passou um
__package	 pref := 	), __Identifier, __SKIP	 flw := 	__Identifier
true33	package
foi true22	package	Identifier	true
Identifier	 pref := 	package	 flw := 	., ;
true33	Identifier
foi true22	Identifier	table: 0x55f3dd4817c0	true
__.	 pref := 	__Identifier	 flw := 	__Identifier
Identifier	 pref := 	.	 flw := 	., ;
__;	 pref := 	__Identifier	 flw := 	$, ;, @, abstract, class, enum, final, import, interface, private, protected, public, static, strictfp
symPrefUniVar	annotation	packageModifier	false
__import	 pref := 	;, __SKIP	 flw := 	__Identifier, static
true33	import
foi true22	import	table: 0x55f3dd45e340	true
__static	 pref := 	import	 flw := 	__Identifier
true33	static
symPrefUniVar	qualIdent	importDeclaration	true
passou um
__.	 pref := 	__Identifier	 flw := 	*
UniqueFlw	__.	rule = 	importDeclaration	pref = 	__Identifier	flw = 	*	nInt = 	11	nEq = 	5	pflw = 	table: 0x55f3dd465280
__*	 pref := 	.	 flw := 	;
true33	*
foi true22	*	;	true
__;	 pref := 	*, __Identifier	 flw := 	$, ;, @, abstract, class, enum, final, import, interface, private, protected, public, static, strictfp
__;	 pref := 	;, __SKIP	 flw := 	$, ;, @, abstract, class, enum, final, import, interface, private, protected, public, static, strictfp
symPrefUniVar	classDeclaration	typeDeclaration	false
symPrefUniVar	interfaceDeclaration	typeDeclaration	false
__;	 pref := 	;, __SKIP, }	 flw := 	$, ;, @, abstract, class, enum, final, interface, private, protected, public, static, strictfp
symPrefUniVar	normalClassDeclaration	classDeclaration	true
passou um
symPrefUniVar	enumDeclaration	classDeclaration	true
passou um
symPrefUniVar	classModifier	normalClassDeclaration	false
__class	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	__Identifier
true33	class
foi true22	class	Identifier	true
Identifier	 pref := 	class	 flw := 	<, extends, implements, {
symPrefUniVar	typeParameters	normalClassDeclaration	false
symPrefUniVar	superclass	normalClassDeclaration	true
passou um
symPrefUniVar	superinterfaces	normalClassDeclaration	false
symPrefUniVar	classBody	normalClassDeclaration	false
symPrefUniVar	annotation	classModifier	false
__public	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__protected	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__private	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__abstract	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__static	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__final	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__strictfp	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, class, enum, final, private, protected, public, static, strictfp
__<	 pref := 	), ;, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }	 flw := 	@, __Identifier
symPrefUniVar	typeParameterList	typeParameters	true
passou um
__>	 pref := 	>, __Identifier	 flw := 	@, __Identifier, boolean, byte, char, double, extends, float, implements, int, long, short, void, {
symPrefUniVar	typeParameter	typeParameterList	true
passou um
__,	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	typeParameter	typeParameterList	true
passou um
__extends	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	classType	superclass	false
__implements	 pref := 	>, __Identifier	 flw := 	@, __Identifier
true33	implements
foi true22	implements	interfaceTypeList	true
symPrefUniVar	interfaceTypeList	superinterfaces	true
passou um
passou três	interfaceTypeList	superinterfaces
symPrefUniVar	classType	interfaceTypeList	false
__,	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	classType	interfaceTypeList	false
__{	 pref := 	), >, __Identifier	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	classBodyDeclaration	classBody	false
__}	 pref := 	;, {, }	 flw := 	$, (, ), ++, ,, --, ., :, ::, ;, <, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, instanceof, int, interface, long, native, new, private, protected, public, query, return, short, static, stictfp, strictfp, super, switch, synchronized, this, throw, transient, try, void, volatile, while, {, }
symPrefUniVar	classMemberDeclaration	classBodyDeclaration	true
passou um
symPrefUniVar	instanceInitializer	classBodyDeclaration	true
passou um
symPrefUniVar	staticInitializer	classBodyDeclaration	true
passou um
symPrefUniVar	constructorDeclaration	classBodyDeclaration	true
passou um
symPrefUniVar	fieldDeclaration	classMemberDeclaration	true
passou um
symPrefUniVar	methodDeclaration	classMemberDeclaration	true
passou um
symPrefUniVar	classDeclaration	classMemberDeclaration	false
symPrefUniVar	interfaceDeclaration	classMemberDeclaration	false
__;	 pref := 	;, {, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	fieldModifier	fieldDeclaration	true
passou um
symPrefUniVar	unannType	fieldDeclaration	false
symPrefUniVar	variableDeclaratorList	fieldDeclaration	false
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	variableDeclarator	variableDeclaratorList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	__Identifier
symPrefUniVar	variableDeclarator	variableDeclaratorList	true
passou um
symPrefUniVar	variableDeclaratorId	variableDeclarator	false
__=	 pref := 	], __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
Subset	__=	rule = 	variableDeclarator	total = 	3
symPrefUniVar	variableInitializer	variableDeclarator	true
passou um
Identifier	 pref := 	,, ..., >, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	), ,, :, ;, =, @, [
symPrefUniVar	dim	variableDeclaratorId	false
symPrefUniVar	expression	variableInitializer	false
symPrefUniVar	arrayInitializer	variableInitializer	true
passou um
Identifier	 pref := 	(, ), ,, :, ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, transient, volatile, {, }	 flw := 	., ..., <, @, [, __Identifier, this, |
symPrefUniVar	typeArguments	unannClassType	false
__.	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	annotation	unannClassType	false
Identifier	 pref := 	), ., __Identifier	 flw := 	., ..., <, @, [, __Identifier, this, |
symPrefUniVar	typeArguments	unannClassType	false
symPrefUniVar	basicType	unannType	false
symPrefUniVar	dim	unannType	false
symPrefUniVar	unannClassType	unannType	false
symPrefUniVar	dim	unannType	false
symPrefUniVar	annotation	fieldModifier	false
__public	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__protected	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__private	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__static	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__final	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
__transient	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
true33	transient
__volatile	 pref := 	), ;, __Identifier, final, private, protected, public, static, transient, volatile, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, private, protected, public, short, static, transient, volatile
true33	volatile
symPrefUniVar	methodModifier	methodDeclaration	true
passou um
symPrefUniVar	methodHeader	methodDeclaration	false
symPrefUniVar	methodBody	methodDeclaration	false
symPrefUniVar	result	methodHeader	false
symPrefUniVar	methodDeclarator	methodHeader	false
symPrefUniVar	throws	methodHeader	false
symPrefUniVar	typeParameters	methodHeader	false
symPrefUniVar	annotation	methodHeader	false
symPrefUniVar	result	methodHeader	true
passou um
symPrefUniVar	methodDeclarator	methodHeader	true
passou um
symPrefUniVar	throws	methodHeader	false
Identifier	 pref := 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short, void	 flw := 	(
__(	 pref := 	__Identifier	 flw := 	), @, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	formalParameterList	methodDeclarator	false
__)	 pref := 	(, ], __Identifier, this	 flw := 	;, @, [, throws, {
symPrefUniVar	dim	methodDeclarator	false
symPrefUniVar	receiverParameter	formalParameterList	true
passou um
symPrefUniVar	formalParameter	formalParameterList	true
passou um
__,	 pref := 	], __Identifier, this	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	formalParameter	formalParameterList	true
passou um
symPrefUniVar	variableModifier	formalParameter	false
symPrefUniVar	unannType	formalParameter	false
symPrefUniVar	variableDeclaratorId	formalParameter	false
symPrefUniVar	variableModifier	formalParameter	false
symPrefUniVar	unannType	formalParameter	false
symPrefUniVar	annotation	formalParameter	false
__...	 pref := 	), >, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	__Identifier
true33	...
foi true22	...	variableDeclaratorId	true
symPrefUniVar	variableDeclaratorId	formalParameter	true
passou um
passou três	variableDeclaratorId	formalParameter
UniqueFlwVar	variableDeclaratorId	rule = 	formalParameter	pref = 	...	flw = 	), ,	rep = 	nil
symPrefUniVar	annotation	variableModifier	false
__final	 pref := 	(, ), ,, :, ;, __Identifier, final, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	variableModifier	receiverParameter	false
symPrefUniVar	unannType	receiverParameter	false
Identifier	 pref := 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	.
__.	 pref := 	__Identifier	 flw := 	this
__this	 pref := 	., >, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	), ,
symPrefUniVar	unannType	result	false
__void	 pref := 	), ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }	 flw := 	__Identifier
UniqueFlw	__void	rule = 	result	pref = 	), ;, >, __Identifier, abstract, default, final, native, private, protected, public, static, stictfp, strictfp, synchronized, {, }	flw = 	__Identifier	nInt = 	1	nEq = 	0	pflw = 	nil
symPrefUniVar	annotation	methodModifier	false
__public	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__protected	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__private	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__abstract	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__static	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__final	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
__synchronized	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
UniqueFlw	__synchronized	rule = 	methodModifier	pref = 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	flw = 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void	nInt = 	1	nEq = 	0	pflw = 	nil
__native	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
true33	native
__stictfp	 pref := 	), ;, __Identifier, abstract, final, native, private, protected, public, static, stictfp, synchronized, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, double, final, float, int, long, native, private, protected, public, short, static, stictfp, synchronized, void
true33	stictfp
__throws	 pref := 	), ]	 flw := 	@, __Identifier
true33	throws
foi true22	throws	exceptionTypeList	true
symPrefUniVar	exceptionTypeList	throws	true
passou um
passou três	exceptionTypeList	throws
symPrefUniVar	exceptionType	exceptionTypeList	true
passou um
passou três	exceptionType	exceptionTypeList
__,	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	exceptionType	exceptionTypeList	true
passou um
symPrefUniVar	classType	exceptionType	false
symPrefUniVar	typeVariable	exceptionType	true
passou um
symPrefUniVar	block	methodBody	false
__;	 pref := 	), >, ], __Identifier	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	block	instanceInitializer	false
__static	 pref := 	;, {, }	 flw := 	{
symPrefUniVar	block	staticInitializer	true
passou um
passou três	block	staticInitializer
symPrefUniVar	constructorModifier	constructorDeclaration	true
passou um
symPrefUniVar	constructorDeclarator	constructorDeclaration	true
passou um
symPrefUniVar	throws	constructorDeclaration	false
symPrefUniVar	constructorBody	constructorDeclaration	true
passou um
symPrefUniVar	typeParameters	constructorDeclarator	false
Identifier	 pref := 	), ;, >, __Identifier, private, protected, public, {, }	 flw := 	(
__(	 pref := 	__Identifier	 flw := 	), @, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	formalParameterList	constructorDeclarator	false
__)	 pref := 	(, ], __Identifier, this	 flw := 	throws, {
symPrefUniVar	annotation	constructorModifier	false
__public	 pref := 	), ;, __Identifier, private, protected, public, {, }	 flw := 	<, @, __Identifier, private, protected, public
__protected	 pref := 	), ;, __Identifier, private, protected, public, {, }	 flw := 	<, @, __Identifier, private, protected, public
__private	 pref := 	), ;, __Identifier, private, protected, public, {, }	 flw := 	<, @, __Identifier, private, protected, public
__{	 pref := 	), >, __Identifier	 flw := 	(, ++, --, ;, <, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	explicitConstructorInvocation	constructorBody	true
passou um
symPrefUniVar	blockStatements	constructorBody	false
__}	 pref := 	;, {, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	typeArguments	explicitConstructorInvocation	false
__this	 pref := 	>, {	 flw := 	(
symPrefUniVar	arguments	explicitConstructorInvocation	true
passou um
passou três	arguments	explicitConstructorInvocation
UniqueFlwVar	arguments	rule = 	explicitConstructorInvocation	pref = 	this	flw = 	;	rep = 	nil
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	typeArguments	explicitConstructorInvocation	true
passou um
__super	 pref := 	>, {	 flw := 	(
symPrefUniVar	arguments	explicitConstructorInvocation	false
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	primary	explicitConstructorInvocation	false
__.	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	<, super
symPrefUniVar	typeArguments	explicitConstructorInvocation	false
__super	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	explicitConstructorInvocation	false
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	qualIdent	explicitConstructorInvocation	false
__.	 pref := 	__Identifier	 flw := 	<, super
symPrefUniVar	typeArguments	explicitConstructorInvocation	false
__super	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	explicitConstructorInvocation	true
passou um
passou três	arguments	explicitConstructorInvocation
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	classModifier	enumDeclaration	false
__enum	 pref := 	), :, ;, __Identifier, __SKIP, abstract, final, private, protected, public, static, strictfp, {, }	 flw := 	__Identifier
true33	enum
foi true22	enum	Identifier	true
Identifier	 pref := 	enum	 flw := 	implements, {
true33	Identifier
foi true22	Identifier	table: 0x55f3dd4dabd0	true
symPrefUniVar	superinterfaces	enumDeclaration	false
symPrefUniVar	enumBody	enumDeclaration	true
passou um
__{	 pref := 	>, __Identifier	 flw := 	,, ;, @, __Identifier, }
symPrefUniVar	enumConstantList	enumBody	true
passou um
__,	 pref := 	), __Identifier, {, }	 flw := 	;, }
symPrefUniVar	enumBodyDeclarations	enumBody	true
passou um
__}	 pref := 	), ,, ;, __Identifier, {, }	 flw := 	$, (, ++, --, ;, <, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, int, interface, long, native, new, private, protected, public, return, short, static, stictfp, strictfp, super, switch, synchronized, this, throw, transient, try, void, volatile, while, {, }
symPrefUniVar	enumConstant	enumConstantList	true
passou um
__,	 pref := 	), __Identifier, }	 flw := 	@, __Identifier
symPrefUniVar	enumConstant	enumConstantList	true
passou um
symPrefUniVar	enumConstantModifier	enumConstant	true
passou um
Identifier	 pref := 	), ,, __Identifier, {	 flw := 	(, ,, ;, {, }
symPrefUniVar	arguments	enumConstant	false
symPrefUniVar	classBody	enumConstant	false
symPrefUniVar	annotation	enumConstantModifier	false
__;	 pref := 	), ,, __Identifier, {, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	classBodyDeclaration	enumBodyDeclarations	false
symPrefUniVar	normalInterfaceDeclaration	interfaceDeclaration	true
passou um
symPrefUniVar	annotationTypeDeclaration	interfaceDeclaration	true
passou um
symPrefUniVar	interfaceModifier	normalInterfaceDeclaration	false
__interface	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	__Identifier
true33	interface
foi true22	interface	Identifier	true
Identifier	 pref := 	interface	 flw := 	<, extends, {
symPrefUniVar	typeParameters	normalInterfaceDeclaration	false
symPrefUniVar	extendsInterfaces	normalInterfaceDeclaration	true
passou um
symPrefUniVar	interfaceBody	normalInterfaceDeclaration	true
passou um
symPrefUniVar	annotation	interfaceModifier	false
__public	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__protected	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__private	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__abstract	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__static	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__strictfp	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	@, abstract, interface, private, protected, public, static, strictfp
__extends	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	interfaceTypeList	extendsInterfaces	true
passou um
__{	 pref := 	>, __Identifier	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, void, }
symPrefUniVar	interfaceMemberDeclaration	interfaceBody	true
passou um
__}	 pref := 	;, {, }	 flw := 	$, ;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	constantDeclaration	interfaceMemberDeclaration	false
symPrefUniVar	interfaceMethodDeclaration	interfaceMemberDeclaration	true
passou um
symPrefUniVar	classDeclaration	interfaceMemberDeclaration	false
symPrefUniVar	interfaceDeclaration	interfaceMemberDeclaration	false
__;	 pref := 	;, {, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, void, }
symPrefUniVar	constantModifier	constantDeclaration	true
passou um
symPrefUniVar	unannType	constantDeclaration	false
symPrefUniVar	variableDeclaratorList	constantDeclaration	false
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, void, }
symPrefUniVar	annotation	constantModifier	false
__public	 pref := 	), ;, __Identifier, final, public, static, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, public, short, static
__static	 pref := 	), ;, __Identifier, final, public, static, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, public, short, static
__final	 pref := 	), ;, __Identifier, final, public, static, {, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, public, short, static
symPrefUniVar	interfaceMethodModifier	interfaceMethodDeclaration	true
passou um
symPrefUniVar	methodHeader	interfaceMethodDeclaration	false
symPrefUniVar	methodBody	interfaceMethodDeclaration	false
symPrefUniVar	annotation	interfaceMethodModifier	false
__public	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
__abstract	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
__default	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
__static	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
__strictfp	 pref := 	), ;, __Identifier, abstract, default, public, static, strictfp, {, }	 flw := 	<, @, __Identifier, abstract, boolean, byte, char, default, double, float, int, long, public, short, static, strictfp, void
symPrefUniVar	interfaceModifier	annotationTypeDeclaration	false
__@	 pref := 	), ;, __Identifier, __SKIP, abstract, private, protected, public, static, strictfp, {, }	 flw := 	interface
__interface	 pref := 	@	 flw := 	__Identifier
true33	interface
foi true22	interface	Identifier	true
Identifier	 pref := 	interface	 flw := 	{
symPrefUniVar	annotationTypeBody	annotationTypeDeclaration	true
passou um
__{	 pref := 	__Identifier	 flw := 	;, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, }
symPrefUniVar	annotationTypeMemberDeclaration	annotationTypeBody	true
passou um
__}	 pref := 	;, {, }	 flw := 	$, ;, <, @, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, {, }
symPrefUniVar	annotationTypeElementDeclaration	annotationTypeMemberDeclaration	true
passou um
symPrefUniVar	constantDeclaration	annotationTypeMemberDeclaration	false
symPrefUniVar	classDeclaration	annotationTypeMemberDeclaration	false
symPrefUniVar	interfaceDeclaration	annotationTypeMemberDeclaration	false
__;	 pref := 	;, {, }	 flw := 	;, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, }
symPrefUniVar	annotationTypeElementModifier	annotationTypeElementDeclaration	true
passou um
symPrefUniVar	unannType	annotationTypeElementDeclaration	false
Identifier	 pref := 	>, ], __Identifier, boolean, byte, char, double, float, int, long, short	 flw := 	(
__(	 pref := 	__Identifier	 flw := 	)
__)	 pref := 	(	 flw := 	;, @, [, default
symPrefUniVar	dim	annotationTypeElementDeclaration	false
symPrefUniVar	defaultValue	annotationTypeElementDeclaration	true
passou um
UniqueFlwVar	defaultValue	rule = 	annotationTypeElementDeclaration	pref = 	), ]	flw = 	;	rep = 	true
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	;, @, __Identifier, abstract, boolean, byte, char, class, double, enum, final, float, int, interface, long, private, protected, public, short, static, strictfp, }
symPrefUniVar	annotation	annotationTypeElementModifier	false
__public	 pref := 	), ;, __Identifier, abstract, public, {, }	 flw := 	@, __Identifier, abstract, boolean, byte, char, double, float, int, long, public, short
__abstract	 pref := 	), ;, __Identifier, abstract, public, {, }	 flw := 	@, __Identifier, abstract, boolean, byte, char, double, float, int, long, public, short
__default	 pref := 	), ]	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	elementValue	defaultValue	true
passou um
__@	 pref := 	!, (, ), +, ++, ,, -, --, ->, ., :, ;, <, =, >, [, ], __AssignmentOperator, __Identifier, __InfixOperator, __SKIP, abstract, and, assert, boolean, byte, case, char, default, do, double, else, extends, final, float, implements, instanceof, int, long, native, new, private, protected, public, query, return, short, static, stictfp, strictfp, super, synchronized, throw, throws, transient, volatile, {, |, }, ~	 flw := 	__Identifier
Subset	__@	rule = 	annotation	total = 	2
symPrefUniVar	normalAnnotation	annotation	true
passou um
passou três	normalAnnotation	annotation
symPrefUniVar	singleElementAnnotation	annotation	true
passou um
passou três	singleElementAnnotation	annotation
symPrefUniVar	markerAnnotation	annotation	true
passou um
passou três	markerAnnotation	annotation
symPrefUniVar	qualIdent	normalAnnotation	false
__(	 pref := 	__Identifier	 flw := 	), __Identifier
symPrefUniVar	elementValuePairList	normalAnnotation	true
passou um
__)	 pref := 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, ..., ;, <, ?, @, [, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, package, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, }
symPrefUniVar	elementValuePair	elementValuePairList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	__Identifier
symPrefUniVar	elementValuePair	elementValuePairList	true
passou um
Identifier	 pref := 	(, ), ++, ,, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	=
__=	 pref := 	__Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	elementValue	elementValuePair	true
passou um
symPrefUniVar	conditionalExpression	elementValue	false
symPrefUniVar	elementValueArrayInitializer	elementValue	true
passou um
symPrefUniVar	annotation	elementValue	false
__{	 pref := 	(, ,, =, default, {	 flw := 	!, (, +, ++, ,, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, }, ~
symPrefUniVar	elementValueList	elementValueArrayInitializer	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, {, }	 flw := 	}
__}	 pref := 	), ++, ,, --, >, ], __Identifier, __Literal, class, new, this, {, }	 flw := 	), ,, ;, __Identifier, }
symPrefUniVar	elementValue	elementValueList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	elementValue	elementValueList	true
passou um
symPrefUniVar	qualIdent	markerAnnotation	false
symPrefUniVar	qualIdent	singleElementAnnotation	false
__(	 pref := 	__Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	elementValue	singleElementAnnotation	true
passou um
__)	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, ..., ;, <, ?, @, [, __Identifier, abstract, boolean, byte, char, class, default, double, enum, final, float, int, interface, long, native, package, private, protected, public, short, static, stictfp, strictfp, synchronized, transient, void, volatile, }
__{	 pref := 	,, =, ], {	 flw := 	!, (, +, ++, ,, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, }, ~
symPrefUniVar	variableInitializerList	arrayInitializer	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, {, }	 flw := 	}
__}	 pref := 	), ++, ,, --, >, ], __Identifier, __Literal, class, new, this, {, }	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
symPrefUniVar	variableInitializer	variableInitializerList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
symPrefUniVar	variableInitializer	variableInitializerList	true
passou um
__{	 pref := 	), ->, :, ;, >, ], __Identifier, do, else, finally, static, try, {, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, char, class, continue, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	blockStatements	block	false
__}	 pref := 	;, {, }	 flw := 	(, ), ++, ,, --, :, ;, <, @, ], __Identifier, __InfixOperator, __Literal, abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, final, finally, float, for, if, instanceof, int, interface, long, native, new, private, protected, public, query, return, short, static, stictfp, strictfp, super, switch, synchronized, this, throw, transient, try, void, volatile, while, {, }
symPrefUniVar	blockStatement	blockStatements	false
symPrefUniVar	blockStatement	blockStatements	true
passou um
symPrefUniVar	localVariableDeclarationStatement	blockStatement	true
passou um
symPrefUniVar	classDeclaration	blockStatement	false
symPrefUniVar	statement	blockStatement	false
symPrefUniVar	localVariableDeclaration	localVariableDeclarationStatement	true
passou um
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	variableModifier	localVariableDeclaration	false
symPrefUniVar	unannType	localVariableDeclaration	false
symPrefUniVar	variableDeclaratorList	localVariableDeclaration	false
symPrefUniVar	block	statement	false
__if	 pref := 	), :, ;, do, else, {, }	 flw := 	(
true33	if
foi true22	if	parExpression	true
symPrefUniVar	parExpression	statement	true
passou um
passou três	parExpression	statement
UniqueFlwVar	parExpression	rule = 	statement	pref = 	if	flw = 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {	rep = 	nil
symPrefUniVar	statement	statement	false
__else	 pref := 	;, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
true33	else
symPrefUniVar	statement	statement	true
passou um
passou três	statement	statement
symPrefUniVar	basicForStatement	statement	true
passou um
symPrefUniVar	enhancedForStatement	statement	true
passou um
__while	 pref := 	), :, ;, do, else, {, }	 flw := 	(
Subset	__while	rule = 	statement	total = 	2
symPrefUniVar	parExpression	statement	false
symPrefUniVar	statement	statement	false
__do	 pref := 	), :, ;, do, else, {, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
true33	do
foi true22	do	statement	true
symPrefUniVar	statement	statement	true
passou um
passou três	statement	statement
__while	 pref := 	;, }	 flw := 	(
true33	while
symPrefUniVar	parExpression	statement	true
passou um
passou três	parExpression	statement
__;	 pref := 	)	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	tryStatement	statement	true
passou um
passou três	tryStatement	statement
__switch	 pref := 	), :, ;, do, else, {, }	 flw := 	(
true33	switch
foi true22	switch	parExpression	true
symPrefUniVar	parExpression	statement	true
passou um
passou três	parExpression	statement
UniqueFlwVar	parExpression	rule = 	statement	pref = 	switch	flw = 	{	rep = 	nil
symPrefUniVar	switchBlock	statement	true
passou um
__synchronized	 pref := 	), :, ;, do, else, {, }	 flw := 	(
symPrefUniVar	parExpression	statement	true
passou um
passou três	parExpression	statement
UniqueFlwVar	parExpression	rule = 	statement	pref = 	synchronized	flw = 	{	rep = 	nil
symPrefUniVar	block	statement	false
__return	 pref := 	), :, ;, do, else, {, }	 flw := 	!, (, +, ++, -, --, ;, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	return
foi true22	return	table: 0x55f3dd51f180	true
symPrefUniVar	expression	statement	true
passou um
passou três	expression	statement
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, return, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__throw	 pref := 	), :, ;, do, else, {, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	throw
foi true22	throw	expression	true
symPrefUniVar	expression	statement	true
passou um
passou três	expression	statement
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__break	 pref := 	), :, ;, do, else, {, }	 flw := 	;, __Identifier
true33	break
foi true22	break	table: 0x55f3dd51fd10	true
Identifier	 pref := 	break	 flw := 	;
true33	Identifier
__;	 pref := 	__Identifier, break	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__continue	 pref := 	), :, ;, do, else, {, }	 flw := 	;, __Identifier
true33	continue
foi true22	continue	table: 0x55f3dd4bcbb0	true
Identifier	 pref := 	continue	 flw := 	;
true33	Identifier
__;	 pref := 	__Identifier, continue	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__assert	 pref := 	), :, ;, do, else, {, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	assert
foi true22	assert	expression	true
symPrefUniVar	expression	statement	true
passou um
passou três	expression	statement
__:	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	statement	false
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__;	 pref := 	), :, ;, do, else, {, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	statementExpression	statement	false
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
Identifier	 pref := 	), :, ;, do, else, {, }	 flw := 	:
__:	 pref := 	__Identifier	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
symPrefUniVar	statement	statement	false
symPrefUniVar	assignment	statementExpression	false
__++	 pref := 	(, ), ,, :, ;, do, else, {, }	 flw := 	(, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
__--	 pref := 	(, ), ,, :, ;, do, else, {, }	 flw := 	(, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
symPrefUniVar	primary	statementExpression	false
symPrefUniVar	qualIdent	statementExpression	false
symPrefUniVar	primary	statementExpression	false
symPrefUniVar	qualIdent	statementExpression	false
__++	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, ;
__--	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, ;
symPrefUniVar	primary	statementExpression	false
__{	 pref := 	)	 flw := 	case, default, }
symPrefUniVar	switchBlockStatementGroup	switchBlock	true
passou um
symPrefUniVar	switchLabel	switchBlock	false
__}	 pref := 	:, ;, {, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, else, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	switchLabels	switchBlockStatementGroup	true
passou um
symPrefUniVar	blockStatements	switchBlockStatementGroup	true
passou um
symPrefUniVar	switchLabel	switchLabels	false
symPrefUniVar	switchLabel	switchLabels	false
__case	 pref := 	:, ;, {, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	case
foi true22	case	table: 0x55f3dd528bd0	true
symPrefUniVar	constantExpression	switchLabel	true
passou um
symPrefUniVar	enumConstantName	switchLabel	true
passou um
__:	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
__default	 pref := 	:, ;, {, }	 flw := 	:
__:	 pref := 	default	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, char, class, continue, default, do, double, enum, final, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }
true33	:
Identifier	 pref := 	case	 flw := 	:
__for	 pref := 	), :, ;, do, else, {, }	 flw := 	(
Subset	__for	rule = 	basicForStatement	total = 	2
__(	 pref := 	for	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, boolean, byte, char, double, final, float, int, long, new, short, super, this, void
symPrefUniVar	forInit	basicForStatement	true
passou um
__;	 pref := 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, ;, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	basicForStatement	true
passou um
__;	 pref := 	), ++, --, ;, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ), ++, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
symPrefUniVar	forUpdate	basicForStatement	true
passou um
__)	 pref := 	), ++, --, ;, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
symPrefUniVar	statement	basicForStatement	false
symPrefUniVar	localVariableDeclaration	forInit	true
passou um
symPrefUniVar	statementExpressionList	forInit	true
passou um
symPrefUniVar	statementExpressionList	forUpdate	true
passou um
symPrefUniVar	statementExpression	statementExpressionList	false
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
symPrefUniVar	statementExpression	statementExpressionList	true
passou um
__for	 pref := 	), :, ;, do, else, {, }	 flw := 	(
Subset	__for	rule = 	enhancedForStatement	total = 	2
__(	 pref := 	for	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	variableModifier	enhancedForStatement	false
symPrefUniVar	unannType	enhancedForStatement	false
symPrefUniVar	variableDeclaratorId	enhancedForStatement	false
__:	 pref := 	], __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	enhancedForStatement	false
__)	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ++, --, ;, @, __Identifier, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, int, long, new, return, short, super, switch, synchronized, this, throw, try, void, while, {
symPrefUniVar	statement	enhancedForStatement	false
__try	 pref := 	), :, ;, do, else, {, }	 flw := 	(, {
true33	try
foi true22	try	table: 0x55f3dd52e4a0	true
symPrefUniVar	block	tryStatement	true
passou um
passou três	block	tryStatement
UniqueFlwVar	block	rule = 	tryStatement	pref = 	try	flw = 	(, ++, --, ;, @, __Identifier, __Literal, abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, final, finally, float, for, if, int, long, new, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, try, void, while, {, }	rep = 	nil
symPrefUniVar	catchClause	tryStatement	false
symPrefUniVar	finally	tryStatement	false
symPrefUniVar	catchClause	tryStatement	false
symPrefUniVar	resourceSpecification	tryStatement	true
passou um
passou três	resourceSpecification	tryStatement
UniqueFlwVar	resourceSpecification	rule = 	tryStatement	pref = 	try	flw = 	{	rep = 	nil
symPrefUniVar	block	tryStatement	false
symPrefUniVar	catchClause	tryStatement	true
passou um
passou três	catchClause	tryStatement
symPrefUniVar	finally	tryStatement	true
passou um
passou três	finally	tryStatement
__catch	 pref := 	}	 flw := 	(
true33	catch
foi true22	catch	(	true
__(	 pref := 	catch	 flw := 	@, __Identifier, final
true33	(
foi true22	(	catchFormalParameter	true
symPrefUniVar	catchFormalParameter	catchClause	true
passou um
__)	 pref := 	], __Identifier	 flw := 	{
symPrefUniVar	block	catchClause	false
symPrefUniVar	variableModifier	catchFormalParameter	false
symPrefUniVar	catchType	catchFormalParameter	true
passou um
symPrefUniVar	variableDeclaratorId	catchFormalParameter	false
symPrefUniVar	unannClassType	catchType	false
__|	 pref := 	>, __Identifier	 flw := 	@, __Identifier
true33	|
symPrefUniVar	classType	catchType	true
passou um
passou três	classType	catchType
__finally	 pref := 	}	 flw := 	{
true33	finally
foi true22	finally	block	true
symPrefUniVar	block	finally	true
passou um
passou três	block	finally
__(	 pref := 	try	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
true33	(
foi true22	(	resourceList	true
symPrefUniVar	resourceList	resourceSpecification	true
passou um
__;	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	)
__)	 pref := 	), ++, --, ;, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	{
symPrefUniVar	resource	resourceList	true
passou um
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	@, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	resource	resourceList	true
passou um
symPrefUniVar	variableModifier	resource	false
symPrefUniVar	unannType	resource	false
symPrefUniVar	variableDeclaratorId	resource	false
__=	 pref := 	], __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
Subset	__=	rule = 	resource	total = 	3
symPrefUniVar	expression	resource	false
symPrefUniVar	lambdaExpression	expression	true
passou um
symPrefUniVar	assignmentExpression	expression	true
passou um
symPrefUniVar	primaryBase	primary	true
passou um
symPrefUniVar	primaryRest	primary	true
passou um
__this	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
UniqueFlw	__this	rule = 	primaryBase	pref = 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	flw = 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }	nInt = 	1	nEq = 	0	pflw = 	nil
Literal	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
true33	Literal
symPrefUniVar	parExpression	primaryBase	true
passou um
__super	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	., ::
__.	 pref := 	super	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	primaryBase	false
__.	 pref := 	super	 flw := 	__Identifier
Identifier	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__::	 pref := 	super	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	::, >	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__new	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	<, @, __Identifier, boolean, byte, char, double, float, int, long, short
true33	new
foi true22	new	table: 0x55f3dd535940	true
symPrefUniVar	classCreator	primaryBase	false
symPrefUniVar	arrayCreator	primaryBase	true
passou um
symPrefUniVar	qualIdent	primaryBase	false
__[	 pref := 	__Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	primaryBase	false
__]	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
symPrefUniVar	arguments	primaryBase	false
__.	 pref := 	__Identifier	 flw := 	<, new, super, this
__this	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__new	 pref := 	.	 flw := 	<, @, __Identifier
symPrefUniVar	classCreator	primaryBase	false
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	>	 flw := 	(
symPrefUniVar	arguments	primaryBase	false
__super	 pref := 	.	 flw := 	.
__.	 pref := 	super	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	primaryBase	false
__super	 pref := 	.	 flw := 	.
__.	 pref := 	super	 flw := 	__Identifier
true33	.
Identifier	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__super	 pref := 	.	 flw := 	::
__::	 pref := 	super	 flw := 	<, __Identifier
true33	::
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	::, >	 flw := 	(
symPrefUniVar	arguments	primaryBase	false
__[	 pref := 	], __Identifier	 flw := 	]
__]	 pref := 	[	 flw := 	., [
__.	 pref := 	], __Identifier	 flw := 	class
__class	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__::	 pref := 	__Identifier	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryBase	false
Identifier	 pref := 	::, >	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__void	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, query, return, throw, {, }, ~	 flw := 	.
__.	 pref := 	void	 flw := 	class
true33	.
foi true22	.	class	true
__class	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
symPrefUniVar	basicType	primaryBase	false
__[	 pref := 	], boolean, byte, char, double, float, int, long, short	 flw := 	]
__]	 pref := 	[	 flw := 	., [
__.	 pref := 	], boolean, byte, char, double, float, int, long, short	 flw := 	class
__class	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
true33	class
symPrefUniVar	referenceType	primaryBase	false
__::	 pref := 	>, ], __Identifier	 flw := 	<, new
symPrefUniVar	typeArguments	primaryBase	false
UniqueFlwVar	typeArguments	rule = 	primaryBase	pref = 	::	flw = 	new	rep = 	true
__new	 pref := 	::, >	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
symPrefUniVar	arrayType	primaryBase	true
passou um
__::	 pref := 	]	 flw := 	new
__new	 pref := 	::	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
true33	new
__.	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	<, __Identifier, new
symPrefUniVar	typeArguments	primaryRest	false
Identifier	 pref := 	., >	 flw := 	(
symPrefUniVar	arguments	primaryRest	false
Identifier	 pref := 	.	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__new	 pref := 	.	 flw := 	<, @, __Identifier
symPrefUniVar	classCreator	primaryRest	false
__[	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	primaryRest	false
__]	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__::	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	<, __Identifier
symPrefUniVar	typeArguments	primaryRest	false
Identifier	 pref := 	::, >	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__(	 pref := 	!, (, ), +, ++, ,, -, --, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, do, else, if, query, return, switch, synchronized, throw, while, {, }, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	parExpression	false
__)	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	(, ), ++, ,, --, ., :, ::, ;, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, __Literal, assert, boolean, break, byte, char, continue, do, double, float, for, if, instanceof, int, long, new, query, return, short, super, switch, synchronized, this, throw, try, void, while, {, }
symPrefUniVar	typeArguments	classCreator	true
passou um
passou três	typeArguments	classCreator
symPrefUniVar	annotation	classCreator	false
symPrefUniVar	classTypeWithDiamond	classCreator	true
passou um
symPrefUniVar	arguments	classCreator	false
symPrefUniVar	classBody	classCreator	false
symPrefUniVar	annotation	classTypeWithDiamond	false
Identifier	 pref := 	), >, __Identifier, new	 flw := 	(, ., <
symPrefUniVar	typeArgumentsOrDiamond	classTypeWithDiamond	false
__.	 pref := 	>, __Identifier	 flw := 	@, __Identifier
symPrefUniVar	annotation	classTypeWithDiamond	false
Identifier	 pref := 	), ., __Identifier	 flw := 	(, ., <
symPrefUniVar	typeArgumentsOrDiamond	classTypeWithDiamond	true
passou um
symPrefUniVar	typeArguments	typeArgumentsOrDiamond	false
__<	 pref := 	__Identifier	 flw := 	>
__>	 pref := 	<	 flw := 	(, .
true33	>
foi true22	>	table: 0x55f3dd541540	true
symPrefUniVar	type	arrayCreator	false
symPrefUniVar	dimExpr	arrayCreator	true
passou um
symPrefUniVar	dim	arrayCreator	false
symPrefUniVar	type	arrayCreator	true
passou um
symPrefUniVar	dim	arrayCreator	false
symPrefUniVar	arrayInitializer	arrayCreator	true
passou um
symPrefUniVar	annotation	dimExpr	false
__[	 pref := 	), ], __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	dimExpr	false
__]	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ++, ,, --, ., :, ::, ;, @, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, }
__(	 pref := 	>, __Identifier, super, this	 flw := 	!, (, ), +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	argumentList	arguments	true
passou um
__)	 pref := 	(, ), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	), ++, ,, --, ., :, ::, ;, [, ], __AssignmentOperator, __Identifier, __InfixOperator, instanceof, query, {, }
symPrefUniVar	expression	argumentList	false
__,	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	argumentList	false
__++	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	(, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
__--	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	(, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void
symPrefUniVar	primary	unaryExpression	false
symPrefUniVar	qualIdent	unaryExpression	false
__+	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	+
foi true22	+	table: 0x55f3dd546690	true
symPrefUniVar	unaryExpression	unaryExpression	true
passou um
passou três	unaryExpression	unaryExpression
__-	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	-
foi true22	-	table: 0x55f3dd546d70	true
symPrefUniVar	unaryExpression	unaryExpression	true
passou um
passou três	unaryExpression	unaryExpression
symPrefUniVar	unaryExpressionNotPlusMinus	unaryExpression	false
__~	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	~
foi true22	~	unaryExpression	true
symPrefUniVar	unaryExpression	unaryExpressionNotPlusMinus	true
passou um
passou três	unaryExpression	unaryExpressionNotPlusMinus
__!	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	!
foi true22	!	table: 0x55f3dd547cb0	true
symPrefUniVar	unaryExpression	unaryExpressionNotPlusMinus	true
passou um
passou três	unaryExpression	unaryExpressionNotPlusMinus
symPrefUniVar	castExpression	unaryExpressionNotPlusMinus	true
passou um
symPrefUniVar	primary	unaryExpressionNotPlusMinus	false
symPrefUniVar	qualIdent	unaryExpressionNotPlusMinus	false
__++	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, :, ;, ], __Identifier, __InfixOperator, instanceof, query, }
__--	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	), ,, :, ;, ], __Identifier, __InfixOperator, instanceof, query, }
__(	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	@, boolean, byte, char, double, float, int, long, short
symPrefUniVar	primitiveType	castExpression	false
__)	 pref := 	boolean, byte, char, double, float, int, long, short	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	)
foi true22	)	unaryExpression	true
symPrefUniVar	unaryExpression	castExpression	true
passou um
__(	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
symPrefUniVar	referenceType	castExpression	false
symPrefUniVar	additionalBound	castExpression	false
__)	 pref := 	>, ], __Identifier	 flw := 	(, __Identifier
symPrefUniVar	lambdaExpression	castExpression	true
passou um
__(	 pref := 	!, (, ), +, ,, -, ->, :, ;, =, [, __AssignmentOperator, __InfixOperator, assert, case, default, query, return, throw, {, ~	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
symPrefUniVar	referenceType	castExpression	false
symPrefUniVar	additionalBound	castExpression	false
__)	 pref := 	>, ], __Identifier	 flw := 	!, (, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	unaryExpressionNotPlusMinus	castExpression	false
symPrefUniVar	unaryExpression	infixExpression	true
passou um
InfixOperator	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	InfixOperator
symPrefUniVar	unaryExpression	infixExpression	true
passou um
passou três	unaryExpression	infixExpression
__instanceof	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	@, __Identifier, boolean, byte, char, double, float, int, long, short
true33	instanceof
symPrefUniVar	referenceType	infixExpression	true
passou um
passou três	referenceType	infixExpression
symPrefUniVar	infixExpression	conditionalExpression	true
passou um
__query	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	query
symPrefUniVar	expression	conditionalExpression	true
passou um
passou três	expression	conditionalExpression
__:	 pref := 	), ++, --, >, ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
symPrefUniVar	expression	conditionalExpression	false
symPrefUniVar	assignment	assignmentExpression	false
symPrefUniVar	conditionalExpression	assignmentExpression	false
symPrefUniVar	leftHandSide	assignment	true
passou um
AssignmentOperator	 pref := 	), ], __Identifier, __Literal, class, new, this, }	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, ~
true33	AssignmentOperator
foi true22	AssignmentOperator	expression	true
symPrefUniVar	expression	assignment	true
passou um
passou três	expression	assignment
symPrefUniVar	primary	leftHandSide	false
symPrefUniVar	qualIdent	leftHandSide	false
symPrefUniVar	lambdaParameters	lambdaExpression	true
passou um
UniqueFlwVar	lambdaParameters	rule = 	lambdaExpression	pref = 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	flw = 	->	rep = 	nil
__->	 pref := 	), __Identifier	 flw := 	!, (, +, ++, -, --, @, __Identifier, __Literal, boolean, byte, char, double, float, int, long, new, short, super, this, void, {, ~
true33	->
foi true22	->	lambdaBody	true
symPrefUniVar	lambdaBody	lambdaExpression	true
passou um
passou três	lambdaBody	lambdaExpression
Identifier	 pref := 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	 flw := 	->
UniqueFlw	Identifier	rule = 	lambdaParameters	pref = 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	flw = 	->	nInt = 	17	nEq = 	3	pflw = 	nil
__(	 pref := 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	 flw := 	), @, __Identifier, boolean, byte, char, double, final, float, int, long, short
symPrefUniVar	formalParameterList	lambdaParameters	false
__)	 pref := 	(, ], __Identifier, this	 flw := 	->
__(	 pref := 	(, ), ,, ->, :, ;, =, [, __AssignmentOperator, assert, case, query, return, throw, {	 flw := 	__Identifier
symPrefUniVar	inferredFormalParameterList	lambdaParameters	true
passou um
__)	 pref := 	__Identifier	 flw := 	->
Identifier	 pref := 	(	 flw := 	), ,
__,	 pref := 	__Identifier	 flw := 	__Identifier
Identifier	 pref := 	,	 flw := 	), ,
symPrefUniVar	expression	lambdaBody	true
passou um
passou três	expression	lambdaBody
symPrefUniVar	block	lambdaBody	true
passou um
passou três	block	lambdaBody
symPrefUniVar	expression	constantExpression	true
passou um
unique var 	compilationUnit
Unique usage	compilationUnit
unique var 	classType
unique var2 	wildcard
unique var 	wildcardBounds
Unique usage	wildcardBounds
unique var 	referenceType
unique var 	referenceType
unique var2 	packageDeclaration
unique var 	typeDeclaration
Unique usage	typeDeclaration
unique var 	qualIdent
unique var 	interfaceDeclaration
unique var2 	normalClassDeclaration
unique var2 	enumDeclaration
unique var 	typeParameters
unique var 	superclass
Unique usage	superclass
unique var 	superinterfaces
Unique usage	superinterfaces
unique var 	classBody
unique var 	classType
unique var 	interfaceTypeList
Unique usage	interfaceTypeList
unique var 	classType
unique var 	classType
unique var2 	staticInitializer
unique var 	variableDeclaratorId
unique var 	exceptionTypeList
Unique usage	exceptionTypeList
unique var 	exceptionType
Unique usage	exceptionType
unique var 	exceptionType
Unique usage	exceptionType
unique var 	typeVariable
unique var 	superinterfaces
Unique usage	superinterfaces
unique var 	enumBody
Unique usage	enumBody
unique var 	enumConstantList
Unique usage	enumConstantList
unique var 	enumBodyDeclarations
Unique usage	enumBodyDeclarations
unique var 	enumConstant
unique var 	classBodyDeclaration
unique var2 	normalInterfaceDeclaration
unique var2 	annotationTypeDeclaration
unique var 	typeParameters
unique var 	extendsInterfaces
Unique usage	extendsInterfaces
unique var 	interfaceBody
Unique usage	interfaceBody
unique var 	interfaceTypeList
Unique usage	interfaceTypeList
unique var 	interfaceMemberDeclaration
Unique usage	interfaceMemberDeclaration
unique var 	interfaceDeclaration
unique var 	annotationTypeBody
Unique usage	annotationTypeBody
unique var 	annotationTypeMemberDeclaration
Unique usage	annotationTypeMemberDeclaration
unique var 	interfaceDeclaration
setUnique	if	nil	true
unique var 	parExpression
unique var 	statement
unique var 	statement
unique var 	statement
unique var 	parExpression
unique var2 	tryStatement
unique var 	parExpression
unique var 	switchBlock
Unique usage	switchBlock
unique var 	block
unique var 	expression
unique var 	expression
unique var 	expression
unique var 	expression
unique var 	switchLabel
unique var 	enumConstantName
Unique usage	enumConstantName
unique var 	block
unique var 	catchClause
unique var 	resourceSpecification
Unique usage	resourceSpecification
unique var 	block
unique var 	catchClause
unique var 	finally
unique var 	catchFormalParameter
Unique usage	catchFormalParameter
unique var 	block
unique var 	variableModifier
unique var 	catchType
Unique usage	catchType
unique var 	variableDeclaratorId
unique var 	unannClassType
unique var 	classType
unique var 	block
unique var 	resourceList
Unique usage	resourceList
unique var 	resource
Unique usage	resource
unique var 	resource
Unique usage	resource
unique var 	variableModifier
unique var 	unannType
unique var 	variableDeclaratorId
unique var 	expression
unique var 	arrayCreator
Unique usage	arrayCreator
unique var 	typeArguments
unique var 	arguments
unique var 	type
unique var 	dim
unique var 	arrayInitializer
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	unaryExpression
unique var 	referenceType
unique var 	expression
unique var 	expression
unique var 	expression
unique var 	lambdaBody
Unique usage	lambdaBody
unique var 	expression
unique var 	block
Unique vars: compilation, wildcardBounds, compilationUnit, typeDeclaration, superclass, superinterfaces, interfaceTypeList, exceptionTypeList, exceptionType, enumBody, enumConstantList, enumBodyDeclarations, extendsInterfaces, interfaceBody, interfaceMemberDeclaration, annotationTypeBody, annotationTypeMemberDeclaration, switchBlock, enumConstantName, catchFormalParameter, catchType, resourceSpecification, resourceList, resource, arrayCreator, lambdaBody, 
matchUPath: compilation, basicType, additionalBound, wildcard, wildcardBounds, compilationUnit, packageDeclaration, typeDeclaration, classDeclaration, normalClassDeclaration, superclass, superinterfaces, interfaceTypeList, throws, exceptionTypeList, exceptionType, staticInitializer, enumDeclaration, enumBody, enumConstantList, enumBodyDeclarations, interfaceDeclaration, normalInterfaceDeclaration, extendsInterfaces, interfaceBody, interfaceMemberDeclaration, annotationTypeDeclaration, annotationTypeBody, annotationTypeMemberDeclaration, annotation, switchBlock, switchLabel, enumConstantName, tryStatement, catchClause, catchFormalParameter, catchType, finally, resourceSpecification, resourceList, resource, arrayCreator, assignment, lambdaExpression, lambdaBody, 
Adding labels: Err_1, Err_2, Err_3, Err_4, Err_5, Err_6, Err_7, Err_8, Err_9, Err_10, Err_11, Err_12, Err_13, Err_14, Err_15, Err_16, Err_17, Err_18, Err_19, Err_20, Err_21, Err_22, Err_23, Err_24, Err_25, Err_26, Err_27, Err_28, Err_29, Err_30, Err_31, Err_32, Err_33, Err_34, Err_35, Err_36, Err_37, Err_38, Err_39, Err_40, Err_41, Err_42, Err_43, Err_44, Err_45, Err_46, Err_47, Err_48, Err_49, Err_50, Err_51, Err_52, Err_53, Err_54, Err_55, Err_56, Err_57, Err_58, Err_59, Err_60, Err_61, Err_62, Err_63, Err_64, Err_65, Err_66, Err_67, Err_68, Err_69, Err_70, Err_71, Err_72, Err_73, Err_74, Err_75, Err_76, Err_77, Err_78, Err_79, Err_80, Err_81, Err_82, Err_83, Err_84, Err_85, Err_86, Err_87, Err_88, Err_89, Err_90, Err_91, Err_92, Err_93, Err_94, Err_95, Err_96, Err_97, Err_98, Err_99, Err_100, Err_101, Err_102, Err_103, Err_104, Err_105, 

Property 	nil
compilation     <-  SKIP compilationUnit !.
basicType       <-  'byte'  /  'short'  /  'int'  /  'long'  /  'char'  /  'float'  /  'double'  /  'boolean'
primitiveType   <-  annotation* basicType
referenceType   <-  primitiveType dim+  /  classType dim*
classType       <-  annotation* Identifier typeArguments? ('.' annotation* Identifier typeArguments?)*
type            <-  primitiveType  /  classType
arrayType       <-  primitiveType dim+  /  classType dim+
typeVariable    <-  annotation* Identifier
dim             <-  annotation* '[' ']'
typeParameter   <-  typeParameterModifier* Identifier typeBound?
typeParameterModifier <-  annotation
typeBound       <-  'extends' (classType additionalBound*  /  typeVariable)
additionalBound <-  'and' classType^Err_001
typeArguments   <-  '<' typeArgumentList '>'
typeArgumentList <-  typeArgument (',' typeArgument)*
typeArgument    <-  referenceType  /  wildcard
wildcard        <-  annotation* '?' wildcardBounds?
wildcardBounds  <-  'extends' referenceType^Err_002  /  'super' referenceType^Err_003
qualIdent       <-  Identifier ('.' Identifier)*
compilationUnit <-  packageDeclaration? importDeclaration* typeDeclaration*
packageDeclaration <-  packageModifier* 'package' Identifier^Err_004 ('.' Identifier^Err_005)* ';'^Err_006
packageModifier <-  annotation
importDeclaration <-  'import' 'static'? qualIdent^Err_007 ('.' '*'^Err_008)? ';'^Err_009  /  ';'
typeDeclaration <-  classDeclaration  /  interfaceDeclaration  /  ';'
classDeclaration <-  normalClassDeclaration  /  enumDeclaration
normalClassDeclaration <-  classModifier* 'class' Identifier^Err_010 typeParameters? superclass? superinterfaces? classBody^Err_011
classModifier   <-  annotation  /  'public'  /  'protected'  /  'private'  /  'abstract'  /  'static'  /  'final'  /  'strictfp'
typeParameters  <-  '<' typeParameterList '>'
typeParameterList <-  typeParameter (',' typeParameter)*
superclass      <-  'extends' classType^Err_012
superinterfaces <-  'implements' interfaceTypeList^Err_013
interfaceTypeList <-  classType^Err_014 (',' classType^Err_015)*
classBody       <-  '{' classBodyDeclaration* '}'
classBodyDeclaration <-  classMemberDeclaration  /  instanceInitializer  /  staticInitializer  /  constructorDeclaration
classMemberDeclaration <-  fieldDeclaration  /  methodDeclaration  /  classDeclaration  /  interfaceDeclaration  /  ';'
fieldDeclaration <-  fieldModifier* unannType variableDeclaratorList ';'
variableDeclaratorList <-  variableDeclarator (',' variableDeclarator)*
variableDeclarator <-  variableDeclaratorId ('=' !'=' variableInitializer)?
variableDeclaratorId <-  Identifier dim*
variableInitializer <-  expression  /  arrayInitializer
unannClassType  <-  Identifier typeArguments? ('.' annotation* Identifier typeArguments?)*
unannType       <-  basicType dim*  /  unannClassType dim*
fieldModifier   <-  annotation  /  'public'  /  'protected'  /  'private'  /  'static'  /  'final'  /  'transient'  /  'volatile'
methodDeclaration <-  methodModifier* methodHeader methodBody
methodHeader    <-  result methodDeclarator throws?  /  typeParameters annotation* result methodDeclarator throws?
methodDeclarator <-  Identifier '(' formalParameterList? ')' dim*
formalParameterList <-  (receiverParameter  /  formalParameter) (',' formalParameter)*
formalParameter <-  variableModifier* unannType variableDeclaratorId  /  variableModifier* unannType annotation* '...' variableDeclaratorId^Err_016 !','
variableModifier <-  annotation  /  'final'
receiverParameter <-  variableModifier* unannType (Identifier '.')? 'this'
result          <-  unannType  /  'void'
methodModifier  <-  annotation  /  'public'  /  'protected'  /  'private'  /  'abstract'  /  'static'  /  'final'  /  'synchronized'  /  'native'  /  'stictfp'
throws          <-  'throws' exceptionTypeList^Err_017
exceptionTypeList <-  exceptionType^Err_018 (',' exceptionType^Err_019)*
exceptionType   <-  (classType  /  typeVariable)^Err_020
methodBody      <-  block  /  ';'
instanceInitializer <-  block
staticInitializer <-  'static' block
constructorDeclaration <-  constructorModifier* constructorDeclarator throws? constructorBody
constructorDeclarator <-  typeParameters? Identifier '(' formalParameterList? ')'
constructorModifier <-  annotation  /  'public'  /  'protected'  /  'private'
constructorBody <-  '{' explicitConstructorInvocation? blockStatements? '}'
explicitConstructorInvocation <-  typeArguments? 'this' arguments ';'^Err_021  /  typeArguments? 'super' arguments ';'  /  primary '.' typeArguments? 'super' arguments ';'  /  qualIdent '.' typeArguments? 'super' arguments ';'^Err_022
enumDeclaration <-  classModifier* 'enum' Identifier^Err_023 superinterfaces? enumBody^Err_024
enumBody        <-  '{'^Err_025 enumConstantList? ','? enumBodyDeclarations? '}'^Err_026
enumConstantList <-  enumConstant (',' enumConstant)*
enumConstant    <-  enumConstantModifier* Identifier arguments? classBody?
enumConstantModifier <-  annotation
enumBodyDeclarations <-  ';' classBodyDeclaration*
interfaceDeclaration <-  normalInterfaceDeclaration  /  annotationTypeDeclaration
normalInterfaceDeclaration <-  interfaceModifier* 'interface' Identifier^Err_027 typeParameters? extendsInterfaces? interfaceBody^Err_028
interfaceModifier <-  annotation  /  'public'  /  'protected'  /  'private'  /  'abstract'  /  'static'  /  'strictfp'
extendsInterfaces <-  'extends' interfaceTypeList^Err_029
interfaceBody   <-  '{'^Err_030 interfaceMemberDeclaration* '}'^Err_031
interfaceMemberDeclaration <-  constantDeclaration  /  interfaceMethodDeclaration  /  classDeclaration  /  interfaceDeclaration  /  ';'
constantDeclaration <-  constantModifier* unannType variableDeclaratorList ';'
constantModifier <-  annotation  /  'public'  /  'static'  /  'final'
interfaceMethodDeclaration <-  interfaceMethodModifier* methodHeader methodBody
interfaceMethodModifier <-  annotation  /  'public'  /  'abstract'  /  'default'  /  'static'  /  'strictfp'
annotationTypeDeclaration <-  interfaceModifier* '@' 'interface' Identifier^Err_032 annotationTypeBody^Err_033
annotationTypeBody <-  '{'^Err_034 annotationTypeMemberDeclaration* '}'^Err_035
annotationTypeMemberDeclaration <-  annotationTypeElementDeclaration  /  constantDeclaration  /  classDeclaration  /  interfaceDeclaration  /  ';'
annotationTypeElementDeclaration <-  annotationTypeElementModifier* unannType Identifier '(' ')' dim* defaultValue? ';'
annotationTypeElementModifier <-  annotation  /  'public'  /  'abstract'
defaultValue    <-  'default' elementValue
annotation      <-  '@' (normalAnnotation  /  singleElementAnnotation  /  markerAnnotation)
normalAnnotation <-  qualIdent '(' elementValuePairList* ')'
elementValuePairList <-  elementValuePair (',' elementValuePair)*
elementValuePair <-  Identifier '=' !'=' elementValue
elementValue    <-  conditionalExpression  /  elementValueArrayInitializer  /  annotation
elementValueArrayInitializer <-  '{' elementValueList? ','? '}'
elementValueList <-  elementValue (',' elementValue)*
markerAnnotation <-  qualIdent
singleElementAnnotation <-  qualIdent '(' elementValue ')'
arrayInitializer <-  '{' variableInitializerList? ','? '}'
variableInitializerList <-  variableInitializer (',' variableInitializer)*
block           <-  '{' blockStatements? '}'
blockStatements <-  blockStatement blockStatement*
blockStatement  <-  localVariableDeclarationStatement  /  classDeclaration  /  statement
localVariableDeclarationStatement <-  localVariableDeclaration ';'
localVariableDeclaration <-  variableModifier* unannType variableDeclaratorList
statement       <-  block  /  'if' parExpression^Err_036 statement^Err_037 ('else' statement^Err_038)?  /  basicForStatement  /  enhancedForStatement  /  'while' parExpression^Err_039 statement  /  'do' statement^Err_040 'while'^Err_041 parExpression^Err_042 ';'^Err_043  /  tryStatement  /  'switch' parExpression^Err_044 switchBlock^Err_045  /  'synchronized' parExpression block^Err_046  /  'return' expression? ';'^Err_047  /  'throw' expression^Err_048 ';'^Err_049  /  'break' Identifier? ';'^Err_050  /  'continue' Identifier? ';'^Err_051  /  'assert' expression^Err_052 (':' expression^Err_053)? ';'^Err_054  /  ';'  /  statementExpression ';'  /  Identifier ':' statement
statementExpression <-  assignment  /  ('++'  /  '--') (primary  /  qualIdent)  /  (primary  /  qualIdent) ('++'  /  '--')  /  primary
switchBlock     <-  '{'^Err_055 switchBlockStatementGroup* switchLabel* '}'^Err_056
switchBlockStatementGroup <-  switchLabels blockStatements
switchLabels    <-  switchLabel switchLabel*
switchLabel     <-  'case' (constantExpression  /  enumConstantName)^Err_057 ':'^Err_058  /  'default' ':'
enumConstantName <-  Identifier^Err_059
basicForStatement <-  'for' '('^Err_060 forInit? ';' expression? ';' forUpdate? ')' statement
forInit         <-  localVariableDeclaration  /  statementExpressionList
forUpdate       <-  statementExpressionList
statementExpressionList <-  statementExpression (',' statementExpression)*
enhancedForStatement <-  'for' '('^Err_061 variableModifier* unannType variableDeclaratorId ':' expression ')' statement
tryStatement    <-  'try' (block (catchClause* finally  /  catchClause+)^Err_062  /  resourceSpecification block^Err_063 catchClause* finally?)^Err_064
catchClause     <-  'catch' '('^Err_065 catchFormalParameter^Err_066 ')'^Err_067 block^Err_068
catchFormalParameter <-  variableModifier* catchType^Err_069 variableDeclaratorId^Err_070
catchType       <-  unannClassType^Err_071 ('|' ![=|] classType^Err_072)*
finally         <-  'finally' block^Err_073
resourceSpecification <-  '('^Err_074 resourceList^Err_075 ';'? ')'^Err_076
resourceList    <-  resource^Err_077 (',' resource^Err_078)*
resource        <-  variableModifier* unannType^Err_079 variableDeclaratorId^Err_080 '='^Err_081 !'=' expression^Err_082
expression      <-  lambdaExpression  /  assignmentExpression
primary         <-  primaryBase primaryRest*
primaryBase     <-  'this'  /  Literal  /  parExpression  /  'super' ('.' typeArguments? Identifier arguments  /  '.' Identifier  /  '::' typeArguments? Identifier)  /  'new' (classCreator  /  arrayCreator)^Err_083  /  qualIdent ('[' expression ']'  /  arguments  /  '.' ('this'  /  'new' classCreator^Err_084  /  typeArguments Identifier arguments  /  'super' '.' typeArguments? Identifier arguments  /  'super' '.' Identifier^Err_085  /  'super' '::' typeArguments? Identifier^Err_086 arguments^Err_087)  /  ('[' ']')* '.' 'class'  /  '::' typeArguments? Identifier)  /  'void' '.' 'class'^Err_088  /  basicType ('[' ']')* '.' 'class'  /  referenceType '::' typeArguments? 'new'  /  arrayType '::' 'new'
primaryRest     <-  '.' (typeArguments? Identifier arguments  /  Identifier  /  'new' classCreator^Err_089)  /  '[' expression ']'  /  '::' typeArguments? Identifier
parExpression   <-  '(' expression ')'
classCreator    <-  typeArguments? annotation* classTypeWithDiamond arguments classBody?
classTypeWithDiamond <-  annotation* Identifier typeArgumentsOrDiamond? ('.' annotation* Identifier typeArgumentsOrDiamond?)*
typeArgumentsOrDiamond <-  typeArguments  /  '<' '>' !'.'
arrayCreator    <-  (type dimExpr+ dim*  /  type dim+^Err_090 arrayInitializer^Err_091)^Err_092
dimExpr         <-  annotation* '[' expression ']'
arguments       <-  '(' argumentList? ')'
argumentList    <-  expression (',' expression)*
unaryExpression <-  ('++'  /  '--') (primary  /  qualIdent)  /  '+' ![=+] unaryExpression^Err_093  /  '-' ![-=>] unaryExpression^Err_094  /  unaryExpressionNotPlusMinus
unaryExpressionNotPlusMinus <-  '~' unaryExpression^Err_095  /  '!' ![=&] unaryExpression^Err_096  /  castExpression  /  (primary  /  qualIdent) ('++'  /  '--')?
castExpression  <-  '(' primitiveType ')' unaryExpression^Err_097  /  '(' referenceType additionalBound* ')' lambdaExpression  /  '(' referenceType additionalBound* ')' unaryExpressionNotPlusMinus
infixExpression <-  unaryExpression (InfixOperator unaryExpression^Err_098  /  'instanceof' referenceType^Err_099)*
InfixOperator   <-  '||'  /  '&&'  /  '|' ![=|]  /  '^' ![=]  /  '&' ![=&]  /  '=='  /  '!='  /  '<' ![=<]  /  '>' ![=>]  /  '<='  /  '>='  /  '<<' ![=]  /  '>>' ![=>]  /  '>>>' ![=]  /  '+' ![=+]  /  '-' ![-=>]  /  '*' ![=]  /  '/' ![=]  /  '%' ![=]
conditionalExpression <-  infixExpression ('query' expression^Err_100 ':'^Err_101 expression^Err_102)*
assignmentExpression <-  assignment  /  conditionalExpression
assignment      <-  leftHandSide AssignmentOperator expression^Err_103
leftHandSide    <-  primary  /  qualIdent
AssignmentOperator <-  '=' ![=]  /  '*='  /  '/='  /  '%='  /  '+='  /  '-='  /  '<<='  /  '>>='  /  '>>>='  /  '&='  /  '^='  /  '|='
lambdaExpression <-  lambdaParameters '->' lambdaBody^Err_104
lambdaParameters <-  Identifier  /  '(' formalParameterList? ')'  /  '(' inferredFormalParameterList ')'
inferredFormalParameterList <-  Identifier (',' Identifier)*
lambdaBody      <-  (expression  /  block)^Err_105
constantExpression <-  expression
Identifier      <-  !Keywords [a-zA-Z_] [a-zA-Z_$0-9]*
Keywords        <-  ('abstract'  /  'assert'  /  'boolean'  /  'break'  /  'byte'  /  'case'  /  'catch'  /  'char'  /  'class'  /  'const'  /  'continue'  /  'default'  /  'double'  /  'do'  /  'else'  /  'enum'  /  'extends'  /  'false'  /  'finally'  /  'final'  /  'float'  /  'for'  /  'goto'  /  'if'  /  'implements'  /  'import'  /  'interface'  /  'int'  /  'instanceof'  /  'long'  /  'native'  /  'new'  /  'null'  /  'package'  /  'private'  /  'protected'  /  'public'  /  'return'  /  'short'  /  'static'  /  'strictfp'  /  'super'  /  'switch'  /  'synchronized'  /  'this'  /  'throws'  /  'throw'  /  'transient'  /  'true'  /  'try'  /  'void'  /  'volatile'  /  'while') ![a-zA-Z_$0-9]
Literal         <-  FloatLiteral  /  IntegerLiteral  /  BooleanLiteral  /  CharLiteral  /  StringLiteral  /  NullLiteral
IntegerLiteral  <-  (HexNumeral  /  BinaryNumeral  /  OctalNumeral  /  DecimalNumeral) [lL]?
DecimalNumeral  <-  '0'  /  [1-9] ([_]* [0-9])*
HexNumeral      <-  ('0x'  /  '0X') HexDigits
OctalNumeral    <-  '0' ([_]* [0-7])+
BinaryNumeral   <-  ('0b'  /  '0B') [01] ([_]* [01])*
FloatLiteral    <-  HexaDecimalFloatingPointLiteral  /  DecimalFloatingPointLiteral
DecimalFloatingPointLiteral <-  Digits '.' Digits? Exponent? [fFdD]?  /  '.' Digits Exponent? [fFdD]?  /  Digits Exponent [fFdD]?  /  Digits Exponent? [fFdD]
Exponent        <-  [eE] [-+]? Digits
HexaDecimalFloatingPointLiteral <-  HexSignificand BinaryExponent [fFdD]?
HexSignificand  <-  ('0x'  /  '0X') HexDigits? '.' HexDigits  /  HexNumeral '.'?
HexDigits       <-  HexDigit ([_]* HexDigit)*
HexDigit        <-  [a-f]  /  [A-F]  /  [0-9]
BinaryExponent  <-  [pP] [-+]? Digits
Digits          <-  [0-9] ([_]* [0-9])*
BooleanLiteral  <-  'true'  /  'false'
CharLiteral     <-  "'" (%nl  /  !"'" .) "'"
StringLiteral   <-  '"' (%nl  /  !'"' .)* '"'
NullLiteral     <-  'null'
COMMENT         <-  '//' (!%nl .)*  /  '/*' (!'*/' .)* '*/'
SPACE           <-  [ 	
]  /  COMMENT
SKIP            <-  ([ 	
]  /  COMMENT)*
Token           <-  '~'  /  '}'  /  '{'  /  'stictfp'  /  'query'  /  'and'  /  StringLiteral  /  OctalNumeral  /  NullLiteral  /  Literal  /  Keywords  /  IntegerLiteral  /  InfixOperator  /  Identifier  /  HexaDecimalFloatingPointLiteral  /  HexSignificand  /  HexNumeral  /  HexDigits  /  HexDigit  /  FloatLiteral  /  Exponent  /  Digits  /  DecimalNumeral  /  DecimalFloatingPointLiteral  /  CharLiteral  /  COMMENT  /  BooleanLiteral  /  BinaryNumeral  /  BinaryExponent  /  AssignmentOperator  /  ']'  /  '['  /  '@'  /  '?'  /  ';'  /  '::'  /  ':'  /  '...'  /  '->'  /  '--'  /  ','  /  '++'  /  ')'  /  '('  /  '!'
EatToken        <-  (Token  /  (!SPACE .)+) SKIP
Err_001         <-  (!('and'  /  '>'  /  ','  /  ')') EatToken)*
Err_002         <-  (!('>'  /  ',') EatToken)*
Err_003         <-  (!('>'  /  ',') EatToken)*
Err_004         <-  (!(';'  /  '.') EatToken)*
Err_005         <-  (!(';'  /  '.') EatToken)*
Err_006         <-  (!('strictfp'  /  'static'  /  'public'  /  'protected'  /  'private'  /  'interface'  /  'import'  /  'final'  /  'enum'  /  'class'  /  'abstract'  /  '@'  /  ';'  /  !.) EatToken)*
Err_007         <-  (!(';'  /  '.') EatToken)*
Err_008         <-  (!';' EatToken)*
Err_009         <-  (!('strictfp'  /  'static'  /  'public'  /  'protected'  /  'private'  /  'interface'  /  'import'  /  'final'  /  'enum'  /  'class'  /  'abstract'  /  '@'  /  ';'  /  !.) EatToken)*
Err_010         <-  (!('{'  /  'implements'  /  'extends'  /  '<') EatToken)*
Err_011         <-  (!('}'  /  '{'  /  'while'  /  'volatile'  /  'void'  /  'try'  /  'transient'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  '<'  /  ';'  /  '--'  /  '++'  /  '('  /  !.) EatToken)*
Err_012         <-  (!('{'  /  'implements') EatToken)*
Err_013         <-  (!'{' EatToken)*
Err_014         <-  (!('{'  /  ',') EatToken)*
Err_015         <-  (!('{'  /  ',') EatToken)*
Err_016         <-  (!(','  /  ')') EatToken)*
Err_017         <-  (!('{'  /  ';') EatToken)*
Err_018         <-  (!('{'  /  ';'  /  ',') EatToken)*
Err_019         <-  (!('{'  /  ';'  /  ',') EatToken)*
Err_020         <-  (!('{'  /  ';'  /  ',') EatToken)*
Err_021         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'continue'  /  'class'  /  'char'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_022         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'continue'  /  'class'  /  'char'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_023         <-  (!('{'  /  'implements') EatToken)*
Err_024         <-  (!('}'  /  '{'  /  'while'  /  'volatile'  /  'void'  /  'try'  /  'transient'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  '<'  /  ';'  /  '--'  /  '++'  /  '('  /  !.) EatToken)*
Err_025         <-  (!('}'  /  Identifier  /  '@'  /  ';'  /  ',') EatToken)*
Err_026         <-  (!('}'  /  '{'  /  'while'  /  'volatile'  /  'void'  /  'try'  /  'transient'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  '<'  /  ';'  /  '--'  /  '++'  /  '('  /  !.) EatToken)*
Err_027         <-  (!('{'  /  'extends'  /  '<') EatToken)*
Err_028         <-  (!('}'  /  '{'  /  'volatile'  /  'void'  /  'transient'  /  'synchronized'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'default'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  Identifier  /  '@'  /  '<'  /  ';'  /  !.) EatToken)*
Err_029         <-  (!'{' EatToken)*
Err_030         <-  (!('}'  /  'void'  /  'strictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'default'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  Identifier  /  '@'  /  '<'  /  ';') EatToken)*
Err_031         <-  (!('}'  /  '{'  /  'volatile'  /  'void'  /  'transient'  /  'synchronized'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'default'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  Identifier  /  '@'  /  '<'  /  ';'  /  !.) EatToken)*
Err_032         <-  (!'{' EatToken)*
Err_033         <-  (!('}'  /  '{'  /  'volatile'  /  'void'  /  'transient'  /  'synchronized'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'default'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  Identifier  /  '@'  /  '<'  /  ';'  /  !.) EatToken)*
Err_034         <-  (!('}'  /  'strictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  Identifier  /  '@'  /  ';') EatToken)*
Err_035         <-  (!('}'  /  '{'  /  'volatile'  /  'void'  /  'transient'  /  'synchronized'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'default'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  Identifier  /  '@'  /  '<'  /  ';'  /  !.) EatToken)*
Err_036         <-  (!('{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'short'  /  'return'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'double'  /  'do'  /  'continue'  /  'char'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_037         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_038         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_039         <-  (!('{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'short'  /  'return'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'double'  /  'do'  /  'continue'  /  'char'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_040         <-  (!'while' EatToken)*
Err_041         <-  (!'(' EatToken)*
Err_042         <-  (!';' EatToken)*
Err_043         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_044         <-  (!'{' EatToken)*
Err_045         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_046         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_047         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_048         <-  (!';' EatToken)*
Err_049         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_050         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_051         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_052         <-  (!(';'  /  ':') EatToken)*
Err_053         <-  (!';' EatToken)*
Err_054         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_055         <-  (!('}'  /  'default'  /  'case') EatToken)*
Err_056         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_057         <-  (!':' EatToken)*
Err_058         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_059         <-  (!':' EatToken)*
Err_060         <-  (!('void'  /  'this'  /  'super'  /  'short'  /  'new'  /  'long'  /  'int'  /  'float'  /  'final'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_061         <-  (!('short'  /  'long'  /  'int'  /  'float'  /  'final'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  Identifier  /  '@') EatToken)*
Err_062         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_063         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'finally'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'catch'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_064         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_065         <-  (!('final'  /  Identifier  /  '@') EatToken)*
Err_066         <-  (!')' EatToken)*
Err_067         <-  (!'{' EatToken)*
Err_068         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'finally'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'catch'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_069         <-  (!Identifier EatToken)*
Err_070         <-  (!')' EatToken)*
Err_071         <-  (!('|'  /  Identifier) EatToken)*
Err_072         <-  (!('|'  /  Identifier) EatToken)*
Err_073         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_074         <-  (!('short'  /  'long'  /  'int'  /  'float'  /  'final'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  Identifier  /  '@') EatToken)*
Err_075         <-  (!(';'  /  ')') EatToken)*
Err_076         <-  (!'{' EatToken)*
Err_077         <-  (!(';'  /  ','  /  ')') EatToken)*
Err_078         <-  (!(';'  /  ','  /  ')') EatToken)*
Err_079         <-  (!Identifier EatToken)*
Err_080         <-  (!'=' EatToken)*
Err_081         <-  (!('~'  /  'void'  /  'this'  /  'super'  /  'short'  /  'new'  /  'long'  /  'int'  /  'float'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  Literal  /  Identifier  /  '@'  /  '--'  /  '-'  /  '++'  /  '+'  /  '('  /  '!') EatToken)*
Err_082         <-  (!(';'  /  ','  /  ')') EatToken)*
Err_083         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_084         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_085         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_086         <-  (!'(' EatToken)*
Err_087         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_088         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_089         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_090         <-  (!('{'  /  '['  /  '@') EatToken)*
Err_091         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_092         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_093         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_094         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_095         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_096         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_097         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_098         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_099         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_100         <-  (!':' EatToken)*
Err_101         <-  (!('~'  /  'void'  /  'this'  /  'super'  /  'short'  /  'new'  /  'long'  /  'int'  /  'float'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  Literal  /  Identifier  /  '@'  /  '--'  /  '-'  /  '++'  /  '+'  /  '('  /  '!') EatToken)*
Err_102         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_103         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_104         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_105         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*	

Property 	unique
compilation     <-  SKIP_unique compilationUnit_unique !.
basicType       <-  ('byte'_unique  /  ('short'_unique  /  ('int'_unique  /  ('long'_unique  /  ('char'_unique  /  ('float'_unique  /  ('double'_unique  /  'boolean'_unique)_unique)_unique)_unique)_unique)_unique)_unique)_unique
primitiveType   <-  annotation* basicType
referenceType   <-  primitiveType dim+  /  classType dim*
classType       <-  annotation* Identifier typeArguments? ('.' annotation* Identifier typeArguments?)*
type            <-  primitiveType_unique  /  classType
arrayType       <-  primitiveType dim+  /  classType dim+
typeVariable    <-  annotation* Identifier
dim             <-  annotation* '[' ']'
typeParameter   <-  typeParameterModifier* Identifier typeBound?
typeParameterModifier <-  annotation
typeBound       <-  'extends' (classType additionalBound*  /  typeVariable)
additionalBound <-  'and'_unique classType_unique^Err_001
typeArguments   <-  '<' typeArgumentList '>'
typeArgumentList <-  typeArgument (',' typeArgument)*
typeArgument    <-  referenceType  /  wildcard_unique
wildcard        <-  annotation* '?'_unique wildcardBounds_unique?_unique
wildcardBounds  <-  ('extends'_unique referenceType_unique^Err_002  /  'super'_unique referenceType_unique^Err_003)_unique
qualIdent       <-  Identifier ('.' Identifier)*
compilationUnit <-  packageDeclaration_unique?_unique importDeclaration*_unique typeDeclaration_unique*_unique
packageDeclaration <-  packageModifier* 'package'_unique Identifier_unique^Err_004 ('.'_unique Identifier_unique^Err_005)*_unique ';'_unique^Err_006
packageModifier <-  annotation
importDeclaration <-  'import'_unique 'static'_unique?_unique qualIdent_unique^Err_007 ('.'_unique '*'_unique^Err_008)?_unique ';'_unique^Err_009  /  ';'
typeDeclaration <-  (classDeclaration  /  (interfaceDeclaration_unique  /  ';'_unique)_unique)_unique
classDeclaration <-  (normalClassDeclaration_unique  /  enumDeclaration_unique)_unique
normalClassDeclaration <-  classModifier* 'class'_unique Identifier_unique^Err_010 typeParameters_unique?_unique superclass_unique?_unique superinterfaces_unique?_unique classBody_unique^Err_011
classModifier   <-  annotation  /  'public'  /  'protected'  /  'private'  /  'abstract'  /  'static'  /  'final'  /  'strictfp'
typeParameters  <-  '<' typeParameterList '>'
typeParameterList <-  typeParameter (',' typeParameter)*
superclass      <-  'extends'_unique classType_unique^Err_012
superinterfaces <-  'implements'_unique interfaceTypeList_unique^Err_013
interfaceTypeList <-  classType_unique^Err_014 (','_unique classType_unique^Err_015)*_unique
classBody       <-  '{' classBodyDeclaration* '}'
classBodyDeclaration <-  classMemberDeclaration  /  instanceInitializer  /  staticInitializer_unique  /  constructorDeclaration
classMemberDeclaration <-  fieldDeclaration  /  methodDeclaration  /  classDeclaration  /  interfaceDeclaration  /  ';'
fieldDeclaration <-  fieldModifier* unannType variableDeclaratorList ';'
variableDeclaratorList <-  variableDeclarator (',' variableDeclarator)*
variableDeclarator <-  variableDeclaratorId ('=' !'=' variableInitializer)?
variableDeclaratorId <-  Identifier dim*
variableInitializer <-  expression  /  arrayInitializer
unannClassType  <-  Identifier typeArguments? ('.' annotation* Identifier typeArguments?)*
unannType       <-  basicType dim*  /  unannClassType dim*
fieldModifier   <-  annotation  /  'public'  /  'protected'  /  'private'  /  'static'  /  'final'  /  ('transient'_unique  /  'volatile'_unique)_unique
methodDeclaration <-  methodModifier* methodHeader methodBody
methodHeader    <-  result methodDeclarator throws?  /  typeParameters annotation* result methodDeclarator throws?
methodDeclarator <-  Identifier '(' formalParameterList? ')' dim*
formalParameterList <-  (receiverParameter  /  formalParameter) (',' formalParameter)*
formalParameter <-  variableModifier* unannType variableDeclaratorId  /  variableModifier* unannType annotation* '...'_unique variableDeclaratorId_unique^Err_016 !','
variableModifier <-  annotation  /  'final'
receiverParameter <-  variableModifier* unannType (Identifier '.')? 'this'
result          <-  unannType  /  'void'
methodModifier  <-  annotation  /  'public'  /  'protected'  /  'private'  /  'abstract'  /  'static'  /  'final'  /  'synchronized'  /  ('native'_unique  /  'stictfp'_unique)_unique
throws          <-  'throws'_unique exceptionTypeList_unique^Err_017
exceptionTypeList <-  exceptionType_unique^Err_018 (','_unique exceptionType_unique^Err_019)*_unique
exceptionType   <-  ((classType  /  typeVariable_unique)_unique)^Err_020
methodBody      <-  block  /  ';'
instanceInitializer <-  block
staticInitializer <-  'static' block_unique
constructorDeclaration <-  constructorModifier* constructorDeclarator throws? constructorBody
constructorDeclarator <-  typeParameters? Identifier '(' formalParameterList? ')'
constructorModifier <-  annotation  /  'public'  /  'protected'  /  'private'
constructorBody <-  '{' explicitConstructorInvocation? blockStatements? '}'
explicitConstructorInvocation <-  typeArguments? 'this' arguments_unique ';'_unique^Err_021  /  typeArguments? 'super' arguments ';'  /  primary '.' typeArguments? 'super' arguments ';'  /  qualIdent '.' typeArguments? 'super' arguments_unique ';'_unique^Err_022
enumDeclaration <-  classModifier* 'enum'_unique Identifier_unique^Err_023 superinterfaces_unique?_unique enumBody_unique^Err_024
enumBody        <-  '{'_unique^Err_025 enumConstantList_unique?_unique ','_unique?_unique enumBodyDeclarations_unique?_unique '}'_unique^Err_026
enumConstantList <-  enumConstant_unique (',' enumConstant)*_unique
enumConstant    <-  enumConstantModifier* Identifier arguments? classBody?
enumConstantModifier <-  annotation
enumBodyDeclarations <-  ';'_unique classBodyDeclaration_unique*_unique
interfaceDeclaration <-  (normalInterfaceDeclaration_unique  /  annotationTypeDeclaration_unique)_unique
normalInterfaceDeclaration <-  interfaceModifier* 'interface'_unique Identifier_unique^Err_027 typeParameters_unique?_unique extendsInterfaces_unique?_unique interfaceBody_unique^Err_028
interfaceModifier <-  annotation  /  'public'  /  'protected'  /  'private'  /  'abstract'  /  'static'  /  'strictfp'
extendsInterfaces <-  'extends'_unique interfaceTypeList_unique^Err_029
interfaceBody   <-  '{'_unique^Err_030 interfaceMemberDeclaration_unique*_unique '}'_unique^Err_031
interfaceMemberDeclaration <-  (constantDeclaration  /  (interfaceMethodDeclaration  /  (classDeclaration  /  (interfaceDeclaration_unique  /  ';'_unique)_unique)_unique)_unique)_unique
constantDeclaration <-  constantModifier* unannType variableDeclaratorList ';'
constantModifier <-  annotation  /  'public'  /  'static'  /  'final'
interfaceMethodDeclaration <-  interfaceMethodModifier* methodHeader methodBody
interfaceMethodModifier <-  annotation  /  'public'  /  'abstract'  /  'default'  /  'static'  /  'strictfp'
annotationTypeDeclaration <-  interfaceModifier* '@' 'interface'_unique Identifier_unique^Err_032 annotationTypeBody_unique^Err_033
annotationTypeBody <-  '{'_unique^Err_034 annotationTypeMemberDeclaration_unique*_unique '}'_unique^Err_035
annotationTypeMemberDeclaration <-  (annotationTypeElementDeclaration  /  (constantDeclaration  /  (classDeclaration  /  (interfaceDeclaration_unique  /  ';'_unique)_unique)_unique)_unique)_unique
annotationTypeElementDeclaration <-  annotationTypeElementModifier* unannType Identifier '(' ')' dim* defaultValue? ';'
annotationTypeElementModifier <-  annotation  /  'public'  /  'abstract'
defaultValue    <-  'default' elementValue
annotation      <-  '@' ((normalAnnotation_unique  /  (singleElementAnnotation_unique  /  markerAnnotation_unique)_unique)_unique)
normalAnnotation <-  qualIdent '(' elementValuePairList* ')'
elementValuePairList <-  elementValuePair (',' elementValuePair)*
elementValuePair <-  Identifier '=' !'=' elementValue
elementValue    <-  conditionalExpression  /  elementValueArrayInitializer  /  annotation
elementValueArrayInitializer <-  '{' elementValueList? ','? '}'
elementValueList <-  elementValue (',' elementValue)*
markerAnnotation <-  qualIdent
singleElementAnnotation <-  qualIdent '(' elementValue ')'
arrayInitializer <-  '{' variableInitializerList? ','? '}'
variableInitializerList <-  variableInitializer (',' variableInitializer)*
block           <-  '{' blockStatements? '}'
blockStatements <-  blockStatement blockStatement*
blockStatement  <-  localVariableDeclarationStatement  /  classDeclaration  /  statement
localVariableDeclarationStatement <-  localVariableDeclaration ';'
localVariableDeclaration <-  variableModifier* unannType variableDeclaratorList
statement       <-  block  /  'if'_unique parExpression_unique^Err_036 statement_unique^Err_037 ('else'_unique statement_unique^Err_038)?_unique  /  basicForStatement  /  enhancedForStatement  /  'while' parExpression^Err_039 statement  /  'do'_unique statement_unique^Err_040 'while'_unique^Err_041 parExpression_unique^Err_042 ';'_unique^Err_043  /  tryStatement_unique  /  'switch'_unique parExpression_unique^Err_044 switchBlock_unique^Err_045  /  'synchronized' parExpression_unique block_unique^Err_046  /  'return'_unique expression_unique?_unique ';'_unique^Err_047  /  'throw'_unique expression_unique^Err_048 ';'_unique^Err_049  /  'break'_unique Identifier_unique?_unique ';'_unique^Err_050  /  'continue'_unique Identifier_unique?_unique ';'_unique^Err_051  /  'assert'_unique expression_unique^Err_052 (':'_unique expression_unique^Err_053)?_unique ';'_unique^Err_054  /  ';'  /  statementExpression ';'  /  Identifier ':' statement
statementExpression <-  assignment  /  ('++'  /  '--') (primary  /  qualIdent)  /  (primary  /  qualIdent) ('++'  /  '--')  /  primary
switchBlock     <-  '{'_unique^Err_055 switchBlockStatementGroup*_unique switchLabel_unique*_unique '}'_unique^Err_056
switchBlockStatementGroup <-  switchLabels blockStatements
switchLabels    <-  switchLabel switchLabel*
switchLabel     <-  ('case'_unique ((constantExpression  /  enumConstantName_unique)_unique)^Err_057 ':'_unique^Err_058  /  'default' ':'_unique)_unique
enumConstantName <-  Identifier_unique^Err_059
basicForStatement <-  'for' '('^Err_060 forInit? ';' expression? ';' forUpdate? ')' statement
forInit         <-  localVariableDeclaration  /  statementExpressionList
forUpdate       <-  statementExpressionList
statementExpressionList <-  statementExpression (',' statementExpression)*
enhancedForStatement <-  'for' '('^Err_061 variableModifier* unannType variableDeclaratorId ':' expression ')' statement
tryStatement    <-  'try'_unique ((block_unique ((catchClause* finally  /  catchClause_unique+_unique)_unique)^Err_062  /  resourceSpecification_unique block_unique^Err_063 catchClause_unique*_unique finally_unique?_unique)_unique)^Err_064
catchClause     <-  'catch'_unique '('_unique^Err_065 catchFormalParameter_unique^Err_066 ')'_unique^Err_067 block_unique^Err_068
catchFormalParameter <-  variableModifier_unique*_unique catchType_unique^Err_069 variableDeclaratorId_unique^Err_070
catchType       <-  unannClassType_unique^Err_071 ('|'_unique ![=|] classType_unique^Err_072)*_unique
finally         <-  'finally'_unique block_unique^Err_073
resourceSpecification <-  '('_unique^Err_074 resourceList_unique^Err_075 ';'_unique?_unique ')'_unique^Err_076
resourceList    <-  resource_unique^Err_077 (','_unique resource_unique^Err_078)*_unique
resource        <-  variableModifier_unique*_unique unannType_unique^Err_079 variableDeclaratorId_unique^Err_080 '='_unique^Err_081 !'=' expression_unique^Err_082
expression      <-  lambdaExpression  /  assignmentExpression
primary         <-  primaryBase primaryRest*
primaryBase     <-  'this'  /  Literal_unique  /  parExpression  /  'super' (('.' typeArguments? Identifier arguments  /  '.' Identifier  /  '::' typeArguments? Identifier)_unique)  /  'new'_unique ((classCreator  /  arrayCreator_unique)_unique)^Err_083  /  qualIdent ('[' expression ']'  /  arguments  /  '.' ('this'  /  'new' classCreator^Err_084  /  typeArguments Identifier arguments  /  'super' '.' typeArguments? Identifier arguments  /  ('super' '.'_unique Identifier_unique^Err_085  /  'super' '::'_unique typeArguments_unique?_unique Identifier_unique^Err_086 arguments_unique^Err_087)_unique)  /  ('[' ']')* '.' 'class'  /  '::' typeArguments? Identifier)  /  'void' '.'_unique 'class'_unique^Err_088  /  basicType ('[' ']')* '.' 'class'_unique  /  referenceType '::' typeArguments? 'new'  /  arrayType '::' 'new'_unique
primaryRest     <-  '.' (typeArguments? Identifier arguments  /  Identifier  /  'new' classCreator^Err_089)  /  '[' expression ']'  /  '::' typeArguments? Identifier
parExpression   <-  '(' expression ')'
classCreator    <-  typeArguments_unique? annotation* classTypeWithDiamond arguments classBody?
classTypeWithDiamond <-  annotation* Identifier typeArgumentsOrDiamond? ('.' annotation* Identifier typeArgumentsOrDiamond?)*
typeArgumentsOrDiamond <-  typeArguments  /  '<' '>'_unique !'.'
arrayCreator    <-  ((type dimExpr+ dim*  /  type_unique dim_unique+_unique^Err_090 arrayInitializer_unique^Err_091)_unique)^Err_092
dimExpr         <-  annotation* '[' expression ']'
arguments       <-  '(' argumentList? ')'
argumentList    <-  expression (',' expression)*
unaryExpression <-  ('++'  /  '--') (primary  /  qualIdent)  /  '+'_unique ![=+] unaryExpression_unique^Err_093  /  '-'_unique ![-=>] unaryExpression_unique^Err_094  /  unaryExpressionNotPlusMinus
unaryExpressionNotPlusMinus <-  '~'_unique unaryExpression_unique^Err_095  /  '!'_unique ![=&] unaryExpression_unique^Err_096  /  castExpression  /  (primary  /  qualIdent) ('++'  /  '--')?
castExpression  <-  '(' primitiveType ')'_unique unaryExpression_unique^Err_097  /  '(' referenceType additionalBound* ')' lambdaExpression  /  '(' referenceType additionalBound* ')' unaryExpressionNotPlusMinus
infixExpression <-  unaryExpression ((InfixOperator_unique unaryExpression_unique^Err_098  /  'instanceof'_unique referenceType_unique^Err_099)_unique)*
InfixOperator   <-  '||'  /  '&&'  /  '|' ![=|]  /  '^' ![=]  /  '&' ![=&]  /  '=='  /  '!='  /  '<' ![=<]  /  '>' ![=>]  /  '<='  /  '>='  /  '<<' ![=]  /  '>>' ![=>]  /  '>>>' ![=]  /  '+' ![=+]  /  '-' ![-=>]  /  '*' ![=]  /  '/' ![=]  /  '%' ![=]
conditionalExpression <-  infixExpression ('query'_unique expression_unique^Err_100 ':'_unique^Err_101 expression_unique^Err_102)*
assignmentExpression <-  assignment  /  conditionalExpression
assignment      <-  leftHandSide AssignmentOperator_unique expression_unique^Err_103
leftHandSide    <-  primary  /  qualIdent
AssignmentOperator <-  '=' ![=]  /  '*='  /  '/='  /  '%='  /  '+='  /  '-='  /  '<<='  /  '>>='  /  '>>>='  /  '&='  /  '^='  /  '|='
lambdaExpression <-  lambdaParameters '->'_unique lambdaBody_unique^Err_104
lambdaParameters <-  Identifier  /  '(' formalParameterList? ')'  /  '(' inferredFormalParameterList ')'
inferredFormalParameterList <-  Identifier (',' Identifier)*
lambdaBody      <-  ((expression_unique  /  block_unique)_unique)^Err_105
constantExpression <-  expression
Identifier      <-  !Keywords [a-zA-Z_] [a-zA-Z_$0-9]*
Keywords        <-  ('abstract'  /  'assert'  /  'boolean'  /  'break'  /  'byte'  /  'case'  /  'catch'  /  'char'  /  'class'  /  'const'  /  'continue'  /  'default'  /  'double'  /  'do'  /  'else'  /  'enum'  /  'extends'  /  'false'  /  'finally'  /  'final'  /  'float'  /  'for'  /  'goto'  /  'if'  /  'implements'  /  'import'  /  'interface'  /  'int'  /  'instanceof'  /  'long'  /  'native'  /  'new'  /  'null'  /  'package'  /  'private'  /  'protected'  /  'public'  /  'return'  /  'short'  /  'static'  /  'strictfp'  /  'super'  /  'switch'  /  'synchronized'  /  'this'  /  'throws'  /  'throw'  /  'transient'  /  'true'  /  'try'  /  'void'  /  'volatile'  /  'while') ![a-zA-Z_$0-9]
Literal         <-  FloatLiteral  /  IntegerLiteral  /  BooleanLiteral  /  CharLiteral  /  StringLiteral  /  NullLiteral
IntegerLiteral  <-  (HexNumeral  /  BinaryNumeral  /  OctalNumeral  /  DecimalNumeral) [lL]?
DecimalNumeral  <-  '0'  /  [1-9] ([_]* [0-9])*
HexNumeral      <-  ('0x'  /  '0X') HexDigits
OctalNumeral    <-  '0' ([_]* [0-7])+
BinaryNumeral   <-  ('0b'  /  '0B') [01] ([_]* [01])*
FloatLiteral    <-  HexaDecimalFloatingPointLiteral  /  DecimalFloatingPointLiteral
DecimalFloatingPointLiteral <-  Digits '.' Digits? Exponent? [fFdD]?  /  '.' Digits Exponent? [fFdD]?  /  Digits Exponent [fFdD]?  /  Digits Exponent? [fFdD]
Exponent        <-  [eE] [-+]? Digits
HexaDecimalFloatingPointLiteral <-  HexSignificand BinaryExponent [fFdD]?
HexSignificand  <-  ('0x'  /  '0X') HexDigits? '.' HexDigits  /  HexNumeral '.'?
HexDigits       <-  HexDigit ([_]* HexDigit)*
HexDigit        <-  [a-f]  /  [A-F]  /  [0-9]
BinaryExponent  <-  [pP] [-+]? Digits
Digits          <-  [0-9] ([_]* [0-9])*
BooleanLiteral  <-  'true'  /  'false'
CharLiteral     <-  "'" (%nl  /  !"'" .) "'"
StringLiteral   <-  '"' (%nl  /  !'"' .)* '"'
NullLiteral     <-  'null'
COMMENT         <-  '//' (!%nl .)*  /  '/*' (!'*/' .)* '*/'
SPACE           <-  [ 	
]  /  COMMENT
SKIP            <-  ([ 	
]  /  COMMENT)*
Token           <-  '~'  /  '}'  /  '{'  /  'stictfp'  /  'query'  /  'and'  /  StringLiteral  /  OctalNumeral  /  NullLiteral  /  Literal  /  Keywords  /  IntegerLiteral  /  InfixOperator  /  Identifier  /  HexaDecimalFloatingPointLiteral  /  HexSignificand  /  HexNumeral  /  HexDigits  /  HexDigit  /  FloatLiteral  /  Exponent  /  Digits  /  DecimalNumeral  /  DecimalFloatingPointLiteral  /  CharLiteral  /  COMMENT  /  BooleanLiteral  /  BinaryNumeral  /  BinaryExponent  /  AssignmentOperator  /  ']'  /  '['  /  '@'  /  '?'  /  ';'  /  '::'  /  ':'  /  '...'  /  '->'  /  '--'  /  ','  /  '++'  /  ')'  /  '('  /  '!'
EatToken        <-  (Token  /  (!SPACE .)+) SKIP
Err_001         <-  (!('and'  /  '>'  /  ','  /  ')') EatToken)*
Err_002         <-  (!('>'  /  ',') EatToken)*
Err_003         <-  (!('>'  /  ',') EatToken)*
Err_004         <-  (!(';'  /  '.') EatToken)*
Err_005         <-  (!(';'  /  '.') EatToken)*
Err_006         <-  (!('strictfp'  /  'static'  /  'public'  /  'protected'  /  'private'  /  'interface'  /  'import'  /  'final'  /  'enum'  /  'class'  /  'abstract'  /  '@'  /  ';'  /  !.) EatToken)*
Err_007         <-  (!(';'  /  '.') EatToken)*
Err_008         <-  (!';' EatToken)*
Err_009         <-  (!('strictfp'  /  'static'  /  'public'  /  'protected'  /  'private'  /  'interface'  /  'import'  /  'final'  /  'enum'  /  'class'  /  'abstract'  /  '@'  /  ';'  /  !.) EatToken)*
Err_010         <-  (!('{'  /  'implements'  /  'extends'  /  '<') EatToken)*
Err_011         <-  (!('}'  /  '{'  /  'while'  /  'volatile'  /  'void'  /  'try'  /  'transient'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  '<'  /  ';'  /  '--'  /  '++'  /  '('  /  !.) EatToken)*
Err_012         <-  (!('{'  /  'implements') EatToken)*
Err_013         <-  (!'{' EatToken)*
Err_014         <-  (!('{'  /  ',') EatToken)*
Err_015         <-  (!('{'  /  ',') EatToken)*
Err_016         <-  (!(','  /  ')') EatToken)*
Err_017         <-  (!('{'  /  ';') EatToken)*
Err_018         <-  (!('{'  /  ';'  /  ',') EatToken)*
Err_019         <-  (!('{'  /  ';'  /  ',') EatToken)*
Err_020         <-  (!('{'  /  ';'  /  ',') EatToken)*
Err_021         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'continue'  /  'class'  /  'char'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_022         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'continue'  /  'class'  /  'char'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_023         <-  (!('{'  /  'implements') EatToken)*
Err_024         <-  (!('}'  /  '{'  /  'while'  /  'volatile'  /  'void'  /  'try'  /  'transient'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  '<'  /  ';'  /  '--'  /  '++'  /  '('  /  !.) EatToken)*
Err_025         <-  (!('}'  /  Identifier  /  '@'  /  ';'  /  ',') EatToken)*
Err_026         <-  (!('}'  /  '{'  /  'while'  /  'volatile'  /  'void'  /  'try'  /  'transient'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  '<'  /  ';'  /  '--'  /  '++'  /  '('  /  !.) EatToken)*
Err_027         <-  (!('{'  /  'extends'  /  '<') EatToken)*
Err_028         <-  (!('}'  /  '{'  /  'volatile'  /  'void'  /  'transient'  /  'synchronized'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'default'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  Identifier  /  '@'  /  '<'  /  ';'  /  !.) EatToken)*
Err_029         <-  (!'{' EatToken)*
Err_030         <-  (!('}'  /  'void'  /  'strictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'default'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  Identifier  /  '@'  /  '<'  /  ';') EatToken)*
Err_031         <-  (!('}'  /  '{'  /  'volatile'  /  'void'  /  'transient'  /  'synchronized'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'default'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  Identifier  /  '@'  /  '<'  /  ';'  /  !.) EatToken)*
Err_032         <-  (!'{' EatToken)*
Err_033         <-  (!('}'  /  '{'  /  'volatile'  /  'void'  /  'transient'  /  'synchronized'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'default'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  Identifier  /  '@'  /  '<'  /  ';'  /  !.) EatToken)*
Err_034         <-  (!('}'  /  'strictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  Identifier  /  '@'  /  ';') EatToken)*
Err_035         <-  (!('}'  /  '{'  /  'volatile'  /  'void'  /  'transient'  /  'synchronized'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'default'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  Identifier  /  '@'  /  '<'  /  ';'  /  !.) EatToken)*
Err_036         <-  (!('{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'short'  /  'return'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'double'  /  'do'  /  'continue'  /  'char'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_037         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_038         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_039         <-  (!('{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'short'  /  'return'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'double'  /  'do'  /  'continue'  /  'char'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_040         <-  (!'while' EatToken)*
Err_041         <-  (!'(' EatToken)*
Err_042         <-  (!';' EatToken)*
Err_043         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_044         <-  (!'{' EatToken)*
Err_045         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_046         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_047         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_048         <-  (!';' EatToken)*
Err_049         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_050         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_051         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_052         <-  (!(';'  /  ':') EatToken)*
Err_053         <-  (!';' EatToken)*
Err_054         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_055         <-  (!('}'  /  'default'  /  'case') EatToken)*
Err_056         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_057         <-  (!':' EatToken)*
Err_058         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_059         <-  (!':' EatToken)*
Err_060         <-  (!('void'  /  'this'  /  'super'  /  'short'  /  'new'  /  'long'  /  'int'  /  'float'  /  'final'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_061         <-  (!('short'  /  'long'  /  'int'  /  'float'  /  'final'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  Identifier  /  '@') EatToken)*
Err_062         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_063         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'finally'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'catch'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_064         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_065         <-  (!('final'  /  Identifier  /  '@') EatToken)*
Err_066         <-  (!')' EatToken)*
Err_067         <-  (!'{' EatToken)*
Err_068         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'finally'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'catch'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_069         <-  (!Identifier EatToken)*
Err_070         <-  (!')' EatToken)*
Err_071         <-  (!('|'  /  Identifier) EatToken)*
Err_072         <-  (!('|'  /  Identifier) EatToken)*
Err_073         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'else'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  Literal  /  Identifier  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_074         <-  (!('short'  /  'long'  /  'int'  /  'float'  /  'final'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  Identifier  /  '@') EatToken)*
Err_075         <-  (!(';'  /  ')') EatToken)*
Err_076         <-  (!'{' EatToken)*
Err_077         <-  (!(';'  /  ','  /  ')') EatToken)*
Err_078         <-  (!(';'  /  ','  /  ')') EatToken)*
Err_079         <-  (!Identifier EatToken)*
Err_080         <-  (!'=' EatToken)*
Err_081         <-  (!('~'  /  'void'  /  'this'  /  'super'  /  'short'  /  'new'  /  'long'  /  'int'  /  'float'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  Literal  /  Identifier  /  '@'  /  '--'  /  '-'  /  '++'  /  '+'  /  '('  /  '!') EatToken)*
Err_082         <-  (!(';'  /  ','  /  ')') EatToken)*
Err_083         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_084         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_085         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_086         <-  (!'(' EatToken)*
Err_087         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_088         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_089         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_090         <-  (!('{'  /  '['  /  '@') EatToken)*
Err_091         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_092         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  AssignmentOperator  /  ']'  /  '['  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_093         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_094         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_095         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_096         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_097         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_098         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_099         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_100         <-  (!':' EatToken)*
Err_101         <-  (!('~'  /  'void'  /  'this'  /  'super'  /  'short'  /  'new'  /  'long'  /  'int'  /  'float'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  Literal  /  Identifier  /  '@'  /  '--'  /  '-'  /  '++'  /  '+'  /  '('  /  '!') EatToken)*
Err_102         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_103         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_104         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_105         <-  (!('}'  /  'query'  /  'instanceof'  /  InfixOperator  /  Identifier  /  ']'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*	

End UPath

Yes: 	AllTests.java
Yes: 	Aluno.java
Yes: 	AnInterface.java
Yes: 	Anotacao.java
Yes: 	ArgumentsErr4.java
Yes: 	ArrayAverage.java
Yes: 	BlockStatementsErr.java
Yes: 	Car.java
Yes: 	Currency.java
Yes: 	DAOAtividade.java
Yes: 	Disciplina.java
Yes: 	ElementValueErr3.java
Yes: 	Empty.java
Yes: 	EqAvaliableErr2.java
Yes: 	Expression.java
Yes: 	HelloWorld.java
Yes: 	IssueController.java
Yes: 	JsonField.java
Yes: 	JsonSerializer.java
Yes: 	LambdaExpressions.java
Yes: 	MultithreadingDemo.java
Yes: 	MyTestRunner.java
Yes: 	MyTests.java
Yes: 	Pessoa.java
Yes: 	Pilha.java
Yes: 	Singleton.java
Yes: 	SortMain.java
Yes: 	Tester.java
Yes: 	UnaryExpressionNotPlusMinusErr.java
Yes: 	Veiculo.java
No: 	AfterBlockErr.java
r = nil lab = fail line: 6 col: 7
No: 	AfterIteratorSymbolErr.java
r = nil lab = fail line: 3 col: 6
No: 	AfterNewErr.java
r = nil lab = fail line: 3 col: 26
No: 	AfterSuperErr.java
r = nil lab = fail line: 3 col: 18
No: 	AfterTryErr.java
r = nil lab = fail line: 3 col: 7
No: 	AnnotationTypeBodyErr.java
r = nil lab = fail line: 2 col: 2
No: 	ArgumentsErr1.java
r = nil lab = fail line: 3 col: 13
No: 	ArgumentsErr2.java
r = nil lab = fail line: 3 col: 10
No: 	ArgumentsErr3.java
r = nil lab = fail line: 3 col: 16
No: 	ArgumentsErr5.java
r = nil lab = fail line: 3 col: 20
No: 	ArrayInitializerErr.java
r = nil lab = fail line: 3 col: 30
No: 	AsteriskErr.java
r = nil lab = fail line: 1 col: 13
No: 	BlockErr1.java
r = nil lab = fail line: 2 col: 9
No: 	BlockErr2.java
r = nil lab = fail line: 4 col: 4
No: 	BlockErr3.java
r = nil lab = fail line: 4 col: 4
No: 	BlockErr4.java
r = nil lab = fail line: 6 col: 23
No: 	BlockErr5.java
r = nil lab = fail line: 7 col: 11
No: 	CLASSErr1.java
r = nil lab = fail line: 3 col: 18
No: 	CLASSErr2.java
r = nil lab = fail line: 3 col: 19
No: 	CaseExpressionErr.java
r = nil lab = fail line: 4 col: 10
No: 	CatchFormalParameterErr.java
r = nil lab = fail line: 6 col: 10
No: 	ClassBodyErr.java
r = nil lab = fail line: 2 col: 2
No: 	ClassCreatorErr1.java
r = nil lab = fail line: 3 col: 19
No: 	ClassCreatorErr2.java
r = nil lab = fail line: 3 col: 24
No: 	ClassTypeErr1.java
r = nil lab = fail line: 1 col: 45
No: 	ClassTypeErr2.java
r = nil lab = fail line: 1 col: 41
No: 	ClassTypeErr3.java
r = nil lab = fail line: 1 col: 44
No: 	ClassTypeErr4.java
r = nil lab = fail line: 6 col: 22
No: 	ColonErr1.java
r = nil lab = fail line: 3 col: 6
No: 	ColonErr2.java
r = nil lab = fail line: 5 col: 5
No: 	ColonErr3.java
r = nil lab = fail line: 8 col: 18
No: 	ColonErr4.java
r = nil lab = fail line: 3 col: 14
No: 	ColonErr5.java
r = nil lab = fail line: 3 col: 24
No: 	CommaAvaliableErr.java
r = nil lab = fail line: 2 col: 32
No: 	ConstructorBodyErr.java
r = nil lab = fail line: 2 col: 23
No: 	CurRBrackErr1.java
r = nil lab = fail line: 2 col: 14
No: 	CurRBrackErr2.java
r = nil lab = fail line: 2 col: 19
No: 	CurRBrackErr3.java
r = nil lab = fail line: 4 col: 1
No: 	CurRBrackErr4.java
r = nil lab = fail line: 4 col: 1
No: 	CurRBrackErr5.java
r = nil lab = fail line: 2 col: 16
No: 	CurRBrackErr6.java
r = nil lab = fail line: 1 col: 23
No: 	CurRBrackErr7.java
r = nil lab = fail line: 3 col: 17
No: 	CurRBrackErr8.java
r = nil lab = fail line: 5 col: 8
No: 	CurRBrackErr9.java
r = nil lab = fail line: 9 col: 3
No: 	DotAvaliableErr.java
r = nil lab = fail line: 3 col: 34
No: 	DotErr1.java
r = nil lab = fail line: 3 col: 13
No: 	ElementValueErr1.java
r = nil lab = fail line: 2 col: 22
No: 	ElementValueErr2.java
r = nil lab = fail line: 1 col: 21
No: 	ElementValueErr4.java
r = nil lab = fail line: 1 col: 14
No: 	ElementValuePairErr.java
r = nil lab = fail line: 1 col: 19
No: 	EndErr.java
r = nil lab = fail line: 5 col: 1
No: 	EnumBodyErr.java
r = nil lab = fail line: 3 col: 1
No: 	EqAvaliableErr1.java
r = nil lab = fail line: 3 col: 13
No: 	EqAvaliableErr3.java
r = nil lab = fail line: 3 col: 15
No: 	EqVerticalBarAvaliableErr.java
r = nil lab = fail line: 6 col: 21
No: 	EqualAmpersandErr.java
r = nil lab = fail line: 3 col: 14
No: 	EqualPlusErr.java
r = nil lab = fail line: 3 col: 14
No: 	ExceptionTypeErr.java
r = nil lab = fail line: 2 col: 46
No: 	ExceptionTypeListErr.java
r = nil lab = fail line: 2 col: 43
No: 	ExpressionErr1.java
r = nil lab = fail line: 3 col: 10
No: 	ExpressionErr10.java
r = nil lab = fail line: 3 col: 11
No: 	ExpressionErr2.java
r = nil lab = fail line: 3 col: 11
No: 	ExpressionErr3.java
r = nil lab = fail line: 3 col: 14
No: 	ExpressionErr4.java
r = nil lab = fail line: 3 col: 17
No: 	ExpressionErr5.java
r = nil lab = fail line: 3 col: 17
No: 	ExpressionErr6.java
r = nil lab = fail line: 3 col: 20
No: 	ExpressionErr7.java
r = nil lab = fail line: 3 col: 35
No: 	ExpressionErr8.java
r = nil lab = fail line: 3 col: 24
No: 	ExpressionErr9.java
r = nil lab = fail line: 3 col: 27
No: 	FormalParameterErr.java
r = nil lab = fail line: 2 col: 30
No: 	GeqErr.java
r = nil lab = fail line: 1 col: 23
No: 	GreaterErr1.java
r = nil lab = fail line: 3 col: 33
No: 	IdErr1.java
r = nil lab = fail line: 1 col: 9
No: 	IdErr10.java
r = nil lab = fail line: 3 col: 14
No: 	IdErr11.java
r = nil lab = fail line: 3 col: 17
No: 	IdErr12.java
r = nil lab = fail line: 3 col: 18
No: 	IdErr13.java
r = nil lab = fail line: 3 col: 12
No: 	IdErr14.java
r = nil lab = fail line: 3 col: 21
No: 	IdErr15.java
r = nil lab = fail line: 3 col: 33
No: 	IdErr16.java
r = nil lab = fail line: 3 col: 14
No: 	IdErr2.java
r = nil lab = fail line: 1 col: 14
No: 	IdErr3.java
r = nil lab = fail line: 1 col: 14
No: 	IdErr4.java
r = nil lab = fail line: 1 col: 13
No: 	IdErr5.java
r = nil lab = fail line: 1 col: 18
No: 	IdErr6.java
r = nil lab = fail line: 1 col: 19
No: 	IdErr7.java
r = nil lab = fail line: 2 col: 6
No: 	IdErr8.java
r = nil lab = fail line: 3 col: 19
No: 	IdErr9.java
r = nil lab = fail line: 3 col: 20
No: 	InterfaceBodyErr.java
r = nil lab = fail line: 3 col: 1
No: 	InterfaceTypeListErr1.java
r = nil lab = fail line: 1 col: 49
No: 	InterfaceTypeListErr2.java
r = nil lab = fail line: 1 col: 50
No: 	InterfaceWordErr.java
r = nil lab = fail line: 1 col: 12
No: 	LParErr1.java
r = nil lab = fail line: 2 col: 25
No: 	LParErr2.java
r = nil lab = fail line: 2 col: 10
No: 	LParErr3.java
r = nil lab = fail line: 2 col: 11
No: 	LParErr4.java
r = nil lab = fail line: 3 col: 7
No: 	LParErr5.java
r = nil lab = fail line: 6 col: 9
No: 	LambdaBodyErr.java
r = nil lab = fail line: 3 col: 17
No: 	MethodBodyErr1.java
r = nil lab = fail line: 4 col: 2
No: 	MethodBodyErr2.java
r = nil lab = fail line: 2 col: 20
No: 	MethodDeclaratorErr.java
r = nil lab = fail line: 2 col: 18
No: 	MinusEqualGreaterErr.java
r = nil lab = fail line: 3 col: 14
No: 	NEWErr1.java
r = nil lab = fail line: 3 col: 18
No: 	ParExpressionErr1.java
r = nil lab = fail line: 3 col: 6
No: 	ParExpressionErr2.java
r = nil lab = fail line: 3 col: 9
No: 	ParExpressionErr3.java
r = nil lab = fail line: 5 col: 9
No: 	ParExpressionErr4.java
r = nil lab = fail line: 3 col: 10
No: 	ParExpressionErr5.java
r = nil lab = fail line: 3 col: 16
No: 	PrimaryQualIdentErr.java
r = nil lab = fail line: 3 col: 16
No: 	QualIdentErr1.java
r = nil lab = fail line: 1 col: 8
No: 	RBrackErr1.java
r = nil lab = fail line: 3 col: 17
No: 	RBrackErr2.java
r = nil lab = fail line: 3 col: 12
No: 	RBrackErr3.java
r = nil lab = fail line: 3 col: 13
No: 	RBrackErr4.java
r = nil lab = fail line: 3 col: 25
No: 	RBrackErr5.java
r = nil lab = fail line: 3 col: 31
No: 	RParErr1.java
r = nil lab = fail line: 2 col: 29
No: 	RParErr10.java
r = nil lab = fail line: 3 col: 33
No: 	RParErr11.java
r = nil lab = fail line: 3 col: 19
No: 	RParErr2.java
r = nil lab = fail line: 2 col: 12
No: 	RParErr3.java
r = nil lab = fail line: 2 col: 12
No: 	RParErr4.java
r = nil lab = fail line: 2 col: 1
No: 	RParErr5.java
r = nil lab = fail line: 3 col: 31
No: 	RParErr6.java
r = nil lab = fail line: 3 col: 18
No: 	RParErr7.java
r = nil lab = fail line: 6 col: 22
No: 	RParErr8.java
r = nil lab = fail line: 3 col: 18
No: 	RParErr9.java
r = nil lab = fail line: 3 col: 19
No: 	ReferenceTypeErr1.java
r = nil lab = fail line: 1 col: 53
No: 	ReferenceTypeErr2.java
r = nil lab = fail line: 1 col: 51
No: 	ReferenceTypeErr3.java
r = nil lab = fail line: 3 col: 22
No: 	ResourceErr.java
r = nil lab = fail line: 3 col: 19
No: 	ResourceListErr.java
r = nil lab = fail line: 3 col: 8
No: 	ResultErr.java
r = nil lab = fail line: 2 col: 13
No: 	SUPERErr1.java
r = nil lab = fail line: 3 col: 13
No: 	SUPERErr2.java
r = nil lab = fail line: 3 col: 16
No: 	SemiErr1.java
r = nil lab = fail line: 1 col: 15
No: 	SemiErr10.java
r = nil lab = fail line: 3 col: 9
No: 	SemiErr11.java
r = nil lab = fail line: 4 col: 2
No: 	SemiErr12.java
r = nil lab = fail line: 4 col: 2
No: 	SemiErr13.java
r = nil lab = fail line: 4 col: 2
No: 	SemiErr14.java
r = nil lab = fail line: 4 col: 2
No: 	SemiErr15.java
r = nil lab = fail line: 4 col: 3
No: 	SemiErr16.java
r = nil lab = fail line: 3 col: 27
No: 	SemiErr2.java
r = nil lab = fail line: 1 col: 14
No: 	SemiErr3.java
r = nil lab = fail line: 4 col: 3
No: 	SemiErr4.java
r = nil lab = fail line: 4 col: 3
No: 	SemiErr5.java
r = nil lab = fail line: 4 col: 5
No: 	SemiErr6.java
r = nil lab = fail line: 4 col: 2
No: 	SemiErr7.java
r = nil lab = fail line: 3 col: 1
No: 	SemiErr8.java
r = nil lab = fail line: 4 col: 2
No: 	SemiErr9.java
r = nil lab = fail line: 6 col: 2
No: 	StatementErr1.java
r = nil lab = fail line: 4 col: 5
No: 	StatementErr2.java
r = nil lab = fail line: 6 col: 5
No: 	StatementErr3.java
r = nil lab = fail line: 4 col: 5
No: 	StatementErr4.java
r = nil lab = fail line: 5 col: 8
No: 	StatementErr5.java
r = nil lab = fail line: 3 col: 8
No: 	StatementErr6.java
r = nil lab = fail line: 4 col: 13
No: 	StatementErr7.java
r = nil lab = fail line: 4 col: 4
No: 	StatementExpressionErr.java
r = nil lab = fail line: 3 col: 15
No: 	SwitchBlockErr.java
r = nil lab = fail line: 4 col: 4
No: 	TypeArgumentErr.java
r = nil lab = fail line: 1 col: 44
No: 	TypeParameterErr.java
r = nil lab = fail line: 1 col: 33
No: 	TypeParameterListErr.java
r = nil lab = fail line: 1 col: 36
No: 	UnaryExpressionErr1.java
r = nil lab = fail line: 3 col: 15
No: 	UnaryExpressionErr2.java
r = nil lab = fail line: 3 col: 15
No: 	UnaryExpressionErr3.java
r = nil lab = fail line: 3 col: 15
No: 	UnaryExpressionErr4.java
r = nil lab = fail line: 3 col: 15
No: 	UnaryExpressionErr5.java
r = nil lab = fail line: 3 col: 20
No: 	UnaryExpressionErr6.java
r = nil lab = fail line: 3 col: 18
No: 	VariableDeclaratorErr.java
r = nil lab = fail line: 2 col: 17
No: 	VariableDeclaratorIdErr1.java
r = nil lab = fail line: 2 col: 31
No: 	VariableDeclaratorIdErr2.java
r = nil lab = fail line: 6 col: 20
No: 	VariableDeclaratorIdErr3.java
r = nil lab = fail line: 3 col: 12
No: 	VariableDeclaratorListErr.java
r = nil lab = fail line: 2 col: 12
No: 	VariableInitializerErr1.java
r = nil lab = fail line: 2 col: 19
No: 	WHILEErr.java
r = nil lab = fail line: 5 col: 3
