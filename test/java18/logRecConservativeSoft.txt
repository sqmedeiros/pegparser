compilation     <-  SKIP compilationUnit !.
basicType       <-  'byte'  /  'short'  /  'int'  /  'long'  /  'char'  /  'float'  /  'double'  /  'boolean'
primitiveType   <-  annotation* basicType
referenceType   <-  primitiveType dim+  /  classType dim*
classType       <-  annotation* Identifier typeArguments? ('.' annotation* Identifier typeArguments?)*
type            <-  primitiveType  /  classType
arrayType       <-  primitiveType dim+  /  classType [dim+]^Err_001
typeVariable    <-  annotation* Identifier
dim             <-  annotation* '[' ']'
typeParameter   <-  typeParameterModifier* Identifier typeBound?
typeParameterModifier <-  annotation
typeBound       <-  'extends' [classType additionalBound*  /  typeVariable]^Err_002
additionalBound <-  'and' [classType]^Err_003
typeArguments   <-  '<' typeArgumentList '>'
typeArgumentList <-  typeArgument (',' [typeArgument]^Err_004)*
typeArgument    <-  referenceType  /  wildcard
wildcard        <-  annotation* '?' wildcardBounds?
wildcardBounds  <-  'extends' [referenceType]^Err_005  /  'super' [referenceType]^Err_006
qualIdent       <-  Identifier ('.' Identifier)*
compilationUnit <-  packageDeclaration? importDeclaration* typeDeclaration*
packageDeclaration <-  packageModifier* 'package' Identifier ('.' Identifier)* ';'
packageModifier <-  annotation
importDeclaration <-  'import' 'static'? qualIdent ('.' '*')? ';'  /  ';'
typeDeclaration <-  classDeclaration  /  interfaceDeclaration  /  ';'
classDeclaration <-  normalClassDeclaration  /  enumDeclaration
normalClassDeclaration <-  classModifier* 'class' Identifier typeParameters? superclass? superinterfaces? classBody
classModifier   <-  annotation  /  'public'  /  'protected'  /  'private'  /  'abstract'  /  'static'  /  'final'  /  'strictfp'
typeParameters  <-  '<' [typeParameterList]^Err_007 ['>']^Err_008
typeParameterList <-  typeParameter (',' [typeParameter]^Err_009)*
superclass      <-  'extends' [classType]^Err_010
superinterfaces <-  'implements' [interfaceTypeList]^Err_011
interfaceTypeList <-  classType (',' [classType]^Err_012)*
classBody       <-  '{' classBodyDeclaration* ['}']^Err_013
classBodyDeclaration <-  classMemberDeclaration  /  instanceInitializer  /  staticInitializer  /  constructorDeclaration
classMemberDeclaration <-  fieldDeclaration  /  methodDeclaration  /  classDeclaration  /  interfaceDeclaration  /  ';'
fieldDeclaration <-  fieldModifier* unannType variableDeclaratorList ';'
variableDeclaratorList <-  variableDeclarator (',' [variableDeclarator]^Err_014)*
variableDeclarator <-  variableDeclaratorId ('=' !'=' [variableInitializer]^Err_015)?
variableDeclaratorId <-  Identifier dim*
variableInitializer <-  expression  /  arrayInitializer
unannClassType  <-  Identifier typeArguments? ('.' annotation* [Identifier]^Err_016 typeArguments?)*
unannType       <-  basicType dim*  /  unannClassType dim*
fieldModifier   <-  annotation  /  'public'  /  'protected'  /  'private'  /  'static'  /  'final'  /  'transient'  /  'volatile'
methodDeclaration <-  methodModifier* methodHeader methodBody
methodHeader    <-  result [methodDeclarator]^Err_017 throws?  /  typeParameters annotation* [result]^Err_018 [methodDeclarator]^Err_019 throws?
methodDeclarator <-  Identifier ['(']^Err_020 formalParameterList? [')']^Err_021 dim*
formalParameterList <-  (receiverParameter  /  formalParameter) (',' [formalParameter]^Err_022)*
formalParameter <-  variableModifier* unannType variableDeclaratorId  /  variableModifier* unannType annotation* ['...']^Err_023 [variableDeclaratorId]^Err_024 !','
variableModifier <-  annotation  /  'final'
receiverParameter <-  variableModifier* unannType (Identifier ['.']^Err_025)? ['this']^Err_026
result          <-  unannType  /  'void'
methodModifier  <-  annotation  /  'public'  /  'protected'  /  'private'  /  'abstract'  /  'static'  /  'final'  /  'synchronized'  /  'native'  /  'stictfp'
throws          <-  'throws' [exceptionTypeList]^Err_027
exceptionTypeList <-  exceptionType (',' [exceptionType]^Err_028)*
exceptionType   <-  classType  /  typeVariable
methodBody      <-  block  /  ';'
instanceInitializer <-  block
staticInitializer <-  'static' [block]^Err_029
constructorDeclaration <-  constructorModifier* constructorDeclarator throws? [constructorBody]^Err_030
constructorDeclarator <-  typeParameters? Identifier ['(']^Err_031 formalParameterList? [')']^Err_032
constructorModifier <-  annotation  /  'public'  /  'protected'  /  'private'
constructorBody <-  '{' explicitConstructorInvocation? blockStatements? ['}']^Err_033
explicitConstructorInvocation <-  typeArguments? 'this' arguments ';'  /  typeArguments? 'super' arguments ';'  /  primary '.' typeArguments? 'super' arguments ';'  /  qualIdent '.' typeArguments? 'super' arguments ';'
enumDeclaration <-  classModifier* 'enum' Identifier superinterfaces? enumBody
enumBody        <-  '{' enumConstantList? ','? enumBodyDeclarations? ['}']^Err_034
enumConstantList <-  enumConstant (',' enumConstant)*
enumConstant    <-  enumConstantModifier* Identifier arguments? classBody?
enumConstantModifier <-  annotation
enumBodyDeclarations <-  ';' classBodyDeclaration*
interfaceDeclaration <-  normalInterfaceDeclaration  /  annotationTypeDeclaration
normalInterfaceDeclaration <-  interfaceModifier* 'interface' Identifier typeParameters? extendsInterfaces? interfaceBody
interfaceModifier <-  annotation  /  'public'  /  'protected'  /  'private'  /  'abstract'  /  'static'  /  'strictfp'
extendsInterfaces <-  'extends' [interfaceTypeList]^Err_035
interfaceBody   <-  '{' interfaceMemberDeclaration* ['}']^Err_036
interfaceMemberDeclaration <-  constantDeclaration  /  interfaceMethodDeclaration  /  classDeclaration  /  interfaceDeclaration  /  ';'
constantDeclaration <-  constantModifier* unannType variableDeclaratorList ';'
constantModifier <-  annotation  /  'public'  /  'static'  /  'final'
interfaceMethodDeclaration <-  interfaceMethodModifier* methodHeader methodBody
interfaceMethodModifier <-  annotation  /  'public'  /  'abstract'  /  'default'  /  'static'  /  'strictfp'
annotationTypeDeclaration <-  interfaceModifier* '@' 'interface' Identifier annotationTypeBody
annotationTypeBody <-  '{' annotationTypeMemberDeclaration* ['}']^Err_037
annotationTypeMemberDeclaration <-  annotationTypeElementDeclaration  /  constantDeclaration  /  classDeclaration  /  interfaceDeclaration  /  ';'
annotationTypeElementDeclaration <-  annotationTypeElementModifier* unannType [Identifier]^Err_038 ['(']^Err_039 [')']^Err_040 dim* defaultValue? [';']^Err_041
annotationTypeElementModifier <-  annotation  /  'public'  /  'abstract'
defaultValue    <-  'default' [elementValue]^Err_042
annotation      <-  '@' (normalAnnotation  /  singleElementAnnotation  /  markerAnnotation)
normalAnnotation <-  qualIdent '(' elementValuePairList* ')'
elementValuePairList <-  elementValuePair (',' [elementValuePair]^Err_043)*
elementValuePair <-  Identifier ['=']^Err_044 !'=' [elementValue]^Err_045
elementValue    <-  conditionalExpression  /  elementValueArrayInitializer  /  annotation
elementValueArrayInitializer <-  '{' elementValueList? ','? '}'
elementValueList <-  elementValue (',' elementValue)*
markerAnnotation <-  qualIdent
singleElementAnnotation <-  qualIdent '(' elementValue ')'
arrayInitializer <-  '{' variableInitializerList? ','? ['}']^Err_046
variableInitializerList <-  variableInitializer (',' variableInitializer)*
block           <-  '{' blockStatements? '}'
blockStatements <-  blockStatement blockStatement*
blockStatement  <-  localVariableDeclarationStatement  /  classDeclaration  /  statement
localVariableDeclarationStatement <-  localVariableDeclaration [';']^Err_047
localVariableDeclaration <-  variableModifier* unannType variableDeclaratorList
statement       <-  block  /  'if' parExpression statement ('else' statement)?  /  basicForStatement  /  enhancedForStatement  /  'while' parExpression statement  /  'do' statement 'while' parExpression ';'  /  tryStatement  /  'switch' parExpression switchBlock  /  'synchronized' parExpression block  /  'return' expression? ';'  /  'throw' expression ';'  /  'break' Identifier? ';'  /  'continue' Identifier? ';'  /  'assert' expression (':' expression)? ';'  /  ';'  /  statementExpression ';'  /  Identifier ':' statement
statementExpression <-  assignment  /  ('++'  /  '--') (primary  /  qualIdent)  /  (primary  /  qualIdent) ('++'  /  '--')  /  primary
switchBlock     <-  '{' switchBlockStatementGroup* switchLabel* '}'
switchBlockStatementGroup <-  switchLabels blockStatements
switchLabels    <-  switchLabel switchLabel*
switchLabel     <-  'case' [constantExpression  /  enumConstantName]^Err_048 [':']^Err_049  /  'default' [':']^Err_050
enumConstantName <-  Identifier
basicForStatement <-  'for' '(' forInit? ';' expression? ';' forUpdate? ')' statement
forInit         <-  localVariableDeclaration  /  statementExpressionList
forUpdate       <-  statementExpressionList
statementExpressionList <-  statementExpression (',' [statementExpression]^Err_051)*
enhancedForStatement <-  'for' '(' variableModifier* unannType variableDeclaratorId ':' expression ')' statement
tryStatement    <-  'try' (block (catchClause* finally  /  catchClause+)  /  resourceSpecification block catchClause* finally?)
catchClause     <-  'catch' '(' catchFormalParameter ')' block
catchFormalParameter <-  variableModifier* catchType [variableDeclaratorId]^Err_052
catchType       <-  unannClassType ('|' ![=|] [classType]^Err_053)*
finally         <-  'finally' block
resourceSpecification <-  '(' [resourceList]^Err_054 ';'? [')']^Err_055
resourceList    <-  resource (',' [resource]^Err_056)*
resource        <-  variableModifier* unannType [variableDeclaratorId]^Err_057 ['=']^Err_058 !'=' [expression]^Err_059
expression      <-  lambdaExpression  /  assignmentExpression
primary         <-  primaryBase primaryRest*
primaryBase     <-  'this'  /  Literal  /  parExpression  /  'super' ['.' typeArguments? Identifier arguments  /  '.' [Identifier]^Err_060  /  '::' typeArguments? [Identifier]^Err_061]^Err_062  /  'new' [classCreator  /  arrayCreator]^Err_063  /  qualIdent ('[' expression ']'  /  arguments  /  '.' ('this'  /  'new' classCreator  /  typeArguments Identifier arguments  /  'super' '.' typeArguments? Identifier arguments  /  'super' '.' Identifier  /  'super' '::' typeArguments? Identifier arguments)  /  ('[' ']')* '.' 'class'  /  '::' typeArguments? Identifier)  /  'void' ['.']^Err_064 ['class']^Err_065  /  basicType ('[' ']')* '.' 'class'  /  referenceType '::' typeArguments? 'new'  /  arrayType ['::']^Err_066 ['new']^Err_067
primaryRest     <-  '.' (typeArguments? Identifier arguments  /  Identifier  /  'new' classCreator)  /  '[' expression ']'  /  '::' typeArguments? Identifier
parExpression   <-  '(' expression ')'
classCreator    <-  typeArguments? annotation* classTypeWithDiamond arguments classBody?
classTypeWithDiamond <-  annotation* Identifier typeArgumentsOrDiamond? ('.' annotation* [Identifier]^Err_068 typeArgumentsOrDiamond?)*
typeArgumentsOrDiamond <-  typeArguments  /  '<' ['>']^Err_069 !'.'
arrayCreator    <-  type dimExpr+ dim*  /  type [dim+]^Err_070 [arrayInitializer]^Err_071
dimExpr         <-  annotation* '[' expression ']'
arguments       <-  '(' argumentList? ')'
argumentList    <-  expression (',' [expression]^Err_072)*
unaryExpression <-  ('++'  /  '--') (primary  /  qualIdent)  /  '+' ![=+] unaryExpression  /  '-' ![-=>] unaryExpression  /  unaryExpressionNotPlusMinus
unaryExpressionNotPlusMinus <-  '~' [unaryExpression]^Err_073  /  '!' ![=&] [unaryExpression]^Err_074  /  castExpression  /  (primary  /  qualIdent) ('++'  /  '--')?
castExpression  <-  '(' primitiveType ')' unaryExpression  /  '(' referenceType additionalBound* ')' lambdaExpression  /  '(' [referenceType]^Err_075 additionalBound* [')']^Err_076 [unaryExpressionNotPlusMinus]^Err_077
infixExpression <-  unaryExpression (InfixOperator unaryExpression  /  'instanceof' referenceType)*
InfixOperator   <-  '||'  /  '&&'  /  '|' ![=|]  /  '^' ![=]  /  '&' ![=&]  /  '=='  /  '!='  /  '<' ![=<]  /  '>' ![=>]  /  '<='  /  '>='  /  '<<' ![=]  /  '>>' ![=>]  /  '>>>' ![=]  /  '+' ![=+]  /  '-' ![-=>]  /  '*' ![=]  /  '/' ![=]  /  '%' ![=]
conditionalExpression <-  infixExpression ('query' expression ':' expression)*
assignmentExpression <-  assignment  /  conditionalExpression
assignment      <-  leftHandSide AssignmentOperator expression
leftHandSide    <-  primary  /  qualIdent
AssignmentOperator <-  '=' ![=]  /  '*='  /  '/='  /  '%='  /  '+='  /  '-='  /  '<<='  /  '>>='  /  '>>>='  /  '&='  /  '^='  /  '|='
lambdaExpression <-  lambdaParameters '->' lambdaBody
lambdaParameters <-  Identifier  /  '(' formalParameterList? ')'  /  '(' [inferredFormalParameterList]^Err_078 [')']^Err_079
inferredFormalParameterList <-  Identifier (',' [Identifier]^Err_080)*
lambdaBody      <-  expression  /  block
constantExpression <-  expression
Identifier      <-  !keywords [a-zA-Z_] [a-zA-Z_$0-9]*
keywords        <-  'abstract'  /  'assert'  /  'boolean'  /  'break'  /  'byte'  /  'case'  /  'catch'  /  'char'  /  'class'  /  'const'  /  'continue'  /  'default'  /  'double'  /  'do'  /  'else'  /  'enum'  /  'extends'  /  'false'  /  'finally'  /  'final'  /  'float'  /  'for'  /  'goto'  /  'if'  /  'implements'  /  'import'  /  'interface'  /  'int'  /  'instanceof'  /  'long'  /  'native'  /  'new'  /  'null'  /  'package'  /  'private'  /  'protected'  /  'public'  /  'return'  /  'short'  /  'static'  /  'strictfp'  /  'super'  /  'switch'  /  'synchronized'  /  'this'  /  'throws'  /  'throw'  /  'transient'  /  'true'  /  'try'  /  'void'  /  'volatile'  /  'while'
Literal         <-  FloatLiteral  /  IntegerLiteral  /  BooleanLiteral  /  CharLiteral  /  StringLiteral  /  NullLiteral
IntegerLiteral  <-  (HexNumeral  /  BinaryNumeral  /  OctalNumeral  /  DecimalNumeral) [lL]?
DecimalNumeral  <-  '0'  /  [1-9] ([_]* [0-9])*
HexNumeral      <-  ('0x'  /  '0X') HexDigits
OctalNumeral    <-  '0' ([_]* [0-7])+
BinaryNumeral   <-  ('0b'  /  '0B') [01] ([_]* [01])*
FloatLiteral    <-  HexaDecimalFloatingPointLiteral  /  DecimalFloatingPointLiteral
DecimalFloatingPointLiteral <-  Digits '.' Digits? Exponent? [fFdD]?  /  '.' Digits Exponent? [fFdD]?  /  Digits Exponent [fFdD]?  /  Digits Exponent? [fFdD]
Exponent        <-  [eE] [-+]? Digits
HexaDecimalFloatingPointLiteral <-  HexSignificand BinaryExponent [fFdD]?
HexSignificand  <-  ('0x'  /  '0X') HexDigits? '.' HexDigits  /  HexNumeral '.'?
HexDigits       <-  HexDigit ([_]* HexDigit)*
HexDigit        <-  [a-f]  /  [A-F]  /  [0-9]
BinaryExponent  <-  [pP] [-+]? Digits
Digits          <-  [0-9] ([_]* [0-9])*
BooleanLiteral  <-  'true'  /  'false'
CharLiteral     <-  ''' (%nl  /  !''' .) '''
StringLiteral   <-  '"' (%nl  /  !'"' .)* '"'
NullLiteral     <-  'null'
Token           <-  'super'  /  '>>>'  /  'else'  /  'class'  /  'BinaryNumeral'  /  'BinaryExponent'  /  '['  /  'const'  /  'query'  /  'synchronized'  /  '0x'  /  '<<'  /  'DecimalNumeral'  /  'short'  /  'HexDigits'  /  'default'  /  '&='  /  '-='  /  '+='  /  '*='  /  '}'  /  '|'  /  '{'  /  '%='  /  '~'  /  'HexaDecimalFloatingPointLiteral'  /  'abstract'  /  'throws'  /  '=='  /  '<='  /  'byte'  /  '/='  /  '&&'  /  '%'  /  '"'  /  '||'  /  '('  /  'HexDigit'  /  '&'  /  '>='  /  '!'  /  'new'  /  'finally'  /  'native'  /  'switch'  /  '->'  /  'protected'  /  'extends'  /  '='  /  '<'  /  ';'  /  ':'  /  '*/'  /  '@'  /  '?'  /  '>'  /  '|='  /  '-'  /  ','  /  '+'  /  '*'  /  '0'  /  '...'  /  '.'  /  'Token'  /  'and'  /  'int'  /  'IntegerLiteral'  /  'Exponent'  /  'char'  /  'instanceof'  /  'false'  /  'interface'  /  'import'  /  'CharLiteral'  /  'DecimalFloatingPointLiteral'  /  'final'  /  'catch'  /  'float'  /  'BooleanLiteral'  /  'if'  /  'boolean'  /  'AssignmentOperator'  /  'COMMENT'  /  '''  /  '//'  /  'NullLiteral'  /  'null'  /  'StringLiteral'  /  '/*'  /  'Digits'  /  '--'  /  'HexNumeral'  /  '<<='  /  ']'  /  'goto'  /  '::'  /  '^'  /  'for'  /  'FloatLiteral'  /  'throw'  /  'double'  /  'break'  /  '0B'  /  'long'  /  'OctalNumeral'  /  '!='  /  '0X'  /  'return'  /  'transient'  /  'private'  /  'Literal'  /  'this'  /  'true'  /  'void'  /  'implements'  /  '++'  /  'case'  /  'public'  /  'try'  /  'Identifier'  /  '>>>='  /  '^='  /  ')'  /  'volatile'  /  'while'  /  'InfixOperator'  /  '/'  /  'package'  /  'static'  /  'assert'  /  '>>'  /  '0b'  /  'stictfp'  /  'strictfp'  /  'do'  /  '>>='  /  'HexSignificand'  /  'continue'  /  'enum'
COMMENT         <-  '//' (!%nl .)*  /  '/*' (!'*/' .)* '*/'
SKIP            <-  ([ 	

]  /  COMMENT)*
Token           <-  'super'  /  '>>>'  /  'else'  /  'class'  /  'BinaryNumeral'  /  'BinaryExponent'  /  '['  /  'const'  /  'query'  /  'synchronized'  /  '0x'  /  '<<'  /  'DecimalNumeral'  /  'short'  /  'HexDigits'  /  'default'  /  '&='  /  '-='  /  '+='  /  '*='  /  '}'  /  '|'  /  '{'  /  '%='  /  '~'  /  'HexaDecimalFloatingPointLiteral'  /  'abstract'  /  'throws'  /  '=='  /  '<='  /  'byte'  /  '/='  /  '&&'  /  '%'  /  '"'  /  '||'  /  '('  /  'HexDigit'  /  '&'  /  '>='  /  '!'  /  'new'  /  'finally'  /  'native'  /  'switch'  /  '->'  /  'protected'  /  'extends'  /  '='  /  '<'  /  ';'  /  ':'  /  '*/'  /  '@'  /  '?'  /  '>'  /  '|='  /  '-'  /  ','  /  '+'  /  '*'  /  '0'  /  '...'  /  '.'  /  'Token'  /  'and'  /  'int'  /  'IntegerLiteral'  /  'Exponent'  /  'char'  /  'instanceof'  /  'false'  /  'interface'  /  'import'  /  'CharLiteral'  /  'DecimalFloatingPointLiteral'  /  'final'  /  'catch'  /  'float'  /  'BooleanLiteral'  /  'if'  /  'boolean'  /  'AssignmentOperator'  /  'COMMENT'  /  '''  /  '//'  /  'NullLiteral'  /  'null'  /  'StringLiteral'  /  '/*'  /  'Digits'  /  '--'  /  'HexNumeral'  /  '<<='  /  ']'  /  'goto'  /  '::'  /  '^'  /  'for'  /  'FloatLiteral'  /  'throw'  /  'double'  /  'break'  /  '0B'  /  'long'  /  'OctalNumeral'  /  '!='  /  '0X'  /  'return'  /  'transient'  /  'private'  /  'Literal'  /  'this'  /  'true'  /  'void'  /  'implements'  /  '++'  /  'case'  /  'public'  /  'try'  /  'Identifier'  /  '>>>='  /  '^='  /  ')'  /  'volatile'  /  'while'  /  'InfixOperator'  /  '/'  /  'package'  /  'static'  /  'assert'  /  '>>'  /  '0b'  /  'stictfp'  /  'strictfp'  /  'do'  /  '>>='  /  'HexSignificand'  /  'continue'  /  'enum'
EatToken        <-  (Token  /  (!SKIP .)+) SKIP
Err_001         <-  (!'::' EatToken)*
Err_002         <-  (!('>'  /  ',') EatToken)*
Err_003         <-  (!('and'  /  '>'  /  ','  /  ')') EatToken)*
Err_004         <-  (!'>' EatToken)*
Err_005         <-  (!('>'  /  ',') EatToken)*
Err_006         <-  (!('>'  /  ',') EatToken)*
Err_007         <-  (!'>' EatToken)*
Err_008         <-  (!('{'  /  'void'  /  'short'  /  'long'  /  'int'  /  'implements'  /  'float'  /  'extends'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  'Identifier'  /  '@') EatToken)*
Err_009         <-  (!'>' EatToken)*
Err_010         <-  (!('{'  /  'implements') EatToken)*
Err_011         <-  (!'{' EatToken)*
Err_012         <-  (!'{' EatToken)*
Err_013         <-  (!('}'  /  '{'  /  'while'  /  'volatile'  /  'void'  /  'try'  /  'transient'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'return'  /  'query'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'instanceof'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  ']'  /  '['  /  'Literal'  /  'InfixOperator'  /  'Identifier'  /  'AssignmentOperator'  /  '@'  /  '<'  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')'  /  '('  /  !.) EatToken)*
Err_014         <-  (!';' EatToken)*
Err_015         <-  (!(';'  /  ',') EatToken)*
Err_016         <-  (!('|'  /  'this'  /  '['  /  'Identifier'  /  '@'  /  '<'  /  '...') EatToken)*
Err_017         <-  (!('{'  /  'throws'  /  ';') EatToken)*
Err_018         <-  (!'Identifier' EatToken)*
Err_019         <-  (!('{'  /  'throws'  /  ';') EatToken)*
Err_020         <-  (!('short'  /  'long'  /  'int'  /  'float'  /  'final'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  'Identifier'  /  '@'  /  ')') EatToken)*
Err_021         <-  (!('{'  /  'throws'  /  '['  /  '@'  /  ';') EatToken)*
Err_022         <-  (!')' EatToken)*
Err_023         <-  (!'Identifier' EatToken)*
Err_024         <-  (!(','  /  ')') EatToken)*
Err_025         <-  (!'this' EatToken)*
Err_026         <-  (!(','  /  ')') EatToken)*
Err_027         <-  (!('{'  /  ';') EatToken)*
Err_028         <-  (!('{'  /  ';') EatToken)*
Err_029         <-  (!('}'  /  '{'  /  'volatile'  /  'void'  /  'transient'  /  'synchronized'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  'Identifier'  /  '@'  /  '<'  /  ';') EatToken)*
Err_030         <-  (!('}'  /  '{'  /  'volatile'  /  'void'  /  'transient'  /  'synchronized'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  'Identifier'  /  '@'  /  '<'  /  ';') EatToken)*
Err_031         <-  (!('short'  /  'long'  /  'int'  /  'float'  /  'final'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  'Identifier'  /  '@'  /  ')') EatToken)*
Err_032         <-  (!('{'  /  'throws') EatToken)*
Err_033         <-  (!('}'  /  '{'  /  'volatile'  /  'void'  /  'transient'  /  'synchronized'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  'Identifier'  /  '@'  /  '<'  /  ';') EatToken)*
Err_034         <-  (!('}'  /  '{'  /  'while'  /  'volatile'  /  'void'  /  'try'  /  'transient'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  'Literal'  /  'Identifier'  /  '@'  /  '<'  /  ';'  /  '--'  /  '++'  /  '('  /  !.) EatToken)*
Err_035         <-  (!'{' EatToken)*
Err_036         <-  (!('}'  /  '{'  /  'volatile'  /  'void'  /  'transient'  /  'synchronized'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'default'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  'Identifier'  /  '@'  /  '<'  /  ';'  /  !.) EatToken)*
Err_037         <-  (!('}'  /  '{'  /  'volatile'  /  'void'  /  'transient'  /  'synchronized'  /  'strictfp'  /  'stictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'native'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'default'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  'Identifier'  /  '@'  /  '<'  /  ';'  /  !.) EatToken)*
Err_038         <-  (!'(' EatToken)*
Err_039         <-  (!')' EatToken)*
Err_040         <-  (!('default'  /  '['  /  '@'  /  ';') EatToken)*
Err_041         <-  (!('}'  /  'strictfp'  /  'static'  /  'short'  /  'public'  /  'protected'  /  'private'  /  'long'  /  'interface'  /  'int'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'class'  /  'char'  /  'byte'  /  'boolean'  /  'abstract'  /  'Identifier'  /  '@'  /  ';') EatToken)*
Err_042         <-  (!';' EatToken)*
Err_043         <-  (!('Identifier'  /  ')') EatToken)*
Err_044         <-  (!('~'  /  '{'  /  'void'  /  'this'  /  'super'  /  'short'  /  'new'  /  'long'  /  'int'  /  'float'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  'Literal'  /  'Identifier'  /  '@'  /  '--'  /  '-'  /  '++'  /  '+'  /  '('  /  '!') EatToken)*
Err_045         <-  (!('Identifier'  /  ','  /  ')') EatToken)*
Err_046         <-  (!('}'  /  'query'  /  'instanceof'  /  ']'  /  '['  /  'InfixOperator'  /  'Identifier'  /  'AssignmentOperator'  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_047         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  'Literal'  /  'Identifier'  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_048         <-  (!':' EatToken)*
Err_049         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  'Literal'  /  'Identifier'  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_050         <-  (!('}'  /  '{'  /  'while'  /  'void'  /  'try'  /  'throw'  /  'this'  /  'synchronized'  /  'switch'  /  'super'  /  'strictfp'  /  'static'  /  'short'  /  'return'  /  'public'  /  'protected'  /  'private'  /  'new'  /  'long'  /  'int'  /  'if'  /  'for'  /  'float'  /  'final'  /  'enum'  /  'double'  /  'do'  /  'default'  /  'continue'  /  'class'  /  'char'  /  'case'  /  'byte'  /  'break'  /  'boolean'  /  'assert'  /  'abstract'  /  'Literal'  /  'Identifier'  /  '@'  /  ';'  /  '--'  /  '++'  /  '(') EatToken)*
Err_051         <-  (!(';'  /  ')') EatToken)*
Err_052         <-  (!')' EatToken)*
Err_053         <-  (!'Identifier' EatToken)*
Err_054         <-  (!(';'  /  ')') EatToken)*
Err_055         <-  (!'{' EatToken)*
Err_056         <-  (!(';'  /  ')') EatToken)*
Err_057         <-  (!'=' EatToken)*
Err_058         <-  (!('~'  /  'void'  /  'this'  /  'super'  /  'short'  /  'new'  /  'long'  /  'int'  /  'float'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  'Literal'  /  'Identifier'  /  '@'  /  '--'  /  '-'  /  '++'  /  '+'  /  '('  /  '!') EatToken)*
Err_059         <-  (!(';'  /  ','  /  ')') EatToken)*
Err_060         <-  (!('}'  /  'query'  /  'instanceof'  /  ']'  /  '['  /  'InfixOperator'  /  'Identifier'  /  'AssignmentOperator'  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_061         <-  (!('}'  /  'query'  /  'instanceof'  /  ']'  /  '['  /  'InfixOperator'  /  'Identifier'  /  'AssignmentOperator'  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_062         <-  (!('}'  /  'query'  /  'instanceof'  /  ']'  /  '['  /  'InfixOperator'  /  'Identifier'  /  'AssignmentOperator'  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_063         <-  (!('}'  /  'query'  /  'instanceof'  /  ']'  /  '['  /  'InfixOperator'  /  'Identifier'  /  'AssignmentOperator'  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_064         <-  (!'class' EatToken)*
Err_065         <-  (!('}'  /  'query'  /  'instanceof'  /  ']'  /  '['  /  'InfixOperator'  /  'Identifier'  /  'AssignmentOperator'  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_066         <-  (!'new' EatToken)*
Err_067         <-  (!('}'  /  'query'  /  'instanceof'  /  ']'  /  '['  /  'InfixOperator'  /  'Identifier'  /  'AssignmentOperator'  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_068         <-  (!('<'  /  '(') EatToken)*
Err_069         <-  (!('.'  /  '(') EatToken)*
Err_070         <-  (!'{' EatToken)*
Err_071         <-  (!('}'  /  'query'  /  'instanceof'  /  ']'  /  '['  /  'InfixOperator'  /  'Identifier'  /  'AssignmentOperator'  /  ';'  /  '::'  /  ':'  /  '.'  /  '--'  /  ','  /  '++'  /  ')') EatToken)*
Err_072         <-  (!')' EatToken)*
Err_073         <-  (!('}'  /  'query'  /  'instanceof'  /  ']'  /  'InfixOperator'  /  'Identifier'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_074         <-  (!('}'  /  'query'  /  'instanceof'  /  ']'  /  'InfixOperator'  /  'Identifier'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_075         <-  (!('and'  /  ')') EatToken)*
Err_076         <-  (!('~'  /  'void'  /  'this'  /  'super'  /  'short'  /  'new'  /  'long'  /  'int'  /  'float'  /  'double'  /  'char'  /  'byte'  /  'boolean'  /  'Literal'  /  'Identifier'  /  '@'  /  '('  /  '!') EatToken)*
Err_077         <-  (!('}'  /  'query'  /  'instanceof'  /  ']'  /  'InfixOperator'  /  'Identifier'  /  ';'  /  ':'  /  ','  /  ')') EatToken)*
Err_078         <-  (!')' EatToken)*
Err_079         <-  (!'->' EatToken)*
Err_080         <-  (!')' EatToken)*