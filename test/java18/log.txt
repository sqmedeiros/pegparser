Yes: 	AllTests.java
Yes: 	Aluno.java
Yes: 	AnInterface.java
Yes: 	Anotacao.java
Yes: 	ArgumentsErr4.java
Yes: 	ArrayAverage.java
Yes: 	BlockStatementsErr.java
Yes: 	Car.java
Yes: 	Currency.java
Yes: 	DAOAtividade.java
Yes: 	Disciplina.java
Yes: 	ElementValueErr3.java
Yes: 	Empty.java
Yes: 	EqAvaliableErr2.java
Yes: 	Expression.java
Yes: 	HelloWorld.java
Yes: 	IssueController.java
Yes: 	JsonField.java
Yes: 	JsonSerializer.java
Yes: 	LambdaExpressions.java
Yes: 	MultithreadingDemo.java
Yes: 	MyTestRunner.java
Yes: 	MyTests.java
Yes: 	Pessoa.java
Yes: 	Pilha.java
Yes: 	Singleton.java
Yes: 	SortMain.java
Yes: 	Tester.java
Yes: 	UnaryExpressionNotPlusMinusErr.java
Yes: 	Veiculo.java
No: 	AfterBlockErr.java
public class AfterBlockErr {
	public static void main(String[] args) {
		try {
			v[i] = 4;
		}
		catc(Expretion e) {}
	}
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "AfterBlockErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{tryStatement{"try", block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"4", }, }, ";", }, "}", }, "NONE", }, statement{"catc", "NONE", "NONE", }, }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	AfterIteratorSymbolErr.java
public class AfterIteratorSymbolErr {
	public static void main(String[] args) {
		++@;
		i = i+1;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "AfterIteratorSymbolErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{statement{statementExpression{"++", "NONE", }, ";", }, statement{assignment{qualIdent{"i", }, "=", infixExpression{qualIdent{"i", }, "+", primaryBase{"1", }, }, }, ";", }, }, "}", }, }, "}", }, }

No: 	AfterNewErr.java
public class AfterNewErr {
    public static void main(String[] args) {
        String[] a = new .String[];
        i = i+1;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "AfterNewErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{localVariableDeclarationStatement{localVariableDeclaration{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclarator{variableDeclaratorId{"a", }, "=", primary{primaryBase{"new", "NONE", }, primaryRest{".", "String", }, primaryRest{"[", "NONE", "]", }, }, }, }, ";", }, statement{assignment{qualIdent{"i", }, "=", infixExpression{qualIdent{"i", }, "+", primaryBase{"1", }, }, }, ";", }, }, "}", }, }, "}", }, }

No: 	AfterSuperErr.java
public class AfterSuperErr {
    public static void main(String[] args) {
        a = super;
        i = i+1;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "AfterSuperErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{statement{assignment{qualIdent{"a", }, "=", primaryBase{"super", "NONE", }, }, ";", }, statement{assignment{qualIdent{"i", }, "=", infixExpression{qualIdent{"i", }, "+", primaryBase{"1", }, }, }, ";", }, }, "}", }, }, "}", }, }

No: 	AfterTryErr.java
public class AfterTryErr {
	public static void main(String[] args) {
		try int i = 3) { 
			v[i] = 2;
		}
		catch(Expretion e) {}

		i = i+1;
	}
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "AfterTryErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{tryStatement{"try", "NONE", }, localVariableDeclarationStatement{localVariableDeclaration{basicType{"int", }, variableDeclarator{variableDeclaratorId{"i", }, "=", primaryBase{"3", }, }, }, "NONE", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	AnnotationTypeBodyErr.java
public @interface AnnotationTypeBodyErr 
	public int a();
}compilation{annotationTypeDeclaration{interfaceModifier{"public", }, "@", "interface", "AnnotationTypeBodyErr", "NONE", }, "NONE", }

No: 	ArgumentsErr1.java
public class ArgumentsErr1 {
	public ArgumentsErr1() {
		this.super);
		i = i+1;
	}

	public void print() {
		System.out.println("Ola");
	}

	public void print2() {
		System.out.println("Ola");
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ArgumentsErr1", classBody{"{", constructorDeclaration{constructorModifier{"public", }, constructorDeclarator{"ArgumentsErr1", "(", ")", }, constructorBody{"{", "NONE", }, }, classMemberDeclaration{";", }, constructorDeclaration{constructorDeclarator{"i", "NONE", "NONE", }, constructorBody{"{", statement{primaryBase{qualIdent{"System", ".", "out", ".", "println", }, arguments{"(", primaryBase{""Ola"", }, ")", }, }, ";", }, "}", }, }, methodDeclaration{methodModifier{"public", }, methodHeader{result{"void", }, methodDeclarator{"print2", "(", ")", }, }, block{"{", statement{primaryBase{qualIdent{"System", ".", "out", ".", "println", }, arguments{"(", primaryBase{""Ola"", }, ")", }, }, ";", }, "}", }, }, "}", }, }

No: 	ArgumentsErr2.java
public class ArgumentsErr2 {
	public ArgumentsErr2() {
		a.super);
		i = i+1;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ArgumentsErr2", classBody{"{", constructorDeclaration{constructorModifier{"public", }, constructorDeclarator{"ArgumentsErr2", "(", ")", }, constructorBody{"{", explicitConstructorInvocation{qualIdent{"a", }, ".", "super", "NONE", ";", }, statement{assignment{qualIdent{"i", }, "=", infixExpression{qualIdent{"i", }, "+", primaryBase{"1", }, }, }, ";", }, "}", }, }, "}", }, }

No: 	ArgumentsErr3.java
public class ArgumentsErr3 {
    public static void main(String[] args) {
        a.<?>b = 2;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "ArgumentsErr3", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", statement{assignment{qualIdent{"b", }, "=", primaryBase{"2", }, }, ";", }, }, "}", }, }, "}", }, }

No: 	ArgumentsErr5.java
public class ArgumentsErr5 {
    public static void main(String[] args) {
        a.super::b = 2;
        i = i+1;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "ArgumentsErr5", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{statement{"a", "NONE", statement{assignment{primaryBase{"super", "::", "b", }, "=", primaryBase{"2", }, }, ";", }, }, statement{assignment{qualIdent{"i", }, "=", infixExpression{qualIdent{"i", }, "+", primaryBase{"1", }, }, }, ";", }, }, "}", }, }, "}", }, }

No: 	ArrayInitializerErr.java
public class ArrayInitializerErr {
    public static void main(String[] args) {
        Integer i = new int[]1,2,3};
        i = i++;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "ArrayInitializerErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{localVariableDeclarationStatement{localVariableDeclaration{unannClassType{"Integer", }, variableDeclaratorList{variableDeclarator{variableDeclaratorId{"i", }, "=", primaryBase{"new", arrayCreator{basicType{"int", }, dim{"[", "]", }, "NONE", }, }, }, ",", "NONE", }, }, ";", }, statement{assignment{qualIdent{"i", }, "=", unaryExpressionNotPlusMinus{qualIdent{"i", }, "++", }, }, ";", }, }, "}", }, }, "}", }, }

No: 	AsteriskErr.java
import test.;importDeclaration{"import", qualIdent{"test", }, ".", "NONE", ";", }

No: 	BlockErr1.java
public class BlockErr1 {
	static }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "BlockErr1", classBody{"{", staticInitializer{"static", "NONE", }, "}", }, }, "NONE", }

No: 	BlockErr2.java
public class BlockErr2 {
	public static void main(String[] args) {
		synchronized (a == 1) 
			System.out.println("Ok\n");
		}
	}

	public print() {
		System.out.println("Hi");
	}
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "BlockErr2", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{statement{"synchronized", parExpression{"(", infixExpression{qualIdent{"a", }, "==", primaryBase{"1", }, }, ")", }, "NONE", }, statement{primaryBase{qualIdent{"System", ".", "out", ".", "println", }, arguments{"(", primaryBase{""Ok\n"", }, ")", }, }, ";", }, }, "}", }, }, "}", }, }, "NONE", }

No: 	BlockErr3.java
public class BlockErr3 {
	public static void main(String[] args) {
		try (int i = 3) 
			v[i] = 2;
		}
		catch(Expretion e) {}
	}
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "BlockErr3", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{tryStatement{"try", resourceSpecification{"(", resource{basicType{"int", }, variableDeclaratorId{"i", }, "=", primaryBase{"3", }, }, ")", }, "NONE", }, statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, }, "}", }, }, "NONE", }, }, "NONE", }

No: 	BlockErr4.java
public class BlockErr4 {
	public static void main(String[] args) {
		try (int i = 3) { 
			v[i] = 2;
		}
		catch (Expretion e) }
	}
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "BlockErr4", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", resourceSpecification{"(", resource{basicType{"int", }, variableDeclaratorId{"i", }, "=", primaryBase{"3", }, }, ")", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, catchClause{"catch", "(", catchFormalParameter{unannClassType{"Expretion", }, variableDeclaratorId{"e", }, }, ")", "NONE", }, }, "}", }, }, "}", }, }, "NONE", }

No: 	BlockErr5.java
public class BlockErr5 {
	public static void main(String[] args) {
		try (int i = 3) { 
			v[i] = 2;
		}
		catch (Expretion | Expretion e2) {}
		finally }

	}
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "BlockErr5", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", resourceSpecification{"(", resource{basicType{"int", }, variableDeclaratorId{"i", }, "=", primaryBase{"3", }, }, ")", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, catchClause{"catch", "(", catchFormalParameter{catchType{unannClassType{"Expretion", }, "|", classType{"Expretion", }, }, variableDeclaratorId{"e2", }, }, ")", block{"{", "}", }, }, finally{"finally", "NONE", }, }, "}", }, }, "}", }, }, "NONE", }

No: 	CLASSErr1.java
public class CLASSErr1 {
    public static void main(String[] args) {
        void.clas = 2;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "CLASSErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", "NONE", }, }, "NONE", }, }, "NONE", }

No: 	CLASSErr2.java
public class CLASSErr2 {
    public static void main(String[] args) {
        int[].clas = 2;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "CLASSErr2", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", "NONE", }, }, "NONE", }, }, "NONE", }

No: 	CaseExpressionErr.java
public class CaseExpressionErr {
	public static void main(String[] args) {
		switch (a) {
			case @:
				System.out.println("Ok\n");
				break;
			default:
				/* Nothing */;
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "CaseExpressionErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"switch", parExpression{"(", qualIdent{"a", }, ")", }, switchBlock{"{", switchBlockStatementGroup{switchLabel{"case", "NONE", ":", }, blockStatements{statement{primaryBase{qualIdent{"System", ".", "out", ".", "println", }, arguments{"(", primaryBase{""Ok\n"", }, ")", }, }, ";", }, statement{"break", ";", }, }, }, switchBlockStatementGroup{switchLabel{"default", ":", }, statement{";", }, }, "}", }, }, "}", }, }, "}", }, }

No: 	CatchFormalParameterErr.java
public class CatchFormalParameterErr {
	public static void main(String[] args) {
		try (int i = 3) { 
			v[i] = 2;
		}
		catch () {}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "CatchFormalParameterErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", resourceSpecification{"(", resource{basicType{"int", }, variableDeclaratorId{"i", }, "=", primaryBase{"3", }, }, ")", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, catchClause{"catch", "(", "NONE", ")", block{"{", "}", }, }, }, "}", }, }, "}", }, }

No: 	ClassBodyErr.java
public class A extends B 
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "A", superclass{"extends", classType{"B", }, }, "NONE", }, "NONE", }

No: 	ClassCreatorErr1.java
public class ClassCreatorErr1 {
    public static void main(String[] args) {
        a = b.new ;
        i = i+1;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "ClassCreatorErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{statement{"a", "NONE", statement{"b", "NONE", statement{primaryBase{"new", "NONE", }, ";", }, }, }, statement{assignment{qualIdent{"i", }, "=", infixExpression{qualIdent{"i", }, "+", primaryBase{"1", }, }, }, ";", }, }, "}", }, }, "}", }, }

No: 	ClassCreatorErr2.java
public class ClassCreatorErr2 {
    public static void main(String[] args) {
        int[]::new.new .String() = 2;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "ClassCreatorErr2", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{assignment{primary{primaryBase{referenceType{basicType{"int", }, dim{"[", "]", }, }, "::", "new", }, primaryRest{".", "new", "NONE", }, primaryRest{".", "String", arguments{"(", ")", }, }, }, "=", primaryBase{"2", }, }, ";", }, "}", }, }, "}", }, }

No: 	ClassTypeErr1.java
public class ClassTypeErr1<A extends B and @> {

}normalClassDeclaration{classModifier{"public", }, "class", "ClassTypeErr1", typeParameters{"<", typeParameter{"A", typeBound{"extends", classType{"B", }, additionalBound{"and", "NONE", }, }, }, ">", }, classBody{"{", "}", }, }

No: 	ClassTypeErr2.java
public class ClassTypeErr2<A> extends @ {

}normalClassDeclaration{classModifier{"public", }, "class", "ClassTypeErr2", typeParameters{"<", typeParameter{"A", }, ">", }, superclass{"extends", "NONE", }, classBody{"{", "}", }, }

No: 	ClassTypeErr3.java
public class ClassTypeErr3 implements A, @ {

}normalClassDeclaration{classModifier{"public", }, "class", "ClassTypeErr3", superinterfaces{"implements", interfaceTypeList{classType{"A", }, ",", "NONE", }, }, classBody{"{", "}", }, }

No: 	ClassTypeErr4.java
public class ClassTypeErr4 {
	public static void main(String[] args) {
		try (int i = 3) { 
			v[i] = 2;
		}
		catch (Expretion | 1Expretion e2) {}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ClassTypeErr4", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", resourceSpecification{"(", resource{basicType{"int", }, variableDeclaratorId{"i", }, "=", primaryBase{"3", }, }, ")", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, catchClause{"catch", "(", catchFormalParameter{catchType{unannClassType{"Expretion", }, "|", "NONE", }, variableDeclaratorId{"Expretion", }, }, "NONE", block{"{", "}", }, }, }, "}", }, }, "}", }, }

No: 	ColonErr1.java
public class ColonErr1 {
	public static void main(String[] args) {
		a  1;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ColonErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", statement{primaryBase{"1", }, ";", }, }, "}", }, }, "}", }, }

No: 	ColonErr2.java
public class ColonErr2 {
	public static void main(String[] args) {
		switch (a) {
			case 1
				System.out.println("Ok\n");
				break;
			default:
				/* Nothing */;
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ColonErr2", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"switch", parExpression{"(", qualIdent{"a", }, ")", }, switchBlock{"{", switchBlockStatementGroup{switchLabel{"case", primaryBase{"1", }, "NONE", }, blockStatements{statement{primaryBase{qualIdent{"System", ".", "out", ".", "println", }, arguments{"(", primaryBase{""Ok\n"", }, ")", }, }, ";", }, statement{"break", ";", }, }, }, switchBlockStatementGroup{switchLabel{"default", ":", }, statement{";", }, }, "}", }, }, "}", }, }, "}", }, }

No: 	ColonErr3.java
public class ColonErr3 {
	public static void main(String[] args) {
		switch (a) {
			case 1:
				System.out.println("Ok\n");
				break;
			default
				/* Nothing */;
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ColonErr3", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"switch", parExpression{"(", qualIdent{"a", }, ")", }, switchBlock{"{", switchBlockStatementGroup{switchLabel{"case", primaryBase{"1", }, ":", }, blockStatements{statement{primaryBase{qualIdent{"System", ".", "out", ".", "println", }, arguments{"(", primaryBase{""Ok\n"", }, ")", }, }, ";", }, statement{"break", ";", }, }, }, switchBlockStatementGroup{switchLabel{"default", "NONE", }, statement{";", }, }, "}", }, }, "}", }, }, "}", }, }

No: 	ColonErr4.java
public class ColonErr4 {
	public static void main(String[] args) {
		for (int i ? is) {
			
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ColonErr4", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", enhancedForStatement{"for", "(", basicType{"int", }, variableDeclaratorId{"i", }, "NONE", qualIdent{"is", }, ")", block{"{", "}", }, }, "}", }, }, "}", }, }

No: 	ColonErr5.java
public class ColonErr5 {
    public static void main(String[] args) {
    	int a = b query a ; b;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "ColonErr5", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{localVariableDeclarationStatement{localVariableDeclaration{basicType{"int", }, variableDeclarator{variableDeclaratorId{"a", }, "=", qualIdent{"b", }, }, }, "NONE", }, localVariableDeclarationStatement{localVariableDeclaration{unannClassType{"query", }, variableDeclaratorId{"a", }, }, ";", }, statement{"b", "NONE", statement{";", }, }, }, "}", }, }, "}", }, }

No: 	CommaAvaliableErr.java
public class CommaAvaliableErr {
    public <A> A method(A ... c, A a) {
        a.set(2);
        return a;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "CommaAvaliableErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodHeader{typeParameters{"<", typeParameter{"A", }, ">", }, unannClassType{"A", }, methodDeclarator{"method", "(", "NONE", }, }, block{"{", blockStatements{statement{primaryBase{qualIdent{"a", ".", "set", }, arguments{"(", primaryBase{"2", }, ")", }, }, ";", }, statement{"return", qualIdent{"a", }, ";", }, }, "}", }, }, "}", }, }

No: 	ConstructorBodyErr.java
public class ConstructorBodyErr {
	ConstructorBodyErr() }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "ConstructorBodyErr", classBody{"{", constructorDeclaration{constructorDeclarator{"ConstructorBodyErr", "(", ")", }, "NONE", }, "}", }, }, "NONE", }

No: 	CurRBrackErr1.java
public class CurRBrackErr1 {
	public int i;normalClassDeclaration{classModifier{"public", }, "class", "CurRBrackErr1", classBody{"{", fieldDeclaration{fieldModifier{"public", }, basicType{"int", }, variableDeclaratorId{"i", }, ";", }, "NONE", }, }

No: 	CurRBrackErr2.java
public class CurRBrackErr2 {
	CurRBrackErr2() {)
}normalClassDeclaration{classModifier{"public", }, "class", "CurRBrackErr2", classBody{"{", constructorDeclaration{constructorDeclarator{"CurRBrackErr2", "(", ")", }, constructorBody{"{", "NONE", }, }, "}", }, }

No: 	CurRBrackErr3.java
public enum CurRBrackErr3 {
	A,
	B
enumDeclaration{classModifier{"public", }, "enum", "CurRBrackErr3", enumBody{"{", enumConstantList{enumConstant{"A", }, ",", enumConstant{"B", }, }, "NONE", }, }

No: 	CurRBrackErr4.java
public interface CurRBrackErr4 {
	public int i;

normalInterfaceDeclaration{interfaceModifier{"public", }, "interface", "CurRBrackErr4", interfaceBody{"{", constantDeclaration{constantModifier{"public", }, basicType{"int", }, variableDeclaratorId{"i", }, ";", }, "NONE", }, }

No: 	CurRBrackErr5.java
public @interface CurRBrackErr5 { 
	public int i();annotationTypeDeclaration{interfaceModifier{"public", }, "@", "interface", "CurRBrackErr5", annotationTypeBody{"{", annotationTypeElementDeclaration{annotationTypeElementModifier{"public", }, basicType{"int", }, "i", "(", ")", ";", }, "NONE", }, }

No: 	CurRBrackErr6.java
@Annotation(value = {a)
public class CurRBrackErr6 {

}normalClassDeclaration{annotation{"@", normalAnnotation{qualIdent{"Annotation", }, "(", elementValuePair{"value", "=", elementValueArrayInitializer{"{", qualIdent{"a", }, "NONE", }, }, ")", }, }, classModifier{"public", }, "class", "CurRBrackErr6", classBody{"{", "}", }, }

No: 	CurRBrackErr7.java
public class CurRBrackErr7 {
	public static void main(String[] args) {
		int a = {1,1,2;
		i = i+1;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "CurRBrackErr7", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{localVariableDeclarationStatement{localVariableDeclaration{basicType{"int", }, variableDeclarator{variableDeclaratorId{"a", }, "=", arrayInitializer{"{", variableInitializerList{primaryBase{"1", }, ",", primaryBase{"1", }, ",", primaryBase{"2", }, }, "NONE", }, }, }, ";", }, statement{assignment{qualIdent{"i", }, "=", infixExpression{qualIdent{"i", }, "+", primaryBase{"1", }, }, }, ";", }, }, "}", }, }, "}", }, }

No: 	CurRBrackErr8.java
public class CurRBrackErr8 {
	public static void main(String[] args) {
		try {

		catch(Exception e) {

		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "CurRBrackErr8", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", block{"{", "NONE", }, catchClause{"catch", "(", catchFormalParameter{unannClassType{"Exception", }, variableDeclaratorId{"e", }, }, ")", block{"{", "}", }, }, }, "}", }, }, "}", }, }

No: 	CurRBrackErr9.java
public class CurRBrackErr9 {
	public static void main(String[] args) {
		switch (a) {
			case 1:
				System.out.println("Ok\n");
				break;
			default:
				/* Nothing */;
		]
		i = i+1;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "CurRBrackErr9", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{statement{"switch", parExpression{"(", qualIdent{"a", }, ")", }, switchBlock{"{", switchBlockStatementGroup{switchLabel{"case", primaryBase{"1", }, ":", }, blockStatements{statement{primaryBase{qualIdent{"System", ".", "out", ".", "println", }, arguments{"(", primaryBase{""Ok\n"", }, ")", }, }, ";", }, statement{"break", ";", }, }, }, switchBlockStatementGroup{switchLabel{"default", ":", }, statement{";", }, }, "NONE", }, }, statement{assignment{qualIdent{"i", }, "=", infixExpression{qualIdent{"i", }, "+", primaryBase{"1", }, }, }, ";", }, }, "}", }, }, "}", }, }

No: 	DotAvaliableErr.java
public class DotAvaliableErr {
    public static void main(String[] args) {
        Integer i = new Integer<>.Obj();
        i = i+1;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "DotAvaliableErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{localVariableDeclarationStatement{localVariableDeclaration{unannClassType{"Integer", }, variableDeclarator{variableDeclaratorId{"i", }, "=", primaryBase{"new", classCreator{classTypeWithDiamond{"Integer", }, "NONE", }, }, }, }, "NONE", }, statement{primaryBase{qualIdent{"Obj", }, arguments{"(", ")", }, }, ";", }, statement{assignment{qualIdent{"i", }, "=", infixExpression{qualIdent{"i", }, "+", primaryBase{"1", }, }, }, ";", }, }, "}", }, }, "}", }, }

No: 	DotErr1.java
public class DotErr1 {
    public static void main(String[] args) {
        void,class = 2;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "DotErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{assignment{primaryBase{"void", "NONE", "class", }, "=", primaryBase{"2", }, }, ";", }, "}", }, }, "}", }, }

No: 	ElementValueErr1.java
public @interface SemiErr7 {
	int value() default ;
}annotationTypeDeclaration{interfaceModifier{"public", }, "@", "interface", "SemiErr7", annotationTypeBody{"{", annotationTypeElementDeclaration{basicType{"int", }, "value", "(", ")", defaultValue{"default", "NONE", }, ";", }, "}", }, }

No: 	ElementValueErr2.java
@Annotation(value = )
public class ElementValueErr2 {

}normalClassDeclaration{annotation{"@", normalAnnotation{qualIdent{"Annotation", }, "(", elementValuePair{"value", "=", "NONE", }, ")", }, }, classModifier{"public", }, "class", "ElementValueErr2", classBody{"{", "}", }, }

No: 	ElementValueErr4.java
@Annotation(@)
public class ElementValueErr4 {

}normalClassDeclaration{annotation{"@", singleElementAnnotation{qualIdent{"Annotation", }, "(", "NONE", ")", }, }, classModifier{"public", }, "class", "ElementValueErr4", classBody{"{", "}", }, }

No: 	ElementValuePairErr.java
@Annotation(a = 1,)
public class ElementValuePairErr {
	
}normalClassDeclaration{annotation{"@", normalAnnotation{qualIdent{"Annotation", }, "(", elementValuePairList{elementValuePair{"a", "=", primaryBase{"1", }, }, ",", "NONE", }, ")", }, }, classModifier{"public", }, "class", "ElementValuePairErr", classBody{"{", "}", }, }

No: 	EndErr.java
public class EndErr {

}

acompilation{normalClassDeclaration{classModifier{"public", }, "class", "EndErr", classBody{"{", "}", }, }, "NONE", }

No: 	EnumBodyErr.java
public enum EnumBodyErr 
	
}compilation{enumDeclaration{classModifier{"public", }, "enum", "EnumBodyErr", "NONE", }, "NONE", }

No: 	EqAvaliableErr1.java
public class EqAvaliableErr1 {
	public static void main(String[] args) {
		int a, b == 1;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "EqAvaliableErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{localVariableDeclarationStatement{localVariableDeclaration{basicType{"int", }, variableDeclaratorList{variableDeclaratorId{"a", }, ",", variableDeclaratorId{"b", }, }, }, "NONE", }, statement{primaryBase{"1", }, ";", }, }, "}", }, }, "}", }, }

No: 	EqAvaliableErr3.java
public class EqAvaliableErr3 {
	public static void main(String[] args) {
		try (int i == 3) { 
			v[i] = 2;
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "EqAvaliableErr3", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", resourceSpecification{"(", "NONE", ")", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, }, "}", }, }, "}", }, }

No: 	EqVerticalBarAvaliableErr.java
public class EqVerticalBarAvaliableErr {
	public static void main(String[] args) {
		try (int i = 3) { 
			v[i] = 2;
		}
		catch (Expretion || Expretion e2) {}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "EqVerticalBarAvaliableErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", resourceSpecification{"(", resource{basicType{"int", }, variableDeclaratorId{"i", }, "=", primaryBase{"3", }, }, ")", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, catchClause{"catch", "(", catchFormalParameter{unannClassType{"Expretion", }, "NONE", }, ")", block{"{", "}", }, }, }, "}", }, }, "}", }, }

No: 	EqualAmpersandErr.java
public class EqualAmpersandErr {
    public static void main(String[] args) {
        a = !=2;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "EqualAmpersandErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", statement{primaryBase{"2", }, ";", }, }, "}", }, }, "}", }, }

No: 	EqualPlusErr.java
public class EqualPlusErr {
    public static void main(String[] args) {
        a = +=2;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "EqualPlusErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{assignment{qualIdent{"a", }, "=", "NONE", }, ";", }, "}", }, }, "}", }, }

No: 	ExceptionTypeErr.java
public class ExceptionTypeErr {
    public <A> A method(A ... c) throws A, @ {
        a.set(2);
        return a;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "ExceptionTypeErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodHeader{typeParameters{"<", typeParameter{"A", }, ">", }, unannClassType{"A", }, methodDeclarator{"method", "(", formalParameter{unannClassType{"A", }, "...", variableDeclaratorId{"c", }, }, ")", }, throws{"throws", exceptionTypeList{classType{"A", }, ",", "NONE", }, }, }, block{"{", blockStatements{statement{primaryBase{qualIdent{"a", ".", "set", }, arguments{"(", primaryBase{"2", }, ")", }, }, ";", }, statement{"return", qualIdent{"a", }, ";", }, }, "}", }, }, "}", }, }

No: 	ExceptionTypeListErr.java
public class ExceptionTypeListErr {
    public <A> A method(A ... c) throws @ {
        a.set(2);
        return a;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "ExceptionTypeListErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodHeader{typeParameters{"<", typeParameter{"A", }, ">", }, unannClassType{"A", }, methodDeclarator{"method", "(", formalParameter{unannClassType{"A", }, "...", variableDeclaratorId{"c", }, }, ")", }, throws{"throws", "NONE", }, }, block{"{", blockStatements{statement{primaryBase{qualIdent{"a", ".", "set", }, arguments{"(", primaryBase{"2", }, ")", }, }, ";", }, statement{"return", qualIdent{"a", }, ";", }, }, "}", }, }, "}", }, }

No: 	ExpressionErr1.java
public class ExpressionErr1 {
	public static void main(String[] args) {
		throw @;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ExpressionErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"throw", "NONE", ";", }, "}", }, }, "}", }, }

No: 	ExpressionErr10.java
public class ExpressionErr10 {
    public static void main(String[] args) {
    	a = \b;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "ExpressionErr10", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", "NONE", }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	ExpressionErr2.java
public class ExpressionErr2 {
	public static void main(String[] args) {
		assert @;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ExpressionErr2", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"assert", "NONE", ";", }, "}", }, }, "}", }, }

No: 	ExpressionErr3.java
public class ExpressionErr3 {
	public static void main(String[] args) {
		assert 1 : ;
	}
	
}normalClassDeclaration{classModifier{"public", }, "class", "ExpressionErr3", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"assert", primaryBase{"1", }, ":", "NONE", ";", }, "}", }, }, "}", }, }

No: 	ExpressionErr4.java
public class ExpressionErr4 {
	public static void main(String[] args) {
		for (int i : @) {
			
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ExpressionErr4", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", enhancedForStatement{"for", "(", basicType{"int", }, variableDeclaratorId{"i", }, ":", "NONE", ")", block{"{", "}", }, }, "}", }, }, "}", }, }

No: 	ExpressionErr5.java
public class ExpressionErr5 {
	public static void main(String[] args) {
		try (int i = @) { 
			v[i] = 2;
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ExpressionErr5", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", resourceSpecification{"(", resource{basicType{"int", }, variableDeclaratorId{"i", }, "=", "NONE", }, ")", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, }, "}", }, }, "}", }, }

No: 	ExpressionErr6.java
public class ExpressionErr6 {
    public static void main(String[] args) {
        int[]::new[] = 2;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "ExpressionErr6", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{assignment{primary{primaryBase{referenceType{basicType{"int", }, dim{"[", "]", }, }, "::", "new", }, primaryRest{"[", "NONE", "]", }, }, "=", primaryBase{"2", }, }, ";", }, "}", }, }, "}", }, }

No: 	ExpressionErr7.java
public class ExpressionErr7 {
    public static void main(String[] args) {
        Integer i = new Integer(1,);
    }
}normalClassDeclaration{classModifier{"public", }, "class", "ExpressionErr7", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", localVariableDeclarationStatement{localVariableDeclaration{unannClassType{"Integer", }, variableDeclarator{variableDeclaratorId{"i", }, "=", primaryBase{"new", classCreator{classTypeWithDiamond{"Integer", }, arguments{"(", argumentList{primaryBase{"1", }, ",", "NONE", }, ")", }, }, }, }, }, ";", }, "}", }, }, "}", }, }

No: 	ExpressionErr8.java
public class ExpressionErr8 {
    public static void main(String[] args) {
    	int a = b query \a : b;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "ExpressionErr8", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{localVariableDeclarationStatement{localVariableDeclaration{basicType{"int", }, variableDeclarator{variableDeclaratorId{"a", }, "=", qualIdent{"b", }, }, }, "NONE", }, statement{"query", "NONE", "NONE", }, }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	ExpressionErr9.java
public class ExpressionErr9 {
    public static void main(String[] args) {
    	int a = b query a : \b;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "ExpressionErr9", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{localVariableDeclarationStatement{localVariableDeclaration{basicType{"int", }, variableDeclarator{variableDeclaratorId{"a", }, "=", qualIdent{"b", }, }, }, "NONE", }, localVariableDeclarationStatement{localVariableDeclaration{unannClassType{"query", }, variableDeclaratorId{"a", }, }, "NONE", }, }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	FormalParameterErr.java
public class FormalParameterErr {
    public <A> A method(A a, -B b) {
        a.set(2);
        return a;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "FormalParameterErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodHeader{typeParameters{"<", typeParameter{"A", }, ">", }, unannClassType{"A", }, methodDeclarator{"method", "(", formalParameterList{formalParameter{unannClassType{"A", }, variableDeclaratorId{"a", }, }, ",", "NONE", }, ")", }, }, block{"{", blockStatements{statement{primaryBase{qualIdent{"a", ".", "set", }, arguments{"(", primaryBase{"2", }, ")", }, }, ";", }, statement{"return", qualIdent{"a", }, ";", }, }, "}", }, }, "}", }, }

No: 	GeqErr.java
public class GeqErr<A {

}normalClassDeclaration{classModifier{"public", }, "class", "GeqErr", typeParameters{"<", typeParameter{"A", }, "NONE", }, classBody{"{", "}", }, }

No: 	GreaterErr1.java
public class GreaterErr1 {
    public static void main(String[] args) {
        Integer i = new Integer<();
    }
}normalClassDeclaration{classModifier{"public", }, "class", "GreaterErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", localVariableDeclarationStatement{localVariableDeclaration{unannClassType{"Integer", }, variableDeclarator{variableDeclaratorId{"i", }, "=", primaryBase{"new", classCreator{classTypeWithDiamond{"Integer", typeArgumentsOrDiamond{"<", "NONE", }, }, arguments{"(", ")", }, }, }, }, }, ";", }, "}", }, }, "}", }, }

No: 	IdErr1.java
package ;packageDeclaration{"package", "NONE", ";", }

No: 	IdErr10.java
public class IdErr10 {
    public static void main(String[] args) {
        a.<?>1b() = 2;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "IdErr10", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", "NONE", }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	IdErr11.java
public class IdErr11 {
    public static void main(String[] args) {
        a.super.1b() = 2;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "IdErr11", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", "NONE", }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	IdErr12.java
public class IdErr12 {
    public static void main(String[] args) {
        a.super::1b() = 2;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "IdErr12", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", "NONE", }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	IdErr13.java
public class IdErr13 {
    public static void main(String[] args) {
        a::1b = 2;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "IdErr13", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", ":", "NONE", }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	IdErr14.java
public class IdErr14 {
    public static void main(String[] args) {
        int[]::new::1b = 2;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "IdErr14", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", "NONE", }, }, "NONE", }, }, "NONE", }

No: 	IdErr15.java
public class IdErr15 {
    public static void main(String[] args) {
        Integer i = new Integer.1b();
    }
}normalClassDeclaration{classModifier{"public", }, "class", "IdErr15", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", localVariableDeclarationStatement{localVariableDeclaration{unannClassType{"Integer", }, variableDeclarator{variableDeclaratorId{"i", }, "=", primaryBase{"new", classCreator{classTypeWithDiamond{"Integer", ".", "NONE", }, arguments{"(", ")", }, }, }, }, }, ";", }, "}", }, }, "}", }, }

No: 	IdErr16.java
public class IdErr16 {
    public static void main(String[] args) {
    	a = (a, ) -> {b = 25+30;};
    }
}normalClassDeclaration{classModifier{"public", }, "class", "IdErr16", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{assignment{qualIdent{"a", }, "=", lambdaExpression{lambdaParameters{"(", inferredFormalParameterList{"a", ",", "NONE", }, ")", }, "->", block{"{", statement{assignment{qualIdent{"b", }, "=", infixExpression{primaryBase{"25", }, "+", primaryBase{"30", }, }, }, ";", }, "}", }, }, }, ";", }, "}", }, }, "}", }, }

No: 	IdErr2.java
package test.;packageDeclaration{"package", "test", ".", "NONE", ";", }

No: 	IdErr3.java
public class .IdErr4 {

}normalClassDeclaration{classModifier{"public", }, "class", "NONE", classBody{"{", "}", }, }

No: 	IdErr4.java
public enum -IdErr4 {
	
}enumDeclaration{classModifier{"public", }, "enum", "NONE", enumBody{"{", "}", }, }

No: 	IdErr5.java
public interface {
	
}normalInterfaceDeclaration{interfaceModifier{"public", }, "interface", "NONE", interfaceBody{"{", "}", }, }

No: 	IdErr6.java
public @interface -IdErr6 {

}annotationTypeDeclaration{interfaceModifier{"public", }, "@", "interface", "NONE", annotationTypeBody{"{", "}", }, }

No: 	IdErr7.java
public @interface IdErr7 {
	int -value() default 3;
}annotationTypeDeclaration{interfaceModifier{"public", }, "@", "interface", "IdErr7", annotationTypeBody{"{", annotationTypeElementDeclaration{basicType{"int", }, "NONE", "(", ")", defaultValue{"default", primaryBase{"3", }, }, ";", }, "}", }, }

No: 	IdErr8.java
public class IdErr8 {
    public static void main(String[] args) {
        a = super.1a();
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "IdErr8", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", "NONE", }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	IdErr9.java
public class IdErr9 {
    public static void main(String[] args) {
        a = super::1a;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "IdErr9", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", "NONE", }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	InterfaceBodyErr.java
public interface InterfaceBodyErr 
	
}compilation{normalInterfaceDeclaration{interfaceModifier{"public", }, "interface", "InterfaceBodyErr", "NONE", }, "NONE", }

No: 	InterfaceTypeListErr1.java
public class InterfaceTypeListErr1 implements @ {

}normalClassDeclaration{classModifier{"public", }, "class", "InterfaceTypeListErr1", superinterfaces{"implements", "NONE", }, classBody{"{", "}", }, }

No: 	InterfaceTypeListErr2.java
public interface InterfaceTypeListErr2 extends @ { 
	
}normalInterfaceDeclaration{interfaceModifier{"public", }, "interface", "InterfaceTypeListErr2", extendsInterfaces{"extends", "NONE", }, interfaceBody{"{", "}", }, }

No: 	InterfaceWordErr.java
public @int InterfaceWordErr {

}annotationTypeDeclaration{interfaceModifier{"public", }, "@", "NONE", "InterfaceWordErr", annotationTypeBody{"{", "}", }, }

No: 	LParErr1.java
public class LParErr1 {
    public <A> A method A a) {
        a.set(2);
        return a;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "LParErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodHeader{typeParameters{"<", typeParameter{"A", }, ">", }, unannClassType{"A", }, methodDeclarator{"method", "NONE", formalParameter{unannClassType{"A", }, variableDeclaratorId{"a", }, }, ")", }, }, block{"{", blockStatements{statement{primaryBase{qualIdent{"a", ".", "set", }, arguments{"(", primaryBase{"2", }, ")", }, }, ";", }, statement{"return", qualIdent{"a", }, ";", }, }, "}", }, }, "}", }, }

No: 	LParErr2.java
public class LParErr2 {
	LParErr2) {}
}normalClassDeclaration{classModifier{"public", }, "class", "LParErr2", classBody{"{", constructorDeclaration{constructorDeclarator{"LParErr2", "NONE", ")", }, constructorBody{"{", "}", }, }, "}", }, }

No: 	LParErr3.java
public @interface LParErr3 {
	int value) default 3;
}annotationTypeDeclaration{interfaceModifier{"public", }, "@", "interface", "LParErr3", annotationTypeBody{"{", annotationTypeElementDeclaration{basicType{"int", }, "value", "NONE", ")", defaultValue{"default", primaryBase{"3", }, }, ";", }, "}", }, }

No: 	LParErr4.java
public class LParErr4 {
	public static void main(String[] args) {
		for int i = 0; i < 10; i++) {
			System.out.println("> " + i);
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "LParErr4", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", basicForStatement{"for", "NONE", localVariableDeclaration{basicType{"int", }, variableDeclarator{variableDeclaratorId{"i", }, "=", primaryBase{"0", }, }, }, ";", infixExpression{qualIdent{"i", }, "<", primaryBase{"10", }, }, ";", statementExpression{qualIdent{"i", }, "++", }, ")", block{"{", statement{primaryBase{qualIdent{"System", ".", "out", ".", "println", }, arguments{"(", infixExpression{primaryBase{""> "", }, "+", qualIdent{"i", }, }, ")", }, }, ";", }, "}", }, }, "}", }, }, "}", }, }

No: 	LParErr5.java
public class AfterTryErr {
	public static void main(String[] args) {
		try (int i = 3) { 
			v[i] = 2;
		}
		catch Expretion e) {}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "AfterTryErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", resourceSpecification{"(", resource{basicType{"int", }, variableDeclaratorId{"i", }, "=", primaryBase{"3", }, }, ")", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, catchClause{"catch", "NONE", catchFormalParameter{unannClassType{"Expretion", }, variableDeclaratorId{"e", }, }, ")", block{"{", "}", }, }, }, "}", }, }, "}", }, }

No: 	LambdaBodyErr.java
public class LambdaBodyErr {
    public static void main(String[] args) {
    	a = () -> @{b = 25+30;};
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "LambdaBodyErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", "NONE", }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	MethodBodyErr1.java
public class MethodBodyErr1 {
	public static void main(String args[])

	}
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "MethodBodyErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannClassType{"String", }, variableDeclaratorId{"args", dim{"[", "]", }, }, }, ")", }, }, "NONE", }, "}", }, }, "NONE", }

No: 	MethodBodyErr2.java
public interface MethodBodyErr2 {
	public A method() }
}compilation{normalInterfaceDeclaration{interfaceModifier{"public", }, "interface", "MethodBodyErr2", interfaceBody{"{", interfaceMethodDeclaration{interfaceMethodModifier{"public", }, methodHeader{unannClassType{"A", }, methodDeclarator{"method", "(", ")", }, }, "NONE", }, "}", }, }, "NONE", }

No: 	MethodDeclaratorErr.java
public class MethodDeclaratorErr {
    public <A> A -method(A a) {
        a.set(2);
        return a;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "MethodDeclaratorErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodHeader{typeParameters{"<", typeParameter{"A", }, ">", }, unannClassType{"A", }, "NONE", }, block{"{", blockStatements{statement{primaryBase{qualIdent{"a", ".", "set", }, arguments{"(", primaryBase{"2", }, ")", }, }, ";", }, statement{"return", qualIdent{"a", }, ";", }, }, "}", }, }, "}", }, }

No: 	MinusEqualGreaterErr.java
public class MinusEqualGreaterErr {
    public static void main(String[] args) {
        a = -=@;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "MinusEqualGreaterErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{assignment{qualIdent{"a", }, "=", "NONE", }, ";", }, "}", }, }, "}", }, }

No: 	NEWErr1.java
public class NEWErr1 {
    public static void main(String[] args) {
        int[]::ne = 2;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "NEWErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", "NONE", }, }, "NONE", }, }, "NONE", }

No: 	ParExpressionErr1.java
public class ParExpressionErr1 {
	public static void main(String[] args) {
		if a == 0) {
			
		}
	}
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "ParExpressionErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"if", "NONE", statement{"a", "NONE", "NONE", }, }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	ParExpressionErr2.java
public class ParExpressionErr2 {
	public static void main(String[] args) {
		while a != 0)
			a--;
	}
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "ParExpressionErr2", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"while", "NONE", statement{"a", "NONE", "NONE", }, }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	ParExpressionErr3.java
public class ParExpressionErr3 {
	public static void main(String[] args) {
		do
			a = 1;
		while a == 2);	
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ParExpressionErr3", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"do", statement{assignment{qualIdent{"a", }, "=", primaryBase{"1", }, }, ";", }, "while", "NONE", ";", }, "}", }, }, "}", }, }

No: 	ParExpressionErr4.java
public class ParExpressionErr4 {
	public static void main(String[] args) {
		switch a) {
			case 1:
				System.out.println("Ok\n");
				break;
			default:
				/* Nothing */
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ParExpressionErr4", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"switch", "NONE", switchBlock{"{", switchBlockStatementGroup{switchLabel{"case", primaryBase{"1", }, ":", }, blockStatements{statement{primaryBase{qualIdent{"System", ".", "out", ".", "println", }, arguments{"(", primaryBase{""Ok\n"", }, ")", }, }, ";", }, statement{"break", ";", }, }, }, switchLabel{"default", ":", }, "}", }, }, "}", }, }, "}", }, }

No: 	ParExpressionErr5.java
public class ParExpressionErr5 {
	public static void main(String[] args) {
		synchronized a == 1) {
			System.out.println("Ok\n");
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ParExpressionErr5", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"synchronized", "NONE", block{"{", statement{primaryBase{qualIdent{"System", ".", "out", ".", "println", }, arguments{"(", primaryBase{""Ok\n"", }, ")", }, }, ";", }, "}", }, }, "}", }, }, "}", }, }

No: 	PrimaryQualIdentErr.java
public class PrimaryQualIdentErr {
    public static void main(String[] args) {
        a = ++@;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "PrimaryQualIdentErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{assignment{qualIdent{"a", }, "=", unaryExpression{"++", "NONE", }, }, ";", }, "}", }, }, "}", }, }

No: 	QualIdentErr1.java
import @;importDeclaration{"import", "NONE", ";", }

No: 	RBrackErr1.java
public class RBrackErr1 {
    public static void main(String[] args) {
        a = b[24;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "RBrackErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", statement{"b", "NONE", statement{primaryBase{"24", }, ";", }, }, }, "}", }, }, "}", }, }

No: 	RBrackErr2.java
public class RBrackErr2 {
    public static void main(String[] args) {
        a[.class = 2;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "RBrackErr2", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", statement{primaryBase{"2", }, ";", }, }, "}", }, }, "}", }, }

No: 	RBrackErr3.java
public class RBrackErr3 {
    public static void main(String[] args) {
        int[.class = 2;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "RBrackErr3", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", "NONE", }, }, "NONE", }, }, "NONE", }

No: 	RBrackErr4.java
public class RBrackErr4 {
    public static void main(String[] args) {
        int[]::new[2 = 2;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "RBrackErr4", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{primary{primaryBase{referenceType{basicType{"int", }, dim{"[", "]", }, }, "::", "new", }, primaryRest{"[", assignment{primaryBase{"2", }, "=", primaryBase{"2", }, }, "NONE", }, }, ";", }, "}", }, }, "}", }, }

No: 	RBrackErr5.java
public class RBrackErr5 {
    public static void main(String[] args) {
        Integer i = new int[25;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "RBrackErr5", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", localVariableDeclarationStatement{localVariableDeclaration{unannClassType{"Integer", }, variableDeclarator{variableDeclaratorId{"i", }, "=", primaryBase{"new", arrayCreator{basicType{"int", }, dimExpr{"[", primaryBase{"25", }, "NONE", }, }, }, }, }, ";", }, "}", }, }, "}", }, }

No: 	RParErr1.java
public class RParErr1 {
    public <A> A method(A a {
        a.set(2);
        return a;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "RParErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodHeader{typeParameters{"<", typeParameter{"A", }, ">", }, unannClassType{"A", }, methodDeclarator{"method", "(", formalParameter{unannClassType{"A", }, variableDeclaratorId{"a", }, }, "NONE", }, }, block{"{", blockStatements{statement{primaryBase{qualIdent{"a", ".", "set", }, arguments{"(", primaryBase{"2", }, ")", }, }, ";", }, statement{"return", qualIdent{"a", }, ";", }, }, "}", }, }, "}", }, }

No: 	RParErr10.java
public class RParErr10 {
    public static void main(String[] args) {
        Integer i = new Integer(;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "RParErr10", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", localVariableDeclarationStatement{localVariableDeclaration{unannClassType{"Integer", }, variableDeclarator{variableDeclaratorId{"i", }, "=", primaryBase{"new", classCreator{classTypeWithDiamond{"Integer", }, arguments{"(", "NONE", }, }, }, }, }, ";", }, "}", }, }, "}", }, }

No: 	RParErr11.java
public class RParErr11 {
    public static void main(String[] args) {
        a = (int i;
        i = i+1;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "RParErr11", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", "NONE", }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	RParErr2.java
public class RParErr2 {
	RParErr2( {}
}normalClassDeclaration{classModifier{"public", }, "class", "RParErr2", classBody{"{", constructorDeclaration{constructorDeclarator{"RParErr2", "(", "NONE", }, constructorBody{"{", "}", }, }, "}", }, }

No: 	RParErr3.java
public @interface RParErr3 {
	int value(int i) default 3;
}annotationTypeDeclaration{interfaceModifier{"public", }, "@", "interface", "RParErr3", annotationTypeBody{"{", annotationTypeElementDeclaration{basicType{"int", }, "value", "(", "NONE", defaultValue{"default", primaryBase{"3", }, }, ";", }, "}", }, }

No: 	RParErr4.java
@Annotation(a
public class RParErr4 {

}normalClassDeclaration{annotation{"@", singleElementAnnotation{qualIdent{"Annotation", }, "(", qualIdent{"a", }, "NONE", }, }, classModifier{"public", }, "class", "RParErr4", classBody{"{", "}", }, }

No: 	RParErr5.java
public class RParErr5 {
	public static void main(String[] args) {
		for (int i = 0; i < 10; i++ {
			System.out.println("> " + i);
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "RParErr5", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", basicForStatement{"for", "(", localVariableDeclaration{basicType{"int", }, variableDeclarator{variableDeclaratorId{"i", }, "=", primaryBase{"0", }, }, }, ";", infixExpression{qualIdent{"i", }, "<", primaryBase{"10", }, }, ";", statementExpression{qualIdent{"i", }, "++", }, "NONE", block{"{", statement{primaryBase{qualIdent{"System", ".", "out", ".", "println", }, arguments{"(", infixExpression{primaryBase{""> "", }, "+", qualIdent{"i", }, }, ")", }, }, ";", }, "}", }, }, "}", }, }, "}", }, }

No: 	RParErr6.java
public class RParErr6 {
	public static void main(String[] args) {
		for (int i : 1 {
			
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "RParErr6", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", enhancedForStatement{"for", "(", basicType{"int", }, variableDeclaratorId{"i", }, ":", primaryBase{"1", }, "NONE", block{"{", "}", }, }, "}", }, }, "}", }, }

No: 	RParErr7.java
public class RParErr7 {
	public static void main(String[] args) {
		try (int i = 3) { 
			v[i] = 2;
		}
		catch (Expretion e {}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "RParErr7", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", resourceSpecification{"(", resource{basicType{"int", }, variableDeclaratorId{"i", }, "=", primaryBase{"3", }, }, ")", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, catchClause{"catch", "(", catchFormalParameter{unannClassType{"Expretion", }, variableDeclaratorId{"e", }, }, "NONE", block{"{", "}", }, }, }, "}", }, }, "}", }, }

No: 	RParErr8.java
public class RParErr8 {
	public static void main(String[] args) {
		try (int i = 3 { 
			v[i] = 2;
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "RParErr8", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", resourceSpecification{"(", resource{basicType{"int", }, variableDeclaratorId{"i", }, "=", primaryBase{"3", }, }, "NONE", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, }, "}", }, }, "}", }, }

No: 	RParErr9.java
public class RParErr9 {
    public static void main(String[] args) {
        if(a == 1 {
        	System.out.println("Hello, World!");
        }
    }
}normalClassDeclaration{classModifier{"public", }, "class", "RParErr9", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"if", parExpression{"(", infixExpression{qualIdent{"a", }, "==", primaryBase{"1", }, }, "NONE", }, block{"{", statement{primaryBase{qualIdent{"System", ".", "out", ".", "println", }, arguments{"(", primaryBase{""Hello, World!"", }, ")", }, }, ";", }, "}", }, }, "}", }, }, "}", }, }

No: 	ReferenceTypeErr1.java
public class ReferenceTypeErr1 extends A<? extends @> {

}normalClassDeclaration{classModifier{"public", }, "class", "ReferenceTypeErr1", superclass{"extends", classType{"A", typeArguments{"<", wildcard{"?", wildcardBounds{"extends", "NONE", }, }, ">", }, }, }, classBody{"{", "}", }, }

No: 	ReferenceTypeErr2.java
public class ReferenceTypeErr2 extends A<? super @> {

}normalClassDeclaration{classModifier{"public", }, "class", "ReferenceTypeErr2", superclass{"extends", classType{"A", typeArguments{"<", wildcard{"?", wildcardBounds{"super", "NONE", }, }, ">", }, }, }, classBody{"{", "}", }, }

No: 	ReferenceTypeErr3.java
public class ReferenceTypeErr3 {
    public static void main(String[] args) {
    	if(a instanceof 1b)
    		a = b;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "ReferenceTypeErr3", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"if", parExpression{"(", qualIdent{"a", }, "NONE", }, "NONE", }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	ResourceErr.java
public class ResourceErr {
	public static void main(String[] args) {
		try (int i = 3, 1int j = 0) { 
			v[i] = 2;
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ResourceErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", resourceSpecification{"(", resourceList{resource{basicType{"int", }, variableDeclaratorId{"i", }, "=", primaryBase{"3", }, }, ",", "NONE", }, ")", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, }, "}", }, }, "}", }, }

No: 	ResourceListErr.java
public class ResourceListErr {
	public static void main(String[] args) {
		try (1int i = 3) { 
			v[i] = 2;
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ResourceListErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", resourceSpecification{"(", "NONE", ")", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, }, "}", }, }, "}", }, }

No: 	ResultErr.java
public class ResultErr {
	public <A> -A method(A a) {
		a.set(2);
		return a;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "ResultErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodHeader{typeParameters{"<", typeParameter{"A", }, ">", }, "NONE", methodDeclarator{"A", "NONE", "NONE", }, }, block{"{", blockStatements{statement{primaryBase{qualIdent{"a", ".", "set", }, arguments{"(", primaryBase{"2", }, ")", }, }, ";", }, statement{"return", qualIdent{"a", }, ";", }, }, "}", }, }, "}", }, }

No: 	SUPERErr1.java
public class SUPERErr1 {
	public SUPERErr1() {
		this.short();
	}
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "SUPERErr1", classBody{"{", constructorDeclaration{constructorModifier{"public", }, constructorDeclarator{"SUPERErr1", "(", ")", }, constructorBody{"{", "NONE", }, }, "NONE", }, }, "NONE", }

No: 	SUPERErr2.java
public class SUPERErr2 {
    public SUPERErr2() {
        a.short();
    }
}normalClassDeclaration{classModifier{"public", }, "class", "SUPERErr2", classBody{"{", constructorDeclaration{constructorModifier{"public", }, constructorDeclarator{"SUPERErr2", "(", ")", }, constructorBody{"{", explicitConstructorInvocation{qualIdent{"a", }, ".", "NONE", arguments{"(", ")", }, ";", }, "}", }, }, "}", }, }

No: 	SemiErr1.java
package test.t,

public class SemiErr1 {
	
}compilationUnit{packageDeclaration{"package", "test", ".", "t", "NONE", }, normalClassDeclaration{classModifier{"public", }, "class", "SemiErr1", classBody{"{", "}", }, }, }

No: 	SemiErr10.java
public class SemiErr10 {
	public static void main(String[] args) {
		return,
		a = 1;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "SemiErr10", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{statement{"return", "NONE", }, statement{assignment{qualIdent{"a", }, "=", primaryBase{"1", }, }, ";", }, }, "}", }, }, "}", }, }

No: 	SemiErr11.java
public class SemiErr11 {
	public static void main(String[] args) {
		throw 25
	}
}normalClassDeclaration{classModifier{"public", }, "class", "SemiErr11", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"throw", primaryBase{"25", }, "NONE", }, "}", }, }, "}", }, }

No: 	SemiErr12.java
public class SemiErr12 {
	public static void main(String[] args) {
		break
	}
}normalClassDeclaration{classModifier{"public", }, "class", "SemiErr12", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"break", "NONE", }, "}", }, }, "}", }, }

No: 	SemiErr13.java
public class SemiErr13 {
	public static void main(String[] args) {
		continue
	}
}normalClassDeclaration{classModifier{"public", }, "class", "SemiErr13", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"continue", "NONE", }, "}", }, }, "}", }, }

No: 	SemiErr14.java
public class SemiErr14 {
	public static void main(String[] args) {
		assert 25
	}
}normalClassDeclaration{classModifier{"public", }, "class", "SemiErr14", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"assert", primaryBase{"25", }, "NONE", }, "}", }, }, "}", }, }

No: 	SemiErr15.java
public class SemiErr15 {
	public static void main(String[] args) {
		a = 1
		b = 4;
	}
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "SemiErr15", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", "NONE", }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	SemiErr16.java
public class SemiErr16 {
	public static void main(String[] args) {
		for (int i = 0; i < 10 i++) {
			System.out.println("> " + i);
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "SemiErr16", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", basicForStatement{"for", "(", localVariableDeclaration{basicType{"int", }, variableDeclarator{variableDeclaratorId{"i", }, "=", primaryBase{"0", }, }, }, ";", infixExpression{qualIdent{"i", }, "<", primaryBase{"10", }, }, "NONE", statementExpression{qualIdent{"i", }, "++", }, ")", block{"{", statement{primaryBase{qualIdent{"System", ".", "out", ".", "println", }, arguments{"(", infixExpression{primaryBase{""> "", }, "+", qualIdent{"i", }, }, ")", }, }, ";", }, "}", }, }, "}", }, }, "}", }, }

No: 	SemiErr2.java
import test.a:

public class SemiErr2 {
	
}compilationUnit{importDeclaration{"import", qualIdent{"test", ".", "a", }, "NONE", }, normalClassDeclaration{classModifier{"public", }, "class", "SemiErr2", classBody{"{", "}", }, }, }

No: 	SemiErr3.java
public class SemiErr3 {
	SemiErr3() {
		this()
		a = 1;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "SemiErr3", classBody{"{", constructorDeclaration{constructorDeclarator{"SemiErr3", "(", ")", }, constructorBody{"{", "NONE", }, }, constructorDeclaration{constructorDeclarator{"a", "NONE", "NONE", }, "NONE", }, "NONE", }, }

No: 	SemiErr4.java
public class SemiErr4 {
	SemiErr4() {
		super()
		a = 1;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "SemiErr4", classBody{"{", constructorDeclaration{constructorDeclarator{"SemiErr4", "(", ")", }, constructorBody{"{", "NONE", }, }, constructorDeclaration{constructorDeclarator{"a", "NONE", "NONE", }, "NONE", }, "NONE", }, }

No: 	SemiErr5.java
public class SemiErr5 {
    SemiErr5() {
        (26).super()
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "SemiErr5", classBody{"{", constructorDeclaration{constructorDeclarator{"SemiErr5", "(", ")", }, constructorBody{"{", "NONE", }, }, "}", }, }, "NONE", }

No: 	SemiErr6.java
public class SemiErr6 {
	SemiErr6() {
		A.super()
	}
}normalClassDeclaration{classModifier{"public", }, "class", "SemiErr6", classBody{"{", constructorDeclaration{constructorDeclarator{"SemiErr6", "(", ")", }, constructorBody{"{", explicitConstructorInvocation{qualIdent{"A", }, ".", "super", arguments{"(", ")", }, "NONE", }, "}", }, }, "}", }, }

No: 	SemiErr7.java
public @interface SemiErr7 {
	int value()
}annotationTypeDeclaration{interfaceModifier{"public", }, "@", "interface", "SemiErr7", annotationTypeBody{"{", annotationTypeElementDeclaration{basicType{"int", }, "value", "(", ")", "NONE", }, "}", }, }

No: 	SemiErr8.java
public class SemiErr8 {
	public static void main(String[] args) {
		int a
	}
}normalClassDeclaration{classModifier{"public", }, "class", "SemiErr8", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", localVariableDeclarationStatement{localVariableDeclaration{basicType{"int", }, variableDeclaratorId{"a", }, }, "NONE", }, "}", }, }, "}", }, }

No: 	SemiErr9.java
public class SemiErr9 {
	public static void main(String[] args) {
		do
			a = 1;
		while (a == 2)
	}
}normalClassDeclaration{classModifier{"public", }, "class", "SemiErr9", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"do", statement{assignment{qualIdent{"a", }, "=", primaryBase{"1", }, }, ";", }, "while", parExpression{"(", infixExpression{qualIdent{"a", }, "==", primaryBase{"2", }, }, ")", }, "NONE", }, "}", }, }, "}", }, }

No: 	StatementErr1.java
public class StatementErr1 {
	public static void main(String[] args) {
		if (a == 0)
			-2;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "StatementErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{statement{"if", parExpression{"(", infixExpression{qualIdent{"a", }, "==", primaryBase{"0", }, }, ")", }, "NONE", }, statement{primaryBase{"2", }, ";", }, }, "}", }, }, "}", }, }

No: 	StatementErr2.java
public class StatementErr2 {
	public static void main(String[] args) {
		if (a == 0)
			a = -2;
		else
			-3;
		i = i++;
	}
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "StatementErr2", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"if", parExpression{"(", infixExpression{qualIdent{"a", }, "==", primaryBase{"0", }, }, ")", }, statement{assignment{qualIdent{"a", }, "=", unaryExpression{"-", primaryBase{"2", }, }, }, ";", }, }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	StatementErr3.java
public class StatementErr3 {
	public static void main(String[] args) {
		while (a != 0)
			-a;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "StatementErr3", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{statement{"while", parExpression{"(", infixExpression{qualIdent{"a", }, "!=", primaryBase{"0", }, }, ")", }, "NONE", }, statement{"a", "NONE", statement{";", }, }, }, "}", }, }, "}", }, }

No: 	StatementErr4.java
public class StatementErr4 {
	public static void main(String[] args) {
		do
			@
		while(a == 2);	
	}
}normalClassDeclaration{classModifier{"public", }, "class", "StatementErr4", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"do", "NONE", "while", parExpression{"(", infixExpression{qualIdent{"a", }, "==", primaryBase{"2", }, }, ")", }, ";", }, "}", }, }, "}", }, }

No: 	StatementErr5.java
public class StatementErr5 {
	public static void main(String[] args) {
		a : -2;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "StatementErr5", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{statement{"a", ":", "NONE", }, statement{primaryBase{"2", }, ";", }, }, "}", }, }, "}", }, }

No: 	StatementErr6.java
public class StatementErr6 {
    public static void main(String[] args) {
        for (int i = 0; i < 10; i++)
            = 2;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "StatementErr6", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{basicForStatement{"for", "(", localVariableDeclaration{basicType{"int", }, variableDeclarator{variableDeclaratorId{"i", }, "=", primaryBase{"0", }, }, }, ";", infixExpression{qualIdent{"i", }, "<", primaryBase{"10", }, }, ";", statementExpression{qualIdent{"i", }, "++", }, ")", "NONE", }, statement{primaryBase{"2", }, ";", }, }, "}", }, }, "}", }, }

No: 	StatementErr7.java
public class StatementErr7 {
	public static void main(String[] args) {
		for(int i : 1)
			= 2;
	}
}normalClassDeclaration{classModifier{"public", }, "class", "StatementErr7", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", blockStatements{enhancedForStatement{"for", "(", basicType{"int", }, variableDeclaratorId{"i", }, ":", primaryBase{"1", }, ")", "NONE", }, statement{primaryBase{"2", }, ";", }, }, "}", }, }, "}", }, }

No: 	StatementExpressionErr.java
public class StatementExpressionErr {
	public static void main(String[] args) {
		for (i = 0, ; i < 10; i++) {
			
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "StatementExpressionErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", basicForStatement{"for", "(", statementExpressionList{assignment{qualIdent{"i", }, "=", primaryBase{"0", }, }, ",", "NONE", }, ";", infixExpression{qualIdent{"i", }, "<", primaryBase{"10", }, }, ";", statementExpression{qualIdent{"i", }, "++", }, ")", block{"{", "}", }, }, "}", }, }, "}", }, }

No: 	SwitchBlockErr.java
public class SwitchBlockErr {
	public static void main(String[] args) {
		switch (a) 
			case 1:
				System.out.println("Ok\n");
				break;
			default:
				/* Nothing */
		}
	}
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "SwitchBlockErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"switch", parExpression{"(", qualIdent{"a", }, ")", }, "NONE", }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	TypeArgumentErr.java
public class TypeArgumentErr extends A<B, @> {

}normalClassDeclaration{classModifier{"public", }, "class", "TypeArgumentErr", superclass{"extends", classType{"A", typeArguments{"<", typeArgumentList{classType{"B", }, ",", "NONE", }, ">", }, }, }, classBody{"{", "}", }, }

No: 	TypeParameterErr.java
public class TypeParameterErr<A,> {

}normalClassDeclaration{classModifier{"public", }, "class", "TypeParameterErr", typeParameters{"<", typeParameterList{typeParameter{"A", }, ",", "NONE", }, ">", }, classBody{"{", "}", }, }

No: 	TypeParameterListErr.java
public class TypeParameterListErr<@> {

}normalClassDeclaration{classModifier{"public", }, "class", "TypeParameterListErr", typeParameters{"<", "NONE", ">", }, classBody{"{", "}", }, }

No: 	UnaryExpressionErr1.java
public class UnaryExpressionErr {
    public static void main(String[] args) {
        a = +@;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "UnaryExpressionErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{assignment{qualIdent{"a", }, "=", unaryExpression{"+", "NONE", }, }, ";", }, "}", }, }, "}", }, }

No: 	UnaryExpressionErr2.java
public class MinusEqualGreaterErr {
    public static void main(String[] args) {
        a = -@;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "MinusEqualGreaterErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{assignment{qualIdent{"a", }, "=", unaryExpression{"-", "NONE", }, }, ";", }, "}", }, }, "}", }, }

No: 	UnaryExpressionErr3.java
public class UnaryExpressionErr3 {
    public static void main(String[] args) {
        a = ~@;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "UnaryExpressionErr3", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{assignment{qualIdent{"a", }, "=", unaryExpressionNotPlusMinus{"~", "NONE", }, }, ";", }, "}", }, }, "}", }, }

No: 	UnaryExpressionErr4.java
public class UnaryExpressionErr4 {
    public static void main(String[] args) {
        a = !@;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "UnaryExpressionErr4", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{assignment{qualIdent{"a", }, "=", unaryExpressionNotPlusMinus{"!", "NONE", }, }, ";", }, "}", }, }, "}", }, }

No: 	UnaryExpressionErr5.java
public class UnaryExpressionErr5 {
    public static void main(String[] args) {
        a = (int) @;
    }
}compilation{normalClassDeclaration{classModifier{"public", }, "class", "UnaryExpressionErr5", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", "NONE", }, "NONE", }, }, "NONE", }, }, "NONE", }

No: 	UnaryExpressionErr6.java
public class UnaryExpressionErr6 {
    public static void main(String[] args) {
        a = a || ;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "UnaryExpressionErr6", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"a", "NONE", statement{"a", "NONE", statement{";", }, }, }, "}", }, }, "}", }, }

No: 	VariableDeclaratorErr.java
public class VariableDeclaratorErr {
	private int a, ;

}normalClassDeclaration{classModifier{"public", }, "class", "VariableDeclaratorErr", classBody{"{", fieldDeclaration{fieldModifier{"private", }, basicType{"int", }, variableDeclaratorList{variableDeclaratorId{"a", }, ",", "NONE", }, ";", }, "}", }, }

No: 	VariableDeclaratorIdErr1.java
public class VariableDeclaratorIdErr1 {
    public <A> A method(A ... @) {
        a.set(2);
        return a;
    }
}normalClassDeclaration{classModifier{"public", }, "class", "VariableDeclaratorIdErr1", classBody{"{", methodDeclaration{methodModifier{"public", }, methodHeader{typeParameters{"<", typeParameter{"A", }, ">", }, unannClassType{"A", }, methodDeclarator{"method", "(", formalParameter{unannClassType{"A", }, "...", "NONE", }, ")", }, }, block{"{", blockStatements{statement{primaryBase{qualIdent{"a", ".", "set", }, arguments{"(", primaryBase{"2", }, ")", }, }, ";", }, statement{"return", qualIdent{"a", }, ";", }, }, "}", }, }, "}", }, }

No: 	VariableDeclaratorIdErr2.java
public class VariableDeclaratorIdErr2 {
	public static void main(String[] args) {
		try (int i = 3) { 
			v[i] = 2;
		}
		catch (Expretion 1e) {}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "VariableDeclaratorIdErr2", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", resourceSpecification{"(", resource{basicType{"int", }, variableDeclaratorId{"i", }, "=", primaryBase{"3", }, }, ")", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, catchClause{"catch", "(", catchFormalParameter{unannClassType{"Expretion", }, "NONE", }, ")", block{"{", "}", }, }, }, "}", }, }, "}", }, }

No: 	VariableDeclaratorIdErr3.java
public class VariableDeclaratorIdErr3 {
	public static void main(String[] args) {
		try (int 1i = 3) { 
			v[i] = 2;
		}
	}
}normalClassDeclaration{classModifier{"public", }, "class", "VariableDeclaratorIdErr3", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", tryStatement{"try", resourceSpecification{"(", resource{basicType{"int", }, "NONE", "=", primaryBase{"3", }, }, ")", }, block{"{", statement{assignment{primaryBase{qualIdent{"v", }, "[", qualIdent{"i", }, "]", }, "=", primaryBase{"2", }, }, ";", }, "}", }, }, "}", }, }, "}", }, }

No: 	VariableDeclaratorListErr.java
public interface VariableDeclaratorListErr {
	public A @;
}normalInterfaceDeclaration{interfaceModifier{"public", }, "interface", "VariableDeclaratorListErr", interfaceBody{"{", constantDeclaration{constantModifier{"public", }, unannClassType{"A", }, "NONE", ";", }, "}", }, }

No: 	VariableInitializerErr1.java
public class VariableInitializerErr1 {
	private int a = @;

}normalClassDeclaration{classModifier{"public", }, "class", "VariableInitializerErr1", classBody{"{", fieldDeclaration{fieldModifier{"private", }, basicType{"int", }, variableDeclarator{variableDeclaratorId{"a", }, "=", "NONE", }, ";", }, "}", }, }

No: 	WHILEErr.java
public class WHILEErr {
	public static void main(String[] args) {
		do
			a = 1;
		hile(a == 2);	
	}
}normalClassDeclaration{classModifier{"public", }, "class", "WHILEErr", classBody{"{", methodDeclaration{methodModifier{"public", }, methodModifier{"static", }, methodHeader{result{"void", }, methodDeclarator{"main", "(", formalParameter{unannType{unannClassType{"String", }, dim{"[", "]", }, }, variableDeclaratorId{"args", }, }, ")", }, }, block{"{", statement{"do", statement{assignment{qualIdent{"a", }, "=", primaryBase{"1", }, }, ";", }, "NONE", parExpression{"(", infixExpression{qualIdent{"a", }, "==", primaryBase{"2", }, }, ")", }, ";", }, "}", }, }, "}", }, }

irec: 	175	 ifail: 	0
