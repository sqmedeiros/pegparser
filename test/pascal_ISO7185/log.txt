Regular Annotation
Banned (0): 
program         <-  SKIP head decs [block]^Err_001 [Dot]^Err_002 !.
head            <-  PROGRAM [Id]^Err_003 (LPar [ids]^Err_004 [RPar]^Err_005)? [Semi]^Err_006
decs            <-  labelDecs constDefs typeDefs varDecs procAndFuncDecs
ids             <-  Id (Comma [Id]^Err_007)*
labelDecs       <-  (LABEL [labels]^Err_008 [Semi]^Err_009)?
labels          <-  label (Comma [label]^Err_010)*
label           <-  UInt
constDefs       <-  (CONST [constDef]^Err_011 [Semi]^Err_012 (constDef [Semi]^Err_013)*)?
constDef        <-  Id [Eq]^Err_014 [const]^Err_015
const           <-  Sign? (UNumber  /  Id)  /  String
typeDefs        <-  (TYPE [typeDef]^Err_016 [Semi]^Err_017 (typeDef [Semi]^Err_018)*)?
typeDef         <-  Id [Eq]^Err_019 [type]^Err_020
type            <-  newType  /  Id
newType         <-  newOrdinalType  /  newStructuredType  /  newPointerType
newOrdinalType  <-  enumType  /  subrangeType
newStructuredType <-  PACKED? unpackedStructuredType
newPointerType  <-  Pointer [Id]^Err_021
enumType        <-  LPar [ids]^Err_022 [RPar]^Err_023
subrangeType    <-  const [DotDot]^Err_024 [const]^Err_025
unpackedStructuredType <-  arrayType  /  recordType  /  setType  /  fileType
arrayType       <-  ARRAY [LBrack]^Err_026 [ordinalType]^Err_027 (Comma [ordinalType]^Err_028)* [RBrack]^Err_029 [OF]^Err_030 [type]^Err_031
recordType      <-  RECORD fieldList [END]^Err_032
setType         <-  SET [OF]^Err_033 [ordinalType]^Err_034
fileType        <-  FILE [OF]^Err_035 [type]^Err_036
ordinalType     <-  newOrdinalType  /  Id
fieldList       <-  ((fixedPart (Semi variantPart)?  /  variantPart) Semi?)?
fixedPart       <-  varDec (Semi varDec)*
variantPart     <-  CASE [Id]^Err_037 (Colon [Id]^Err_038)? [OF]^Err_039 [variant]^Err_040 (Semi variant)*
variant         <-  consts [Colon]^Err_041 [LPar]^Err_042 fieldList [RPar]^Err_043
consts          <-  const (Comma [const]^Err_044)*
varDecs         <-  (VAR [varDec]^Err_045 [Semi]^Err_046 (varDec [Semi]^Err_047)*)?
varDec          <-  ids [Colon]^Err_048 [type]^Err_049
procAndFuncDecs <-  ((procDec  /  funcDec) [Semi]^Err_050)*
procDec         <-  procHeading [Semi]^Err_051 [decs block  /  Id]^Err_052
procHeading     <-  PROCEDURE [Id]^Err_053 formalParams?
funcDec         <-  funcHeading [Semi]^Err_054 [decs block  /  Id]^Err_055
funcHeading     <-  FUNCTION [Id]^Err_056 formalParams? [Colon]^Err_057 [type]^Err_058
formalParams    <-  LPar [formalParamsSection]^Err_059 (Semi [formalParamsSection]^Err_060)* [RPar]^Err_061
formalParamsSection <-  VAR? ids [Colon]^Err_062 [Id]^Err_063  /  procHeading  /  funcHeading
block           <-  BEGIN stmts [END]^Err_064
stmts           <-  stmt (Semi stmt)*
stmt            <-  (label [Colon]^Err_065)? (simpleStmt  /  structuredStmt)?
simpleStmt      <-  assignStmt  /  procStmt  /  gotoStmt
assignStmt      <-  var [Assign]^Err_066 [expr]^Err_067
var             <-  Id (LBrack [expr]^Err_068 (Comma [expr]^Err_069)* [RBrack]^Err_070  /  Dot [Id]^Err_071  /  Pointer)*
procStmt        <-  Id params?
params          <-  LPar (param (Comma [param]^Err_072)*)? [RPar]^Err_073
param           <-  expr (Colon expr)? (Colon [expr]^Err_074)?
gotoStmt        <-  GOTO [label]^Err_075
structuredStmt  <-  block  /  conditionalStmt  /  repetitiveStmt  /  withStmt
conditionalStmt <-  ifStmt  /  caseStmt
ifStmt          <-  IF [expr]^Err_076 [THEN]^Err_077 stmt (ELSE stmt)?
caseStmt        <-  CASE [expr]^Err_078 [OF]^Err_079 [caseListElement]^Err_080 (Semi caseListElement)* Semi? [END]^Err_081
caseListElement <-  consts [Colon]^Err_082 stmt
repetitiveStmt  <-  repeatStmt  /  whileStmt  /  forStmt
repeatStmt      <-  REPEAT stmts [UNTIL]^Err_083 [expr]^Err_084
whileStmt       <-  WHILE [expr]^Err_085 [DO]^Err_086 stmt
forStmt         <-  FOR [Id]^Err_087 [Assign]^Err_088 [expr]^Err_089 [TO  /  DOWNTO]^Err_090 [expr]^Err_091 [DO]^Err_092 stmt
withStmt        <-  WITH [var]^Err_093 (Comma [var]^Err_094)* [DO]^Err_095 stmt
expr            <-  simpleExpr (RelOp [simpleExpr]^Err_096)?
simpleExpr      <-  Sign? term (AddOp [term]^Err_097)*
term            <-  factor (MultOp [factor]^Err_098)*
factor          <-  NOT* (funcCall  /  var  /  unsignedConst  /  setConstructor  /  LPar [expr]^Err_099 [RPar]^Err_100)
unsignedConst   <-  UNumber  /  String  /  Id  /  NIL
funcCall        <-  Id [params]^Err_101
setConstructor  <-  LBrack (memberDesignator (Comma [memberDesignator]^Err_102)*)? [RBrack]^Err_103
memberDesignator <-  expr (DotDot [expr]^Err_104)?
AddOp           <-  '+'  /  '-'  /  OR
Assign          <-  ':='
Dot             <-  '.'
DotDot          <-  '..'
CloseComment    <-  '*)'  /  '}'
Colon           <-  ':'
Comma           <-  ','
COMMENT         <-  OpenComment (!CloseComment .)* CloseComment
Eq              <-  '='
BodyId          <-  [a-zA-Z0-9]
Id              <-  !Reserved [a-zA-Z] [a-zA-Z0-9]*
LBrack          <-  '['
LPar            <-  '('
MultOp          <-  '*'  /  '/'  /  DIV  /  MOD  /  AND
OpenComment     <-  '(*'  /  '{'
Pointer         <-  '^'
RBrack          <-  ']'
RelOp           <-  '<='  /  '='  /  '<>'  /  '>='  /  '>'  /  '<'  /  IN
RPar            <-  ')'
Semi            <-  ';'
Sign            <-  '+'  /  '-'
String          <-  "'" (!"'" .)* "'"
UInt            <-  [0-9]+
UNumber         <-  UReal  /  UInt
UReal           <-  [0-9]+ ('.' [0-9]+ ([Ee] ('+'  /  '-') [0-9]+)?  /  [Ee] ('+'  /  '-') [0-9]+)
Reserved        <-  AND  /  ARRAY  /  BEGIN  /  CONST  /  CASE  /  DIV  /  DO  /  DOWNTO  /  ELSE  /  END  /  FILE  /  FOR  /  FUNCTION  /  GOTO  /  IF  /  IN  /  LABEL  /  MOD  /  NIL  /  NOT  /  OF  /  OR  /  PACKED  /  PROCEDURE  /  PROGRAM  /  RECORD  /  REPEAT  /  SET  /  THEN  /  TO  /  TYPE  /  UNTIL  /  VAR  /  WHILE  /  WITH
AND             <-  [Aa] [Nn] [Dd] !BodyId
ARRAY           <-  [Aa] [Rr] [Rr] [Aa] [Yy] !BodyId
BEGIN           <-  [Bb] [Ee] [Gg] [Ii] [Nn] !BodyId
CASE            <-  [Cc] [Aa] [Ss] [Ee] !BodyId
CONST           <-  [Cc] [Oo] [Nn] [Ss] [Tt] !BodyId
DIV             <-  [Dd] [Ii] [Vv] !BodyId
DO              <-  [Dd] [Oo] !BodyId
DOWNTO          <-  [Dd] [Oo] [Ww] [Nn] [Tt] [Oo] !BodyId
ELSE            <-  [Ee] [Ll] [Ss] [Ee] !BodyId
END             <-  [Ee] [Nn] [Dd] !BodyId
FILE            <-  [Ff] [Ii] [Ll] [Ee] !BodyId
FOR             <-  [Ff] [Oo] [Rr] !BodyId
FUNCTION        <-  [Ff] [Uu] [Nn] [Cc] [Tt] [Ii] [Oo] [Nn] !BodyId
GOTO            <-  [Gg] [Oo] [Tt] [Oo] !BodyId
IF              <-  [Ii] [Ff] !BodyId
IN              <-  [Ii] [Nn] !BodyId
LABEL           <-  [Ll] [Aa] [Bb] [Ee] [Ll] !BodyId
MOD             <-  [Mm] [Oo] [Dd] !BodyId
NIL             <-  [Nn] [Ii] [Ll] !BodyId
NOT             <-  [Nn] [Oo] [Tt] !BodyId
OF              <-  [Oo] [Ff] !BodyId
OR              <-  [Oo] [Rr] !BodyId
PACKED          <-  [Pp] [Aa] [Cc] [Kk] [Ee] [Dd] !BodyId
PROCEDURE       <-  [Pp] [Rr] [Oo] [Cc] [Ee] [Dd] [Uu] [Rr] [Ee] !BodyId
PROGRAM         <-  [Pp] [Rr] [Oo] [Gg] [Rr] [Aa] [Mm] !BodyId
RECORD          <-  [Rr] [Ee] [Cc] [Oo] [Rr] [Dd] !BodyId
REPEAT          <-  [Rr] [Ee] [Pp] [Ee] [Aa] [Tt] !BodyId
SET             <-  [Ss] [Ee] [Tt] !BodyId
THEN            <-  [Tt] [Hh] [Ee] [Nn] !BodyId
TO              <-  [Tt] [Oo] !BodyId
TYPE            <-  [Tt] [Yy] [Pp] [Ee] !BodyId
UNTIL           <-  [Uu] [Nn] [Tt] [Ii] [Ll] !BodyId
VAR             <-  [Vv] [Aa] [Rr] !BodyId
WHILE           <-  [Ww] [Hh] [Ii] [Ll] [Ee] !BodyId
WITH            <-  [Ww] [Ii] [Tt] [Hh] !BodyId
SKIP            <-  ([ 	
]  /  COMMENT)*
Token           <-  WITH  /  WHILE  /  VAR  /  UReal  /  UNumber  /  UNTIL  /  UInt  /  TYPE  /  TO  /  THEN  /  String  /  Sign  /  Semi  /  SET  /  Reserved  /  RelOp  /  RPar  /  REPEAT  /  RECORD  /  RBrack  /  Pointer  /  PROGRAM  /  PROCEDURE  /  PACKED  /  OpenComment  /  OR  /  OF  /  NOT  /  NIL  /  MultOp  /  MOD  /  LPar  /  LBrack  /  LABEL  /  Id  /  IN  /  IF  /  GOTO  /  FUNCTION  /  FOR  /  FILE  /  Eq  /  END  /  ELSE  /  DotDot  /  Dot  /  DOWNTO  /  DO  /  DIV  /  Comma  /  Colon  /  CloseComment  /  CONST  /  COMMENT  /  CASE  /  BodyId  /  BEGIN  /  Assign  /  AddOp  /  ARRAY  /  AND
EatToken        <-  (Token  /  (!SKIP .)+) SKIP
Err_001         <-  (!Dot EatToken)*
Err_002         <-  (!(!.) EatToken)*
Err_003         <-  (!(Semi  /  LPar) EatToken)*
Err_004         <-  (!RPar EatToken)*
Err_005         <-  (!Semi EatToken)*
Err_006         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  LABEL  /  FUNCTION  /  CONST  /  BEGIN) EatToken)*
Err_007         <-  (!(RPar  /  Colon) EatToken)*
Err_008         <-  (!Semi EatToken)*
Err_009         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  FUNCTION  /  CONST  /  BEGIN) EatToken)*
Err_010         <-  (!Semi EatToken)*
Err_011         <-  (!Semi EatToken)*
Err_012         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  Id  /  FUNCTION  /  BEGIN) EatToken)*
Err_013         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  FUNCTION  /  BEGIN) EatToken)*
Err_014         <-  (!(UNumber  /  String  /  Sign  /  Id) EatToken)*
Err_015         <-  (!Semi EatToken)*
Err_016         <-  (!Semi EatToken)*
Err_017         <-  (!(VAR  /  PROCEDURE  /  Id  /  FUNCTION  /  BEGIN) EatToken)*
Err_018         <-  (!(VAR  /  PROCEDURE  /  FUNCTION  /  BEGIN) EatToken)*
Err_019         <-  (!(UNumber  /  String  /  Sign  /  SET  /  RECORD  /  Pointer  /  PACKED  /  LPar  /  Id  /  FILE  /  ARRAY) EatToken)*
Err_020         <-  (!Semi EatToken)*
Err_021         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_022         <-  (!RPar EatToken)*
Err_023         <-  (!(Semi  /  RPar  /  RBrack  /  END  /  Comma) EatToken)*
Err_024         <-  (!(UNumber  /  String  /  Sign  /  Id) EatToken)*
Err_025         <-  (!(Semi  /  RPar  /  RBrack  /  END  /  Comma) EatToken)*
Err_026         <-  (!(UNumber  /  String  /  Sign  /  LPar  /  Id) EatToken)*
Err_027         <-  (!(RBrack  /  Comma) EatToken)*
Err_028         <-  (!RBrack EatToken)*
Err_029         <-  (!OF EatToken)*
Err_030         <-  (!(UNumber  /  String  /  Sign  /  SET  /  RECORD  /  Pointer  /  PACKED  /  LPar  /  Id  /  FILE  /  ARRAY) EatToken)*
Err_031         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_032         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_033         <-  (!(UNumber  /  String  /  Sign  /  LPar  /  Id) EatToken)*
Err_034         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_035         <-  (!(UNumber  /  String  /  Sign  /  SET  /  RECORD  /  Pointer  /  PACKED  /  LPar  /  Id  /  FILE  /  ARRAY) EatToken)*
Err_036         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_037         <-  (!(OF  /  Colon) EatToken)*
Err_038         <-  (!OF EatToken)*
Err_039         <-  (!(UNumber  /  String  /  Sign  /  Id) EatToken)*
Err_040         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_041         <-  (!LPar EatToken)*
Err_042         <-  (!(RPar  /  Id  /  CASE) EatToken)*
Err_043         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_044         <-  (!Colon EatToken)*
Err_045         <-  (!Semi EatToken)*
Err_046         <-  (!(PROCEDURE  /  Id  /  FUNCTION  /  BEGIN) EatToken)*
Err_047         <-  (!(PROCEDURE  /  FUNCTION  /  BEGIN) EatToken)*
Err_048         <-  (!(UNumber  /  String  /  Sign  /  SET  /  RECORD  /  Pointer  /  PACKED  /  LPar  /  Id  /  FILE  /  ARRAY) EatToken)*
Err_049         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_050         <-  (!BEGIN EatToken)*
Err_051         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  LABEL  /  Id  /  FUNCTION  /  CONST  /  BEGIN) EatToken)*
Err_052         <-  (!Semi EatToken)*
Err_053         <-  (!(Semi  /  RPar  /  LPar) EatToken)*
Err_054         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  LABEL  /  Id  /  FUNCTION  /  CONST  /  BEGIN) EatToken)*
Err_055         <-  (!Semi EatToken)*
Err_056         <-  (!(LPar  /  Colon) EatToken)*
Err_057         <-  (!(UNumber  /  String  /  Sign  /  SET  /  RECORD  /  Pointer  /  PACKED  /  LPar  /  Id  /  FILE  /  ARRAY) EatToken)*
Err_058         <-  (!(Semi  /  RPar) EatToken)*
Err_059         <-  (!(Semi  /  RPar) EatToken)*
Err_060         <-  (!RPar EatToken)*
Err_061         <-  (!(Semi  /  RPar  /  Colon) EatToken)*
Err_062         <-  (!Id EatToken)*
Err_063         <-  (!(Semi  /  RPar) EatToken)*
Err_064         <-  (!(UNTIL  /  Semi  /  END  /  ELSE  /  Dot) EatToken)*
Err_065         <-  (!(WITH  /  WHILE  /  UNTIL  /  Semi  /  REPEAT  /  Id  /  IF  /  GOTO  /  FOR  /  END  /  ELSE  /  CASE  /  BEGIN) EatToken)*
Err_066         <-  (!(UNumber  /  String  /  Sign  /  NOT  /  NIL  /  LPar  /  LBrack  /  Id) EatToken)*
Err_067         <-  (!(UNTIL  /  Semi  /  END  /  ELSE) EatToken)*
Err_068         <-  (!(RBrack  /  Comma) EatToken)*
Err_069         <-  (!RBrack EatToken)*
Err_070         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  MultOp  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  Assign  /  AddOp) EatToken)*
Err_071         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  MultOp  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  Assign  /  AddOp) EatToken)*
Err_072         <-  (!RPar EatToken)*
Err_073         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  MultOp  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  AddOp) EatToken)*
Err_074         <-  (!(RPar  /  Comma) EatToken)*
Err_075         <-  (!(UNTIL  /  Semi  /  END  /  ELSE) EatToken)*
Err_076         <-  (!THEN EatToken)*
Err_077         <-  (!(WITH  /  WHILE  /  UNTIL  /  UInt  /  Semi  /  REPEAT  /  Id  /  IF  /  GOTO  /  FOR  /  END  /  ELSE  /  CASE  /  BEGIN) EatToken)*
Err_078         <-  (!OF EatToken)*
Err_079         <-  (!(UNumber  /  String  /  Sign  /  Id) EatToken)*
Err_080         <-  (!(Semi  /  END) EatToken)*
Err_081         <-  (!(UNTIL  /  Semi  /  END  /  ELSE) EatToken)*
Err_082         <-  (!(WITH  /  WHILE  /  UInt  /  Semi  /  REPEAT  /  Id  /  IF  /  GOTO  /  FOR  /  END  /  CASE  /  BEGIN) EatToken)*
Err_083         <-  (!(UNumber  /  String  /  Sign  /  NOT  /  NIL  /  LPar  /  LBrack  /  Id) EatToken)*
Err_084         <-  (!(UNTIL  /  Semi  /  END  /  ELSE) EatToken)*
Err_085         <-  (!DO EatToken)*
Err_086         <-  (!(WITH  /  WHILE  /  UNTIL  /  UInt  /  Semi  /  REPEAT  /  Id  /  IF  /  GOTO  /  FOR  /  END  /  ELSE  /  CASE  /  BEGIN) EatToken)*
Err_087         <-  (!Assign EatToken)*
Err_088         <-  (!(UNumber  /  String  /  Sign  /  NOT  /  NIL  /  LPar  /  LBrack  /  Id) EatToken)*
Err_089         <-  (!(TO  /  DOWNTO) EatToken)*
Err_090         <-  (!(UNumber  /  String  /  Sign  /  NOT  /  NIL  /  LPar  /  LBrack  /  Id) EatToken)*
Err_091         <-  (!DO EatToken)*
Err_092         <-  (!(WITH  /  WHILE  /  UNTIL  /  UInt  /  Semi  /  REPEAT  /  Id  /  IF  /  GOTO  /  FOR  /  END  /  ELSE  /  CASE  /  BEGIN) EatToken)*
Err_093         <-  (!(DO  /  Comma) EatToken)*
Err_094         <-  (!DO EatToken)*
Err_095         <-  (!(WITH  /  WHILE  /  UNTIL  /  UInt  /  Semi  /  REPEAT  /  Id  /  IF  /  GOTO  /  FOR  /  END  /  ELSE  /  CASE  /  BEGIN) EatToken)*
Err_096         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RPar  /  RBrack  /  OF  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon) EatToken)*
Err_097         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon) EatToken)*
Err_098         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  AddOp) EatToken)*
Err_099         <-  (!RPar EatToken)*
Err_100         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  MultOp  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  AddOp) EatToken)*
Err_101         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  MultOp  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  AddOp) EatToken)*
Err_102         <-  (!RBrack EatToken)*
Err_103         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  MultOp  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  AddOp) EatToken)*
Err_104         <-  (!(RBrack  /  Comma) EatToken)*




Conservative Annotation (Hard)
Banned (15): assignStmt, caseListElement, expr, funcCall, gotoStmt, newOrdinalType, newType, procStmt, setConstructor, stmt, unsignedConst, var, varDec, variant, variantPart, 
program         <-  SKIP head decs [block]^Err_001 [Dot]^Err_002 !.
head            <-  PROGRAM [Id]^Err_003 (LPar [ids]^Err_004 [RPar]^Err_005)? [Semi]^Err_006
decs            <-  labelDecs constDefs typeDefs varDecs procAndFuncDecs
ids             <-  Id (Comma [Id]^Err_007)*
labelDecs       <-  (LABEL [labels]^Err_008 [Semi]^Err_009)?
labels          <-  label (Comma [label]^Err_010)*
label           <-  UInt
constDefs       <-  (CONST [constDef]^Err_011 [Semi]^Err_012 (constDef [Semi]^Err_013)*)?
constDef        <-  Id [Eq]^Err_014 [const]^Err_015
const           <-  Sign? (UNumber  /  Id)  /  String
typeDefs        <-  (TYPE [typeDef]^Err_016 [Semi]^Err_017 (typeDef [Semi]^Err_018)*)?
typeDef         <-  Id [Eq]^Err_019 [type]^Err_020
type            <-  newType  /  Id
newType         <-  newOrdinalType  /  newStructuredType  /  newPointerType
newOrdinalType  <-  enumType  /  subrangeType
newStructuredType <-  PACKED? unpackedStructuredType
newPointerType  <-  Pointer [Id]^Err_021
enumType        <-  LPar [ids]^Err_022 [RPar]^Err_023
subrangeType    <-  const [DotDot]^Err_024 [const]^Err_025
unpackedStructuredType <-  arrayType  /  recordType  /  setType  /  fileType
arrayType       <-  ARRAY [LBrack]^Err_026 [ordinalType]^Err_027 (Comma [ordinalType]^Err_028)* [RBrack]^Err_029 [OF]^Err_030 [type]^Err_031
recordType      <-  RECORD fieldList [END]^Err_032
setType         <-  SET [OF]^Err_033 [ordinalType]^Err_034
fileType        <-  FILE [OF]^Err_035 [type]^Err_036
ordinalType     <-  newOrdinalType  /  Id
fieldList       <-  ((fixedPart (Semi variantPart)?  /  variantPart) Semi?)?
fixedPart       <-  varDec (Semi varDec)*
variantPart     <-  CASE Id (Colon Id)? OF variant (Semi variant)*
variant         <-  consts Colon LPar fieldList RPar
consts          <-  const (Comma [const]^Err_037)*
varDecs         <-  (VAR [varDec]^Err_038 [Semi]^Err_039 (varDec [Semi]^Err_040)*)?
varDec          <-  ids Colon type
procAndFuncDecs <-  ((procDec  /  funcDec) [Semi]^Err_041)*
procDec         <-  procHeading [Semi]^Err_042 [decs block  /  Id]^Err_043
procHeading     <-  PROCEDURE [Id]^Err_044 formalParams?
funcDec         <-  funcHeading [Semi]^Err_045 [decs block  /  Id]^Err_046
funcHeading     <-  FUNCTION [Id]^Err_047 formalParams? [Colon]^Err_048 [type]^Err_049
formalParams    <-  LPar [formalParamsSection]^Err_050 (Semi [formalParamsSection]^Err_051)* [RPar]^Err_052
formalParamsSection <-  VAR? ids [Colon]^Err_053 [Id]^Err_054  /  procHeading  /  funcHeading
block           <-  BEGIN stmts [END]^Err_055
stmts           <-  stmt (Semi stmt)*
stmt            <-  (label Colon)? (simpleStmt  /  structuredStmt)?
simpleStmt      <-  assignStmt  /  procStmt  /  gotoStmt
assignStmt      <-  var Assign expr
var             <-  Id (LBrack expr (Comma expr)* RBrack  /  Dot Id  /  Pointer)*
procStmt        <-  Id params?
params          <-  LPar (param (Comma [param]^Err_056)*)? [RPar]^Err_057
param           <-  expr (Colon expr)? (Colon [expr]^Err_058)?
gotoStmt        <-  GOTO label
structuredStmt  <-  block  /  conditionalStmt  /  repetitiveStmt  /  withStmt
conditionalStmt <-  ifStmt  /  caseStmt
ifStmt          <-  IF [expr]^Err_059 [THEN]^Err_060 stmt (ELSE stmt)?
caseStmt        <-  CASE [expr]^Err_061 [OF]^Err_062 [caseListElement]^Err_063 (Semi caseListElement)* Semi? [END]^Err_064
caseListElement <-  consts Colon stmt
repetitiveStmt  <-  repeatStmt  /  whileStmt  /  forStmt
repeatStmt      <-  REPEAT stmts [UNTIL]^Err_065 [expr]^Err_066
whileStmt       <-  WHILE [expr]^Err_067 [DO]^Err_068 stmt
forStmt         <-  FOR [Id]^Err_069 [Assign]^Err_070 [expr]^Err_071 [TO  /  DOWNTO]^Err_072 [expr]^Err_073 [DO]^Err_074 stmt
withStmt        <-  WITH [var]^Err_075 (Comma [var]^Err_076)* [DO]^Err_077 stmt
expr            <-  simpleExpr (RelOp simpleExpr)?
simpleExpr      <-  Sign? term (AddOp [term]^Err_078)*
term            <-  factor (MultOp [factor]^Err_079)*
factor          <-  NOT* (funcCall  /  var  /  unsignedConst  /  setConstructor  /  LPar [expr]^Err_080 [RPar]^Err_081)
unsignedConst   <-  UNumber  /  String  /  Id  /  NIL
funcCall        <-  Id params
setConstructor  <-  LBrack (memberDesignator (Comma memberDesignator)*)? RBrack
memberDesignator <-  expr (DotDot [expr]^Err_082)?
AddOp           <-  '+'  /  '-'  /  OR
Assign          <-  ':='
Dot             <-  '.'
DotDot          <-  '..'
CloseComment    <-  '*)'  /  '}'
Colon           <-  ':'
Comma           <-  ','
COMMENT         <-  OpenComment (!CloseComment .)* CloseComment
Eq              <-  '='
BodyId          <-  [a-zA-Z0-9]
Id              <-  !Reserved [a-zA-Z] [a-zA-Z0-9]*
LBrack          <-  '['
LPar            <-  '('
MultOp          <-  '*'  /  '/'  /  DIV  /  MOD  /  AND
OpenComment     <-  '(*'  /  '{'
Pointer         <-  '^'
RBrack          <-  ']'
RelOp           <-  '<='  /  '='  /  '<>'  /  '>='  /  '>'  /  '<'  /  IN
RPar            <-  ')'
Semi            <-  ';'
Sign            <-  '+'  /  '-'
String          <-  "'" (!"'" .)* "'"
UInt            <-  [0-9]+
UNumber         <-  UReal  /  UInt
UReal           <-  [0-9]+ ('.' [0-9]+ ([Ee] ('+'  /  '-') [0-9]+)?  /  [Ee] ('+'  /  '-') [0-9]+)
Reserved        <-  AND  /  ARRAY  /  BEGIN  /  CONST  /  CASE  /  DIV  /  DO  /  DOWNTO  /  ELSE  /  END  /  FILE  /  FOR  /  FUNCTION  /  GOTO  /  IF  /  IN  /  LABEL  /  MOD  /  NIL  /  NOT  /  OF  /  OR  /  PACKED  /  PROCEDURE  /  PROGRAM  /  RECORD  /  REPEAT  /  SET  /  THEN  /  TO  /  TYPE  /  UNTIL  /  VAR  /  WHILE  /  WITH
AND             <-  [Aa] [Nn] [Dd] !BodyId
ARRAY           <-  [Aa] [Rr] [Rr] [Aa] [Yy] !BodyId
BEGIN           <-  [Bb] [Ee] [Gg] [Ii] [Nn] !BodyId
CASE            <-  [Cc] [Aa] [Ss] [Ee] !BodyId
CONST           <-  [Cc] [Oo] [Nn] [Ss] [Tt] !BodyId
DIV             <-  [Dd] [Ii] [Vv] !BodyId
DO              <-  [Dd] [Oo] !BodyId
DOWNTO          <-  [Dd] [Oo] [Ww] [Nn] [Tt] [Oo] !BodyId
ELSE            <-  [Ee] [Ll] [Ss] [Ee] !BodyId
END             <-  [Ee] [Nn] [Dd] !BodyId
FILE            <-  [Ff] [Ii] [Ll] [Ee] !BodyId
FOR             <-  [Ff] [Oo] [Rr] !BodyId
FUNCTION        <-  [Ff] [Uu] [Nn] [Cc] [Tt] [Ii] [Oo] [Nn] !BodyId
GOTO            <-  [Gg] [Oo] [Tt] [Oo] !BodyId
IF              <-  [Ii] [Ff] !BodyId
IN              <-  [Ii] [Nn] !BodyId
LABEL           <-  [Ll] [Aa] [Bb] [Ee] [Ll] !BodyId
MOD             <-  [Mm] [Oo] [Dd] !BodyId
NIL             <-  [Nn] [Ii] [Ll] !BodyId
NOT             <-  [Nn] [Oo] [Tt] !BodyId
OF              <-  [Oo] [Ff] !BodyId
OR              <-  [Oo] [Rr] !BodyId
PACKED          <-  [Pp] [Aa] [Cc] [Kk] [Ee] [Dd] !BodyId
PROCEDURE       <-  [Pp] [Rr] [Oo] [Cc] [Ee] [Dd] [Uu] [Rr] [Ee] !BodyId
PROGRAM         <-  [Pp] [Rr] [Oo] [Gg] [Rr] [Aa] [Mm] !BodyId
RECORD          <-  [Rr] [Ee] [Cc] [Oo] [Rr] [Dd] !BodyId
REPEAT          <-  [Rr] [Ee] [Pp] [Ee] [Aa] [Tt] !BodyId
SET             <-  [Ss] [Ee] [Tt] !BodyId
THEN            <-  [Tt] [Hh] [Ee] [Nn] !BodyId
TO              <-  [Tt] [Oo] !BodyId
TYPE            <-  [Tt] [Yy] [Pp] [Ee] !BodyId
UNTIL           <-  [Uu] [Nn] [Tt] [Ii] [Ll] !BodyId
VAR             <-  [Vv] [Aa] [Rr] !BodyId
WHILE           <-  [Ww] [Hh] [Ii] [Ll] [Ee] !BodyId
WITH            <-  [Ww] [Ii] [Tt] [Hh] !BodyId
SKIP            <-  ([ 	
]  /  COMMENT)*
Token           <-  WITH  /  WHILE  /  VAR  /  UReal  /  UNumber  /  UNTIL  /  UInt  /  TYPE  /  TO  /  THEN  /  String  /  Sign  /  Semi  /  SET  /  Reserved  /  RelOp  /  RPar  /  REPEAT  /  RECORD  /  RBrack  /  Pointer  /  PROGRAM  /  PROCEDURE  /  PACKED  /  OpenComment  /  OR  /  OF  /  NOT  /  NIL  /  MultOp  /  MOD  /  LPar  /  LBrack  /  LABEL  /  Id  /  IN  /  IF  /  GOTO  /  FUNCTION  /  FOR  /  FILE  /  Eq  /  END  /  ELSE  /  DotDot  /  Dot  /  DOWNTO  /  DO  /  DIV  /  Comma  /  Colon  /  CloseComment  /  CONST  /  COMMENT  /  CASE  /  BodyId  /  BEGIN  /  Assign  /  AddOp  /  ARRAY  /  AND
EatToken        <-  (Token  /  (!SKIP .)+) SKIP
Err_001         <-  (!Dot EatToken)*
Err_002         <-  (!(!.) EatToken)*
Err_003         <-  (!(Semi  /  LPar) EatToken)*
Err_004         <-  (!RPar EatToken)*
Err_005         <-  (!Semi EatToken)*
Err_006         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  LABEL  /  FUNCTION  /  CONST  /  BEGIN) EatToken)*
Err_007         <-  (!(RPar  /  Colon) EatToken)*
Err_008         <-  (!Semi EatToken)*
Err_009         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  FUNCTION  /  CONST  /  BEGIN) EatToken)*
Err_010         <-  (!Semi EatToken)*
Err_011         <-  (!Semi EatToken)*
Err_012         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  Id  /  FUNCTION  /  BEGIN) EatToken)*
Err_013         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  FUNCTION  /  BEGIN) EatToken)*
Err_014         <-  (!(UNumber  /  String  /  Sign  /  Id) EatToken)*
Err_015         <-  (!Semi EatToken)*
Err_016         <-  (!Semi EatToken)*
Err_017         <-  (!(VAR  /  PROCEDURE  /  Id  /  FUNCTION  /  BEGIN) EatToken)*
Err_018         <-  (!(VAR  /  PROCEDURE  /  FUNCTION  /  BEGIN) EatToken)*
Err_019         <-  (!(UNumber  /  String  /  Sign  /  SET  /  RECORD  /  Pointer  /  PACKED  /  LPar  /  Id  /  FILE  /  ARRAY) EatToken)*
Err_020         <-  (!Semi EatToken)*
Err_021         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_022         <-  (!RPar EatToken)*
Err_023         <-  (!(Semi  /  RPar  /  RBrack  /  END  /  Comma) EatToken)*
Err_024         <-  (!(UNumber  /  String  /  Sign  /  Id) EatToken)*
Err_025         <-  (!(Semi  /  RPar  /  RBrack  /  END  /  Comma) EatToken)*
Err_026         <-  (!(UNumber  /  String  /  Sign  /  LPar  /  Id) EatToken)*
Err_027         <-  (!(RBrack  /  Comma) EatToken)*
Err_028         <-  (!RBrack EatToken)*
Err_029         <-  (!OF EatToken)*
Err_030         <-  (!(UNumber  /  String  /  Sign  /  SET  /  RECORD  /  Pointer  /  PACKED  /  LPar  /  Id  /  FILE  /  ARRAY) EatToken)*
Err_031         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_032         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_033         <-  (!(UNumber  /  String  /  Sign  /  LPar  /  Id) EatToken)*
Err_034         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_035         <-  (!(UNumber  /  String  /  Sign  /  SET  /  RECORD  /  Pointer  /  PACKED  /  LPar  /  Id  /  FILE  /  ARRAY) EatToken)*
Err_036         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_037         <-  (!Colon EatToken)*
Err_038         <-  (!Semi EatToken)*
Err_039         <-  (!(PROCEDURE  /  Id  /  FUNCTION  /  BEGIN) EatToken)*
Err_040         <-  (!(PROCEDURE  /  FUNCTION  /  BEGIN) EatToken)*
Err_041         <-  (!BEGIN EatToken)*
Err_042         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  LABEL  /  Id  /  FUNCTION  /  CONST  /  BEGIN) EatToken)*
Err_043         <-  (!Semi EatToken)*
Err_044         <-  (!(Semi  /  RPar  /  LPar) EatToken)*
Err_045         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  LABEL  /  Id  /  FUNCTION  /  CONST  /  BEGIN) EatToken)*
Err_046         <-  (!Semi EatToken)*
Err_047         <-  (!(LPar  /  Colon) EatToken)*
Err_048         <-  (!(UNumber  /  String  /  Sign  /  SET  /  RECORD  /  Pointer  /  PACKED  /  LPar  /  Id  /  FILE  /  ARRAY) EatToken)*
Err_049         <-  (!(Semi  /  RPar) EatToken)*
Err_050         <-  (!(Semi  /  RPar) EatToken)*
Err_051         <-  (!RPar EatToken)*
Err_052         <-  (!(Semi  /  RPar  /  Colon) EatToken)*
Err_053         <-  (!Id EatToken)*
Err_054         <-  (!(Semi  /  RPar) EatToken)*
Err_055         <-  (!(UNTIL  /  Semi  /  END  /  ELSE  /  Dot) EatToken)*
Err_056         <-  (!RPar EatToken)*
Err_057         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  MultOp  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  AddOp) EatToken)*
Err_058         <-  (!(RPar  /  Comma) EatToken)*
Err_059         <-  (!THEN EatToken)*
Err_060         <-  (!(WITH  /  WHILE  /  UNTIL  /  UInt  /  Semi  /  REPEAT  /  Id  /  IF  /  GOTO  /  FOR  /  END  /  ELSE  /  CASE  /  BEGIN) EatToken)*
Err_061         <-  (!OF EatToken)*
Err_062         <-  (!(UNumber  /  String  /  Sign  /  Id) EatToken)*
Err_063         <-  (!(Semi  /  END) EatToken)*
Err_064         <-  (!(UNTIL  /  Semi  /  END  /  ELSE) EatToken)*
Err_065         <-  (!(UNumber  /  String  /  Sign  /  NOT  /  NIL  /  LPar  /  LBrack  /  Id) EatToken)*
Err_066         <-  (!(UNTIL  /  Semi  /  END  /  ELSE) EatToken)*
Err_067         <-  (!DO EatToken)*
Err_068         <-  (!(WITH  /  WHILE  /  UNTIL  /  UInt  /  Semi  /  REPEAT  /  Id  /  IF  /  GOTO  /  FOR  /  END  /  ELSE  /  CASE  /  BEGIN) EatToken)*
Err_069         <-  (!Assign EatToken)*
Err_070         <-  (!(UNumber  /  String  /  Sign  /  NOT  /  NIL  /  LPar  /  LBrack  /  Id) EatToken)*
Err_071         <-  (!(TO  /  DOWNTO) EatToken)*
Err_072         <-  (!(UNumber  /  String  /  Sign  /  NOT  /  NIL  /  LPar  /  LBrack  /  Id) EatToken)*
Err_073         <-  (!DO EatToken)*
Err_074         <-  (!(WITH  /  WHILE  /  UNTIL  /  UInt  /  Semi  /  REPEAT  /  Id  /  IF  /  GOTO  /  FOR  /  END  /  ELSE  /  CASE  /  BEGIN) EatToken)*
Err_075         <-  (!(DO  /  Comma) EatToken)*
Err_076         <-  (!DO EatToken)*
Err_077         <-  (!(WITH  /  WHILE  /  UNTIL  /  UInt  /  Semi  /  REPEAT  /  Id  /  IF  /  GOTO  /  FOR  /  END  /  ELSE  /  CASE  /  BEGIN) EatToken)*
Err_078         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon) EatToken)*
Err_079         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  AddOp) EatToken)*
Err_080         <-  (!RPar EatToken)*
Err_081         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  MultOp  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  AddOp) EatToken)*
Err_082         <-  (!(RBrack  /  Comma) EatToken)*




Conservative Annotation (Soft)
Banned (8): caseListElement, expr, newOrdinalType, newType, stmt, varDec, variant, variantPart, 
program         <-  SKIP head decs [block]^Err_001 [Dot]^Err_002 !.
head            <-  PROGRAM [Id]^Err_003 (LPar [ids]^Err_004 [RPar]^Err_005)? [Semi]^Err_006
decs            <-  labelDecs constDefs typeDefs varDecs procAndFuncDecs
ids             <-  Id (Comma [Id]^Err_007)*
labelDecs       <-  (LABEL [labels]^Err_008 [Semi]^Err_009)?
labels          <-  label (Comma [label]^Err_010)*
label           <-  UInt
constDefs       <-  (CONST [constDef]^Err_011 [Semi]^Err_012 (constDef [Semi]^Err_013)*)?
constDef        <-  Id [Eq]^Err_014 [const]^Err_015
const           <-  Sign? (UNumber  /  Id)  /  String
typeDefs        <-  (TYPE [typeDef]^Err_016 [Semi]^Err_017 (typeDef [Semi]^Err_018)*)?
typeDef         <-  Id [Eq]^Err_019 [type]^Err_020
type            <-  newType  /  Id
newType         <-  newOrdinalType  /  newStructuredType  /  newPointerType
newOrdinalType  <-  enumType  /  subrangeType
newStructuredType <-  PACKED? unpackedStructuredType
newPointerType  <-  Pointer [Id]^Err_021
enumType        <-  LPar [ids]^Err_022 [RPar]^Err_023
subrangeType    <-  const [DotDot]^Err_024 [const]^Err_025
unpackedStructuredType <-  arrayType  /  recordType  /  setType  /  fileType
arrayType       <-  ARRAY [LBrack]^Err_026 [ordinalType]^Err_027 (Comma [ordinalType]^Err_028)* [RBrack]^Err_029 [OF]^Err_030 [type]^Err_031
recordType      <-  RECORD fieldList [END]^Err_032
setType         <-  SET [OF]^Err_033 [ordinalType]^Err_034
fileType        <-  FILE [OF]^Err_035 [type]^Err_036
ordinalType     <-  newOrdinalType  /  Id
fieldList       <-  ((fixedPart (Semi variantPart)?  /  variantPart) Semi?)?
fixedPart       <-  varDec (Semi varDec)*
variantPart     <-  CASE Id (Colon Id)? OF variant (Semi variant)*
variant         <-  consts Colon LPar fieldList RPar
consts          <-  const (Comma [const]^Err_037)*
varDecs         <-  (VAR [varDec]^Err_038 [Semi]^Err_039 (varDec [Semi]^Err_040)*)?
varDec          <-  ids Colon type
procAndFuncDecs <-  ((procDec  /  funcDec) [Semi]^Err_041)*
procDec         <-  procHeading [Semi]^Err_042 [decs block  /  Id]^Err_043
procHeading     <-  PROCEDURE [Id]^Err_044 formalParams?
funcDec         <-  funcHeading [Semi]^Err_045 [decs block  /  Id]^Err_046
funcHeading     <-  FUNCTION [Id]^Err_047 formalParams? [Colon]^Err_048 [type]^Err_049
formalParams    <-  LPar [formalParamsSection]^Err_050 (Semi [formalParamsSection]^Err_051)* [RPar]^Err_052
formalParamsSection <-  VAR? ids [Colon]^Err_053 [Id]^Err_054  /  procHeading  /  funcHeading
block           <-  BEGIN stmts [END]^Err_055
stmts           <-  stmt (Semi stmt)*
stmt            <-  (label Colon)? (simpleStmt  /  structuredStmt)?
simpleStmt      <-  assignStmt  /  procStmt  /  gotoStmt
assignStmt      <-  var [Assign]^Err_056 [expr]^Err_057
var             <-  Id (LBrack [expr]^Err_058 (Comma [expr]^Err_059)* [RBrack]^Err_060  /  Dot [Id]^Err_061  /  Pointer)*
procStmt        <-  Id params?
params          <-  LPar (param (Comma [param]^Err_062)*)? [RPar]^Err_063
param           <-  expr (Colon expr)? (Colon [expr]^Err_064)?
gotoStmt        <-  GOTO [label]^Err_065
structuredStmt  <-  block  /  conditionalStmt  /  repetitiveStmt  /  withStmt
conditionalStmt <-  ifStmt  /  caseStmt
ifStmt          <-  IF [expr]^Err_066 [THEN]^Err_067 stmt (ELSE stmt)?
caseStmt        <-  CASE [expr]^Err_068 [OF]^Err_069 [caseListElement]^Err_070 (Semi caseListElement)* Semi? [END]^Err_071
caseListElement <-  consts Colon stmt
repetitiveStmt  <-  repeatStmt  /  whileStmt  /  forStmt
repeatStmt      <-  REPEAT stmts [UNTIL]^Err_072 [expr]^Err_073
whileStmt       <-  WHILE [expr]^Err_074 [DO]^Err_075 stmt
forStmt         <-  FOR [Id]^Err_076 [Assign]^Err_077 [expr]^Err_078 [TO  /  DOWNTO]^Err_079 [expr]^Err_080 [DO]^Err_081 stmt
withStmt        <-  WITH [var]^Err_082 (Comma [var]^Err_083)* [DO]^Err_084 stmt
expr            <-  simpleExpr (RelOp simpleExpr)?
simpleExpr      <-  Sign? term (AddOp [term]^Err_085)*
term            <-  factor (MultOp [factor]^Err_086)*
factor          <-  NOT* (funcCall  /  var  /  unsignedConst  /  setConstructor  /  LPar [expr]^Err_087 [RPar]^Err_088)
unsignedConst   <-  UNumber  /  String  /  Id  /  NIL
funcCall        <-  Id [params]^Err_089
setConstructor  <-  LBrack (memberDesignator (Comma [memberDesignator]^Err_090)*)? [RBrack]^Err_091
memberDesignator <-  expr (DotDot [expr]^Err_092)?
AddOp           <-  '+'  /  '-'  /  OR
Assign          <-  ':='
Dot             <-  '.'
DotDot          <-  '..'
CloseComment    <-  '*)'  /  '}'
Colon           <-  ':'
Comma           <-  ','
COMMENT         <-  OpenComment (!CloseComment .)* CloseComment
Eq              <-  '='
BodyId          <-  [a-zA-Z0-9]
Id              <-  !Reserved [a-zA-Z] [a-zA-Z0-9]*
LBrack          <-  '['
LPar            <-  '('
MultOp          <-  '*'  /  '/'  /  DIV  /  MOD  /  AND
OpenComment     <-  '(*'  /  '{'
Pointer         <-  '^'
RBrack          <-  ']'
RelOp           <-  '<='  /  '='  /  '<>'  /  '>='  /  '>'  /  '<'  /  IN
RPar            <-  ')'
Semi            <-  ';'
Sign            <-  '+'  /  '-'
String          <-  "'" (!"'" .)* "'"
UInt            <-  [0-9]+
UNumber         <-  UReal  /  UInt
UReal           <-  [0-9]+ ('.' [0-9]+ ([Ee] ('+'  /  '-') [0-9]+)?  /  [Ee] ('+'  /  '-') [0-9]+)
Reserved        <-  AND  /  ARRAY  /  BEGIN  /  CONST  /  CASE  /  DIV  /  DO  /  DOWNTO  /  ELSE  /  END  /  FILE  /  FOR  /  FUNCTION  /  GOTO  /  IF  /  IN  /  LABEL  /  MOD  /  NIL  /  NOT  /  OF  /  OR  /  PACKED  /  PROCEDURE  /  PROGRAM  /  RECORD  /  REPEAT  /  SET  /  THEN  /  TO  /  TYPE  /  UNTIL  /  VAR  /  WHILE  /  WITH
AND             <-  [Aa] [Nn] [Dd] !BodyId
ARRAY           <-  [Aa] [Rr] [Rr] [Aa] [Yy] !BodyId
BEGIN           <-  [Bb] [Ee] [Gg] [Ii] [Nn] !BodyId
CASE            <-  [Cc] [Aa] [Ss] [Ee] !BodyId
CONST           <-  [Cc] [Oo] [Nn] [Ss] [Tt] !BodyId
DIV             <-  [Dd] [Ii] [Vv] !BodyId
DO              <-  [Dd] [Oo] !BodyId
DOWNTO          <-  [Dd] [Oo] [Ww] [Nn] [Tt] [Oo] !BodyId
ELSE            <-  [Ee] [Ll] [Ss] [Ee] !BodyId
END             <-  [Ee] [Nn] [Dd] !BodyId
FILE            <-  [Ff] [Ii] [Ll] [Ee] !BodyId
FOR             <-  [Ff] [Oo] [Rr] !BodyId
FUNCTION        <-  [Ff] [Uu] [Nn] [Cc] [Tt] [Ii] [Oo] [Nn] !BodyId
GOTO            <-  [Gg] [Oo] [Tt] [Oo] !BodyId
IF              <-  [Ii] [Ff] !BodyId
IN              <-  [Ii] [Nn] !BodyId
LABEL           <-  [Ll] [Aa] [Bb] [Ee] [Ll] !BodyId
MOD             <-  [Mm] [Oo] [Dd] !BodyId
NIL             <-  [Nn] [Ii] [Ll] !BodyId
NOT             <-  [Nn] [Oo] [Tt] !BodyId
OF              <-  [Oo] [Ff] !BodyId
OR              <-  [Oo] [Rr] !BodyId
PACKED          <-  [Pp] [Aa] [Cc] [Kk] [Ee] [Dd] !BodyId
PROCEDURE       <-  [Pp] [Rr] [Oo] [Cc] [Ee] [Dd] [Uu] [Rr] [Ee] !BodyId
PROGRAM         <-  [Pp] [Rr] [Oo] [Gg] [Rr] [Aa] [Mm] !BodyId
RECORD          <-  [Rr] [Ee] [Cc] [Oo] [Rr] [Dd] !BodyId
REPEAT          <-  [Rr] [Ee] [Pp] [Ee] [Aa] [Tt] !BodyId
SET             <-  [Ss] [Ee] [Tt] !BodyId
THEN            <-  [Tt] [Hh] [Ee] [Nn] !BodyId
TO              <-  [Tt] [Oo] !BodyId
TYPE            <-  [Tt] [Yy] [Pp] [Ee] !BodyId
UNTIL           <-  [Uu] [Nn] [Tt] [Ii] [Ll] !BodyId
VAR             <-  [Vv] [Aa] [Rr] !BodyId
WHILE           <-  [Ww] [Hh] [Ii] [Ll] [Ee] !BodyId
WITH            <-  [Ww] [Ii] [Tt] [Hh] !BodyId
SKIP            <-  ([ 	
]  /  COMMENT)*
Token           <-  WITH  /  WHILE  /  VAR  /  UReal  /  UNumber  /  UNTIL  /  UInt  /  TYPE  /  TO  /  THEN  /  String  /  Sign  /  Semi  /  SET  /  Reserved  /  RelOp  /  RPar  /  REPEAT  /  RECORD  /  RBrack  /  Pointer  /  PROGRAM  /  PROCEDURE  /  PACKED  /  OpenComment  /  OR  /  OF  /  NOT  /  NIL  /  MultOp  /  MOD  /  LPar  /  LBrack  /  LABEL  /  Id  /  IN  /  IF  /  GOTO  /  FUNCTION  /  FOR  /  FILE  /  Eq  /  END  /  ELSE  /  DotDot  /  Dot  /  DOWNTO  /  DO  /  DIV  /  Comma  /  Colon  /  CloseComment  /  CONST  /  COMMENT  /  CASE  /  BodyId  /  BEGIN  /  Assign  /  AddOp  /  ARRAY  /  AND
EatToken        <-  (Token  /  (!SKIP .)+) SKIP
Err_001         <-  (!Dot EatToken)*
Err_002         <-  (!(!.) EatToken)*
Err_003         <-  (!(Semi  /  LPar) EatToken)*
Err_004         <-  (!RPar EatToken)*
Err_005         <-  (!Semi EatToken)*
Err_006         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  LABEL  /  FUNCTION  /  CONST  /  BEGIN) EatToken)*
Err_007         <-  (!(RPar  /  Colon) EatToken)*
Err_008         <-  (!Semi EatToken)*
Err_009         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  FUNCTION  /  CONST  /  BEGIN) EatToken)*
Err_010         <-  (!Semi EatToken)*
Err_011         <-  (!Semi EatToken)*
Err_012         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  Id  /  FUNCTION  /  BEGIN) EatToken)*
Err_013         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  FUNCTION  /  BEGIN) EatToken)*
Err_014         <-  (!(UNumber  /  String  /  Sign  /  Id) EatToken)*
Err_015         <-  (!Semi EatToken)*
Err_016         <-  (!Semi EatToken)*
Err_017         <-  (!(VAR  /  PROCEDURE  /  Id  /  FUNCTION  /  BEGIN) EatToken)*
Err_018         <-  (!(VAR  /  PROCEDURE  /  FUNCTION  /  BEGIN) EatToken)*
Err_019         <-  (!(UNumber  /  String  /  Sign  /  SET  /  RECORD  /  Pointer  /  PACKED  /  LPar  /  Id  /  FILE  /  ARRAY) EatToken)*
Err_020         <-  (!Semi EatToken)*
Err_021         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_022         <-  (!RPar EatToken)*
Err_023         <-  (!(Semi  /  RPar  /  RBrack  /  END  /  Comma) EatToken)*
Err_024         <-  (!(UNumber  /  String  /  Sign  /  Id) EatToken)*
Err_025         <-  (!(Semi  /  RPar  /  RBrack  /  END  /  Comma) EatToken)*
Err_026         <-  (!(UNumber  /  String  /  Sign  /  LPar  /  Id) EatToken)*
Err_027         <-  (!(RBrack  /  Comma) EatToken)*
Err_028         <-  (!RBrack EatToken)*
Err_029         <-  (!OF EatToken)*
Err_030         <-  (!(UNumber  /  String  /  Sign  /  SET  /  RECORD  /  Pointer  /  PACKED  /  LPar  /  Id  /  FILE  /  ARRAY) EatToken)*
Err_031         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_032         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_033         <-  (!(UNumber  /  String  /  Sign  /  LPar  /  Id) EatToken)*
Err_034         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_035         <-  (!(UNumber  /  String  /  Sign  /  SET  /  RECORD  /  Pointer  /  PACKED  /  LPar  /  Id  /  FILE  /  ARRAY) EatToken)*
Err_036         <-  (!(Semi  /  RPar  /  END) EatToken)*
Err_037         <-  (!Colon EatToken)*
Err_038         <-  (!Semi EatToken)*
Err_039         <-  (!(PROCEDURE  /  Id  /  FUNCTION  /  BEGIN) EatToken)*
Err_040         <-  (!(PROCEDURE  /  FUNCTION  /  BEGIN) EatToken)*
Err_041         <-  (!BEGIN EatToken)*
Err_042         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  LABEL  /  Id  /  FUNCTION  /  CONST  /  BEGIN) EatToken)*
Err_043         <-  (!Semi EatToken)*
Err_044         <-  (!(Semi  /  RPar  /  LPar) EatToken)*
Err_045         <-  (!(VAR  /  TYPE  /  PROCEDURE  /  LABEL  /  Id  /  FUNCTION  /  CONST  /  BEGIN) EatToken)*
Err_046         <-  (!Semi EatToken)*
Err_047         <-  (!(LPar  /  Colon) EatToken)*
Err_048         <-  (!(UNumber  /  String  /  Sign  /  SET  /  RECORD  /  Pointer  /  PACKED  /  LPar  /  Id  /  FILE  /  ARRAY) EatToken)*
Err_049         <-  (!(Semi  /  RPar) EatToken)*
Err_050         <-  (!(Semi  /  RPar) EatToken)*
Err_051         <-  (!RPar EatToken)*
Err_052         <-  (!(Semi  /  RPar  /  Colon) EatToken)*
Err_053         <-  (!Id EatToken)*
Err_054         <-  (!(Semi  /  RPar) EatToken)*
Err_055         <-  (!(UNTIL  /  Semi  /  END  /  ELSE  /  Dot) EatToken)*
Err_056         <-  (!(UNumber  /  String  /  Sign  /  NOT  /  NIL  /  LPar  /  LBrack  /  Id) EatToken)*
Err_057         <-  (!(UNTIL  /  Semi  /  END  /  ELSE) EatToken)*
Err_058         <-  (!(RBrack  /  Comma) EatToken)*
Err_059         <-  (!RBrack EatToken)*
Err_060         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  MultOp  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  Assign  /  AddOp) EatToken)*
Err_061         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  MultOp  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  Assign  /  AddOp) EatToken)*
Err_062         <-  (!RPar EatToken)*
Err_063         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  MultOp  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  AddOp) EatToken)*
Err_064         <-  (!(RPar  /  Comma) EatToken)*
Err_065         <-  (!(UNTIL  /  Semi  /  END  /  ELSE) EatToken)*
Err_066         <-  (!THEN EatToken)*
Err_067         <-  (!(WITH  /  WHILE  /  UNTIL  /  UInt  /  Semi  /  REPEAT  /  Id  /  IF  /  GOTO  /  FOR  /  END  /  ELSE  /  CASE  /  BEGIN) EatToken)*
Err_068         <-  (!OF EatToken)*
Err_069         <-  (!(UNumber  /  String  /  Sign  /  Id) EatToken)*
Err_070         <-  (!(Semi  /  END) EatToken)*
Err_071         <-  (!(UNTIL  /  Semi  /  END  /  ELSE) EatToken)*
Err_072         <-  (!(UNumber  /  String  /  Sign  /  NOT  /  NIL  /  LPar  /  LBrack  /  Id) EatToken)*
Err_073         <-  (!(UNTIL  /  Semi  /  END  /  ELSE) EatToken)*
Err_074         <-  (!DO EatToken)*
Err_075         <-  (!(WITH  /  WHILE  /  UNTIL  /  UInt  /  Semi  /  REPEAT  /  Id  /  IF  /  GOTO  /  FOR  /  END  /  ELSE  /  CASE  /  BEGIN) EatToken)*
Err_076         <-  (!Assign EatToken)*
Err_077         <-  (!(UNumber  /  String  /  Sign  /  NOT  /  NIL  /  LPar  /  LBrack  /  Id) EatToken)*
Err_078         <-  (!(TO  /  DOWNTO) EatToken)*
Err_079         <-  (!(UNumber  /  String  /  Sign  /  NOT  /  NIL  /  LPar  /  LBrack  /  Id) EatToken)*
Err_080         <-  (!DO EatToken)*
Err_081         <-  (!(WITH  /  WHILE  /  UNTIL  /  UInt  /  Semi  /  REPEAT  /  Id  /  IF  /  GOTO  /  FOR  /  END  /  ELSE  /  CASE  /  BEGIN) EatToken)*
Err_082         <-  (!(DO  /  Comma) EatToken)*
Err_083         <-  (!DO EatToken)*
Err_084         <-  (!(WITH  /  WHILE  /  UNTIL  /  UInt  /  Semi  /  REPEAT  /  Id  /  IF  /  GOTO  /  FOR  /  END  /  ELSE  /  CASE  /  BEGIN) EatToken)*
Err_085         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon) EatToken)*
Err_086         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  AddOp) EatToken)*
Err_087         <-  (!RPar EatToken)*
Err_088         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  MultOp  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  AddOp) EatToken)*
Err_089         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  MultOp  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  AddOp) EatToken)*
Err_090         <-  (!RBrack EatToken)*
Err_091         <-  (!(UNTIL  /  TO  /  THEN  /  Semi  /  RelOp  /  RPar  /  RBrack  /  OF  /  MultOp  /  END  /  ELSE  /  DotDot  /  DOWNTO  /  DO  /  Comma  /  Colon  /  AddOp) EatToken)*
Err_092         <-  (!(RBrack  /  Comma) EatToken)*

Yes: 	Teste.pas
Yes: 	somaParImpar.pas
Yes: 	HelloWorld.pas
Yes: 	posneg.pas
Yes: 	aprovado.pas
Yes: 	quadrado.pas
Yes: 	quick.pas
Yes: 	sched.pas
Yes: 	operators.pas
Yes: 	cubo.pas
Yes: 	gasolina.pas
Yes: 	somaEProduto.pas
Yes: 	PlayingWithDice.pas
Yes: 	bubble.pas
Yes: 	triangulo.pas
Yes: 	maior.pas
Yes: 	retangulo.pas
No: 	EndInputErr.pas
r = nil lab = fail line: 7 col: 1
No: 	LabelErr1.pas
r = nil lab = fail line: 4 col: 2
No: 	ExprErr13.pas
r = nil lab = fail line: 4 col: 14
No: 	ConstErr2.pas
r = nil lab = fail line: 4 col: 13
No: 	LBrackErr.pas
r = nil lab = fail line: 4 col: 12
No: 	ConstErr3.pas
r = nil lab = fail line: 4 col: 31
No: 	RParErr4.pas
r = nil lab = fail line: 3 col: 20
No: 	OfErr1.pas
r = nil lab = fail line: 4 col: 19
No: 	IdErr6.pas
r = nil lab = fail line: 4 col: 22
No: 	ExprErr5.pas
r = nil lab = fail line: 4 col: 5
No: 	FactorErr.pas
r = nil lab = fail line: 4 col: 11
No: 	TypeErr2.pas
r = nil lab = fail line: 4 col: 23
No: 	ExprErr6.pas
r = nil lab = fail line: 4 col: 7
No: 	IdErr3.pas
r = nil lab = fail line: 4 col: 2
No: 	EndErr3.pas
r = nil lab = fail line: 7 col: 1
No: 	ConstErr5.pas
r = nil lab = fail line: 5 col: 3
No: 	SimpleExprErr.pas
r = nil lab = fail line: 5 col: 1
No: 	OfErr2.pas
r = nil lab = fail line: 4 col: 10
No: 	LabelErr3.pas
r = nil lab = fail line: 4 col: 7
No: 	RParErr6.pas
r = nil lab = fail line: 4 col: 19
No: 	ProcBodyErr.pas
r = nil lab = fail line: 3 col: 14
No: 	FormalParamErr1.pas
r = nil lab = fail line: 3 col: 13
No: 	IdErr12.pas
r = nil lab = fail line: 4 col: 6
No: 	SemiErr9.pas
r = nil lab = fail line: 8 col: 1
No: 	RBrackErr3.pas
r = nil lab = fail line: 4 col: 12
No: 	ColonErr4.pas
r = nil lab = fail line: 3 col: 15
No: 	ProgNameErr.pas
r = nil lab = fail line: 1 col: 9
No: 	TypeErr5.pas
r = nil lab = fail line: 3 col: 15
No: 	DotErr.pas
r = nil lab = fail line: 5 col: 3
No: 	OrdinalTypeErr3.pas
r = nil lab = fail line: 4 col: 14
No: 	ConstErr1.pas
r = nil lab = fail line: 4 col: 7
No: 	IdErr11.pas
r = nil lab = fail line: 4 col: 4
No: 	SemiErr6.pas
r = nil lab = fail line: 7 col: 1
No: 	IdErr8.pas
r = nil lab = fail line: 3 col: 11
No: 	SemiErr3.pas
r = nil lab = fail line: 6 col: 1
No: 	ThenErr.pas
r = nil lab = fail line: 5 col: 1
No: 	ConstErr4.pas
r = nil lab = fail line: 4 col: 34
No: 	DoErr3.pas
r = nil lab = fail line: 4 col: 9
No: 	ExprErr7.pas
r = nil lab = fail line: 6 col: 8
No: 	IdErr7.pas
r = nil lab = fail line: 4 col: 26
No: 	IdErr1.pas
r = nil lab = fail line: 1 col: 22
No: 	SemiErr11.pas
r = nil lab = fail line: 4 col: 1
No: 	RBrackErr2.pas
r = nil lab = fail line: 4 col: 9
No: 	ToDownToErr.pas
r = nil lab = fail line: 4 col: 14
No: 	ExprErr12.pas
r = nil lab = fail line: 4 col: 11
No: 	ColonErr6.pas
r = nil lab = fail line: 5 col: 5
No: 	AssignErr.pas
r = nil lab = fail line: 4 col: 8
No: 	TypeErr3.pas
r = nil lab = fail line: 4 col: 18
No: 	ColonErr2.pas
r = nil lab = fail line: 4 col: 7
No: 	ExprErr11.pas
r = nil lab = fail line: 4 col: 12
No: 	SemiErr5.pas
r = nil lab = fail line: 5 col: 2
No: 	OfErr4.pas
r = nil lab = fail line: 4 col: 29
No: 	UntilErr.pas
r = nil lab = fail line: 6 col: 6
No: 	BeginErr.pas
r = nil lab = fail line: 4 col: 1
No: 	VarErr1.pas
r = nil lab = fail line: 4 col: 7
No: 	ExprErr8.pas
r = nil lab = fail line: 4 col: 8
No: 	RParErr2.pas
r = nil lab = fail line: 4 col: 18
No: 	RealParamErr.pas
r = nil lab = fail line: 4 col: 12
No: 	IdErr4.pas
r = nil lab = fail line: 4 col: 2
No: 	SemiErr1.pas
r = nil lab = fail line: 3 col: 1
No: 	SemiErr8.pas
r = nil lab = fail line: 6 col: 1
No: 	IdErr9.pas
r = nil lab = fail line: 3 col: 10
No: 	ExprErr4.pas
r = nil lab = fail line: 4 col: 12
No: 	EndErr2.pas
r = nil lab = fail line: 5 col: 4
No: 	TermErr.pas
r = nil lab = fail line: 4 col: 11
No: 	ExprErr3.pas
r = nil lab = fail line: 4 col: 7
No: 	RBrackErr1.pas
r = nil lab = fail line: 4 col: 18
No: 	SemiErr10.pas
r = nil lab = fail line: 4 col: 1
No: 	DoErr1.pas
r = nil lab = fail line: 5 col: 3
No: 	IdErr2.pas
r = nil lab = fail line: 4 col: 2
No: 	ExprErr9.pas
r = nil lab = fail line: 4 col: 11
No: 	TypeErr1.pas
r = nil lab = fail line: 4 col: 10
No: 	VarErr2.pas
r = nil lab = fail line: 4 col: 10
No: 	ProgErr.pas
r = nil lab = fail line: 1 col: 5
No: 	SemiErr2.pas
r = nil lab = fail line: 6 col: 1
No: 	OrdinalTypeErr2.pas
r = nil lab = fail line: 4 col: 19
No: 	ColonErr5.pas
r = nil lab = fail line: 4 col: 4
No: 	OfErr3.pas
r = nil lab = fail line: 4 col: 11
No: 	RParErr5.pas
r = nil lab = fail line: 5 col: 1
No: 	EqErr2.pas
r = nil lab = fail line: 4 col: 4
No: 	RParErr3.pas
r = nil lab = fail line: 7 col: 5
No: 	RParErr1.pas
r = nil lab = fail line: 1 col: 27
No: 	ColonErr1.pas
r = nil lab = fail line: 4 col: 33
No: 	OrdinalTypeErr1.pas
r = nil lab = fail line: 4 col: 13
No: 	DoErr2.pas
r = nil lab = fail line: 5 col: 1
No: 	IdErr10.pas
r = nil lab = fail line: 3 col: 17
No: 	SemiErr4.pas
r = nil lab = fail line: 7 col: 1
No: 	EndErr1.pas
r = nil lab = fail line: 4 col: 27
No: 	ExprErr10.pas
r = nil lab = fail line: 4 col: 16
No: 	OfErr5.pas
r = nil lab = fail line: 4 col: 11
No: 	IdErr5.pas
r = nil lab = fail line: 4 col: 11
No: 	LabelErr2.pas
r = nil lab = fail line: 4 col: 5
No: 	LParErr.pas
r = nil lab = fail line: 7 col: 12
No: 	ColonErr3.pas
r = nil lab = fail line: 3 col: 12
No: 	EqErr1.pas
r = nil lab = fail line: 4 col: 4
No: 	ExprErr2.pas
r = nil lab = fail line: 4 col: 4
No: 	FormalParamErr2.pas
r = nil lab = fail line: 3 col: 23
No: 	SemiErr7.pas
r = nil lab = fail line: 4 col: 9
No: 	TypeErr4.pas
r = nil lab = fail line: 4 col: 7
No: 	ExprErr1.pas
r = nil lab = fail line: 4 col: 7
No: 	FuncBodyErr.pas
r = nil lab = fail line: 3 col: 19
